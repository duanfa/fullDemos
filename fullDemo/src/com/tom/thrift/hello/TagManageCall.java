/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.tom.thrift.hello;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class TagManageCall {

  public interface Iface {

    public String searchTagRes(long appkey, String uid, String tagIds, boolean spread, long startTime, long endTime) throws org.apache.thrift.TException;

    public String searchForecastTagRes(int appkey, String uid, String tagIds, long startTime, long endTime) throws org.apache.thrift.TException;

    public long addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType,int days) throws org.apache.thrift.TException;

    public int modifyTag(long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException;

    public int deleteTag(long tagId) throws org.apache.thrift.TException;

    public String searchTags(long tagId, long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException;

    public long addGroup(long appkey, String groupName) throws org.apache.thrift.TException;

    public int modifyGroup(long groupId, String groupName) throws org.apache.thrift.TException;

    public int deleteGroup(long groupId) throws org.apache.thrift.TException;

    public String searchGroups(String jsonParam) throws org.apache.thrift.TException;

    public long addWgtConfig(long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule) throws org.apache.thrift.TException;

    public int modifyWgtConfig(long configId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule) throws org.apache.thrift.TException;

    public int deleteWgtConfig(long configId) throws org.apache.thrift.TException;

    public String searchWgtConfigs(long configId, long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, int page, int size) throws org.apache.thrift.TException;

    public String getFansTagInfo(int appkey, String uids) throws org.apache.thrift.TException;

    public String getActivityKOL(int appkey, String uids) throws org.apache.thrift.TException;

    public String getFansNumDistOfProperty(int appKey, String propertyName, long startTime, long endTime) throws org.apache.thrift.TException;

    public String getFansNumDistOfTagByCon(int appKey, String parentClassId, String propertyName, String propertyValue, long startTime, long endTime) throws org.apache.thrift.TException;

    public String getFansListByFanPropertyAndTagCondi(int appKey, int tagId, String classId, int page, int pageSize, String propertyName, String propertyValue, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String getFansListByFanPropertiesAndTagId(int appKey, int tagId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String getFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String getFansNumDistOfNatureProperty(String propertyCondition, int appKey, String groupFieldName) throws org.apache.thrift.TException;

    public String getFansListByFanPropertiesAndClassId(int appKey, String classId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String getFansNumOfGroupFieldByPropertyCon(int appKey, String propertyName, String propertyValue, long startTime, long endTime, String statisPropertyName) throws org.apache.thrift.TException;

    public String getLatestTimeOfFansPropertyTagCount(int appKey) throws org.apache.thrift.TException;

    public String getFansListByFanPropertiesAndTagIds(int appKey, String tagIds, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String fetchFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int offset, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String getFansInfoByOpenIds(String openIds) throws org.apache.thrift.TException;

    public String getListByRecursivePropertiesAndTagIds(String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String getListByCollectionQuery(String propertyCondition, String tagCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException;

    public String groupByByCollectionQuery(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int sampleCount) throws org.apache.thrift.TException;

    public String groupSpecialTagIdByRecursiveFilter(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int groupTagId) throws org.apache.thrift.TException;

    public String groupTagsByRecursiveFilter(String propertyCondition, String tagCondition) throws org.apache.thrift.TException;

    public long addTagClass(long appkey, String className, String classDescription, long pid) throws org.apache.thrift.TException;

    public String searchTagClass(long appkey, String className, String classIds, long pid, boolean child, int page, int size) throws org.apache.thrift.TException;

    public long addTagByClass(String jsonParam) throws org.apache.thrift.TException;

    public String searchTagsByClass(long appkey, String tagName, String tagIds, String classIds, double defWeight, int calcType, int generalTagType, String generalPropName, int page, int size) throws org.apache.thrift.TException;

    public int deleteLeafTagClass(long classId) throws org.apache.thrift.TException;

    public int modifyTagByClass(String jsonParam) throws org.apache.thrift.TException;

    public String searchAllTagClass(long appkey, int size) throws org.apache.thrift.TException;

    public String fuzzySearchTags(long appkey, String tagName, int page, int size) throws org.apache.thrift.TException;

    public long addExp(long tagWeightId, int expKey, String expVal, String expOp) throws org.apache.thrift.TException;

    public int deleteExp(long expId) throws org.apache.thrift.TException;

    public int modifyExp(String jsonParam) throws org.apache.thrift.TException;

    public String searchExps(long expId, long tagWeightId, int page, int size) throws org.apache.thrift.TException;

    public String searchAlgos(int calcType) throws org.apache.thrift.TException;

    public long addAppidConfig(String jsonParam) throws org.apache.thrift.TException;

    public int updateAppidConfig(String jsonParam) throws org.apache.thrift.TException;

    public int deleteAppidConfig(long appkey) throws org.apache.thrift.TException;

    public String searchAppidConfig(long appkey) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void searchTagRes(long appkey, String uid, String tagIds, boolean spread, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchTagRes_call> resultHandler) throws org.apache.thrift.TException;

    public void searchForecastTagRes(int appkey, String uid, String tagIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchForecastTagRes_call> resultHandler) throws org.apache.thrift.TException;

    public void addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addTag_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyTag(long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType,int days, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyTag_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteTag(long tagId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteTag_call> resultHandler) throws org.apache.thrift.TException;

    public void searchTags(long tagId, long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchTags_call> resultHandler) throws org.apache.thrift.TException;

    public void addGroup(long appkey, String groupName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyGroup(long groupId, String groupName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteGroup(long groupId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void searchGroups(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchGroups_call> resultHandler) throws org.apache.thrift.TException;

    public void addWgtConfig(long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addWgtConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyWgtConfig(long configId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyWgtConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteWgtConfig(long configId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteWgtConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void searchWgtConfigs(long configId, long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, int page, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchWgtConfigs_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansTagInfo(int appkey, String uids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansTagInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getActivityKOL(int appkey, String uids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getActivityKOL_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansNumDistOfProperty(int appKey, String propertyName, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansNumDistOfProperty_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansNumDistOfTagByCon(int appKey, String parentClassId, String propertyName, String propertyValue, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansNumDistOfTagByCon_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansListByFanPropertyAndTagCondi(int appKey, int tagId, String classId, int page, int pageSize, String propertyName, String propertyValue, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansListByFanPropertyAndTagCondi_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansListByFanPropertiesAndTagId(int appKey, int tagId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansListByFanPropertiesAndTagId_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansListByFanPropertiesAndAppId_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansNumDistOfNatureProperty(String propertyCondition, int appKey, String groupFieldName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansNumDistOfNatureProperty_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansListByFanPropertiesAndClassId(int appKey, String classId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansListByFanPropertiesAndClassId_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansNumOfGroupFieldByPropertyCon(int appKey, String propertyName, String propertyValue, long startTime, long endTime, String statisPropertyName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansNumOfGroupFieldByPropertyCon_call> resultHandler) throws org.apache.thrift.TException;

    public void getLatestTimeOfFansPropertyTagCount(int appKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLatestTimeOfFansPropertyTagCount_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansListByFanPropertiesAndTagIds(int appKey, String tagIds, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansListByFanPropertiesAndTagIds_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int offset, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchFansListByFanPropertiesAndAppId_call> resultHandler) throws org.apache.thrift.TException;

    public void getFansInfoByOpenIds(String openIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFansInfoByOpenIds_call> resultHandler) throws org.apache.thrift.TException;

    public void getListByRecursivePropertiesAndTagIds(String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListByRecursivePropertiesAndTagIds_call> resultHandler) throws org.apache.thrift.TException;

    public void getListByCollectionQuery(String propertyCondition, String tagCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListByCollectionQuery_call> resultHandler) throws org.apache.thrift.TException;

    public void groupByByCollectionQuery(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int sampleCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.groupByByCollectionQuery_call> resultHandler) throws org.apache.thrift.TException;

    public void groupSpecialTagIdByRecursiveFilter(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int groupTagId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.groupSpecialTagIdByRecursiveFilter_call> resultHandler) throws org.apache.thrift.TException;

    public void groupTagsByRecursiveFilter(String propertyCondition, String tagCondition, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.groupTagsByRecursiveFilter_call> resultHandler) throws org.apache.thrift.TException;

    public void addTagClass(long appkey, String className, String classDescription, long pid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addTagClass_call> resultHandler) throws org.apache.thrift.TException;

    public void searchTagClass(long appkey, String className, String classIds, long pid, boolean child, int page, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchTagClass_call> resultHandler) throws org.apache.thrift.TException;

    public void addTagByClass(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addTagByClass_call> resultHandler) throws org.apache.thrift.TException;

    public void searchTagsByClass(long appkey, String tagName, String tagIds, String classIds, double defWeight, int calcType, int generalTagType, String generalPropName, int page, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchTagsByClass_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteLeafTagClass(long classId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteLeafTagClass_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyTagByClass(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyTagByClass_call> resultHandler) throws org.apache.thrift.TException;

    public void searchAllTagClass(long appkey, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchAllTagClass_call> resultHandler) throws org.apache.thrift.TException;

    public void fuzzySearchTags(long appkey, String tagName, int page, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fuzzySearchTags_call> resultHandler) throws org.apache.thrift.TException;

    public void addExp(long tagWeightId, int expKey, String expVal, String expOp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addExp_call> resultHandler) throws org.apache.thrift.TException;
    
    public void deleteExp(long expId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteExp_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyExp(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyExp_call> resultHandler) throws org.apache.thrift.TException;

    public void searchExps(long expId, long tagWeightId, int page, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchExps_call> resultHandler) throws org.apache.thrift.TException;

    public void searchAlgos(int calcType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchAlgos_call> resultHandler) throws org.apache.thrift.TException;

    public void addAppidConfig(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAppidConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void updateAppidConfig(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateAppidConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteAppidConfig(long appkey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteAppidConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void searchAppidConfig(long appkey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchAppidConfig_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected org.apache.thrift.protocol.TProtocol iprot_;
    protected org.apache.thrift.protocol.TProtocol oprot_;

    protected int seqid_;

    public org.apache.thrift.protocol.TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public org.apache.thrift.protocol.TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public String searchTagRes(long appkey, String uid, String tagIds, boolean spread, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_searchTagRes(appkey, uid, tagIds, spread, startTime, endTime);
      return recv_searchTagRes();
    }

    public void send_searchTagRes(long appkey, String uid, String tagIds, boolean spread, long startTime, long endTime) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagRes", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchTagRes_args args = new searchTagRes_args();
      args.setAppkey(appkey);
      args.setUid(uid);
      args.setTagIds(tagIds);
      args.setSpread(spread);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchTagRes() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchTagRes failed: out of sequence response");
      }
      searchTagRes_result result = new searchTagRes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchTagRes failed: unknown result");
    }

    public String searchForecastTagRes(int appkey, String uid, String tagIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_searchForecastTagRes(appkey, uid, tagIds, startTime, endTime);
      return recv_searchForecastTagRes();
    }

    public void send_searchForecastTagRes(int appkey, String uid, String tagIds, long startTime, long endTime) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchForecastTagRes", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchForecastTagRes_args args = new searchForecastTagRes_args();
      args.setAppkey(appkey);
      args.setUid(uid);
      args.setTagIds(tagIds);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchForecastTagRes() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchForecastTagRes failed: out of sequence response");
      }
      searchForecastTagRes_result result = new searchForecastTagRes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchForecastTagRes failed: unknown result");
    }

    public long addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      send_addTag(appkey, tagname, tagDescri, tagclass, tagSubclass, defWeight, calcType, days);
      return recv_addTag();
    }

    public void send_addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addTag_args args = new addTag_args();
      args.setAppkey(appkey);
      args.setTagname(tagname);
      args.setTagDescri(tagDescri);
      args.setTagclass(tagclass);
      args.setTagSubclass(tagSubclass);
      args.setDefWeight(defWeight);
      args.setCalcType(calcType);
      args.setDays(days);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addTag() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addTag failed: out of sequence response");
      }
      addTag_result result = new addTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTag failed: unknown result");
    }

    public int modifyTag(long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      send_modifyTag(appkey, tagname, tagclass, tagSubclass, defWeight, calcType, days);
      return recv_modifyTag();
    }

    public void send_modifyTag(long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTag", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      modifyTag_args args = new modifyTag_args();
      args.setAppkey(appkey);
      args.setTagname(tagname);
      args.setTagclass(tagclass);
      args.setTagSubclass(tagSubclass);
      args.setDefWeight(defWeight);
      args.setCalcType(calcType);
      args.setDays(days);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_modifyTag() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "modifyTag failed: out of sequence response");
      }
      modifyTag_result result = new modifyTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyTag failed: unknown result");
    }

    public int deleteTag(long tagId) throws org.apache.thrift.TException
    {
      send_deleteTag(tagId);
      return recv_deleteTag();
    }

    public void send_deleteTag(long tagId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTag", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteTag_args args = new deleteTag_args();
      args.setTagId(tagId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteTag() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteTag failed: out of sequence response");
      }
      deleteTag_result result = new deleteTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteTag failed: unknown result");
    }

    public String searchTags(long tagId, long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      send_searchTags(tagId, appkey, tagname, tagclass, tagSubclass, defWeight, calcType, days);
      return recv_searchTags();
    }

    public void send_searchTags(long tagId, long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTags", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchTags_args args = new searchTags_args();
      args.setTagId(tagId);
      args.setAppkey(appkey);
      args.setTagname(tagname);
      args.setTagclass(tagclass);
      args.setTagSubclass(tagSubclass);
      args.setDefWeight(defWeight);
      args.setCalcType(calcType);
      args.setDays(days);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchTags() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchTags failed: out of sequence response");
      }
      searchTags_result result = new searchTags_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchTags failed: unknown result");
    }

    public long addGroup(long appkey, String groupName) throws org.apache.thrift.TException
    {
      send_addGroup(appkey, groupName);
      return recv_addGroup();
    }

    public void send_addGroup(long appkey, String groupName) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGroup", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addGroup_args args = new addGroup_args();
      args.setAppkey(appkey);
      args.setGroupName(groupName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addGroup() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addGroup failed: out of sequence response");
      }
      addGroup_result result = new addGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addGroup failed: unknown result");
    }

    public int modifyGroup(long groupId, String groupName) throws org.apache.thrift.TException
    {
      send_modifyGroup(groupId, groupName);
      return recv_modifyGroup();
    }

    public void send_modifyGroup(long groupId, String groupName) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyGroup", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      modifyGroup_args args = new modifyGroup_args();
      args.setGroupId(groupId);
      args.setGroupName(groupName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_modifyGroup() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "modifyGroup failed: out of sequence response");
      }
      modifyGroup_result result = new modifyGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyGroup failed: unknown result");
    }

    public int deleteGroup(long groupId) throws org.apache.thrift.TException
    {
      send_deleteGroup(groupId);
      return recv_deleteGroup();
    }

    public void send_deleteGroup(long groupId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGroup", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteGroup_args args = new deleteGroup_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteGroup() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteGroup failed: out of sequence response");
      }
      deleteGroup_result result = new deleteGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteGroup failed: unknown result");
    }

    public String searchGroups(String jsonParam) throws org.apache.thrift.TException
    {
      send_searchGroups(jsonParam);
      return recv_searchGroups();
    }

    public void send_searchGroups(String jsonParam) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchGroups", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchGroups_args args = new searchGroups_args();
      args.setJsonParam(jsonParam);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchGroups() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchGroups failed: out of sequence response");
      }
      searchGroups_result result = new searchGroups_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchGroups failed: unknown result");
    }

    public long addWgtConfig(long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule) throws org.apache.thrift.TException
    {
      send_addWgtConfig(tagId, groupId, itemid, actionid, itemtype, weight, rule);
      return recv_addWgtConfig();
    }

    public void send_addWgtConfig(long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addWgtConfig", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addWgtConfig_args args = new addWgtConfig_args();
      args.setTagId(tagId);
      args.setGroupId(groupId);
      args.setItemid(itemid);
      args.setActionid(actionid);
      args.setItemtype(itemtype);
      args.setWeight(weight);
      args.setRule(rule);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addWgtConfig() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addWgtConfig failed: out of sequence response");
      }
      addWgtConfig_result result = new addWgtConfig_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addWgtConfig failed: unknown result");
    }

    public int modifyWgtConfig(long configId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule) throws org.apache.thrift.TException
    {
      send_modifyWgtConfig(configId, groupId, itemid, actionid, itemtype, weight, rule);
      return recv_modifyWgtConfig();
    }

    public void send_modifyWgtConfig(long configId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyWgtConfig", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      modifyWgtConfig_args args = new modifyWgtConfig_args();
      args.setConfigId(configId);
      args.setGroupId(groupId);
      args.setItemid(itemid);
      args.setActionid(actionid);
      args.setItemtype(itemtype);
      args.setWeight(weight);
      args.setRule(rule);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_modifyWgtConfig() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "modifyWgtConfig failed: out of sequence response");
      }
      modifyWgtConfig_result result = new modifyWgtConfig_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyWgtConfig failed: unknown result");
    }

    public int deleteWgtConfig(long configId) throws org.apache.thrift.TException
    {
      send_deleteWgtConfig(configId);
      return recv_deleteWgtConfig();
    }

    public void send_deleteWgtConfig(long configId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteWgtConfig", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteWgtConfig_args args = new deleteWgtConfig_args();
      args.setConfigId(configId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteWgtConfig() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteWgtConfig failed: out of sequence response");
      }
      deleteWgtConfig_result result = new deleteWgtConfig_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteWgtConfig failed: unknown result");
    }

    public String searchWgtConfigs(long configId, long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, int page, int size) throws org.apache.thrift.TException
    {
      send_searchWgtConfigs(configId, tagId, groupId, itemid, actionid, itemtype, weight, page, size);
      return recv_searchWgtConfigs();
    }

    public void send_searchWgtConfigs(long configId, long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, int page, int size) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchWgtConfigs", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchWgtConfigs_args args = new searchWgtConfigs_args();
      args.setConfigId(configId);
      args.setTagId(tagId);
      args.setGroupId(groupId);
      args.setItemid(itemid);
      args.setActionid(actionid);
      args.setItemtype(itemtype);
      args.setWeight(weight);
      args.setPage(page);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchWgtConfigs() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchWgtConfigs failed: out of sequence response");
      }
      searchWgtConfigs_result result = new searchWgtConfigs_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchWgtConfigs failed: unknown result");
    }

    public String getFansTagInfo(int appkey, String uids) throws org.apache.thrift.TException
    {
      send_getFansTagInfo(appkey, uids);
      return recv_getFansTagInfo();
    }

    public void send_getFansTagInfo(int appkey, String uids) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansTagInfo", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansTagInfo_args args = new getFansTagInfo_args();
      args.setAppkey(appkey);
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansTagInfo() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansTagInfo failed: out of sequence response");
      }
      getFansTagInfo_result result = new getFansTagInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansTagInfo failed: unknown result");
    }

    public String getActivityKOL(int appkey, String uids) throws org.apache.thrift.TException
    {
      send_getActivityKOL(appkey, uids);
      return recv_getActivityKOL();
    }

    public void send_getActivityKOL(int appkey, String uids) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActivityKOL", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getActivityKOL_args args = new getActivityKOL_args();
      args.setAppkey(appkey);
      args.setUids(uids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getActivityKOL() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getActivityKOL failed: out of sequence response");
      }
      getActivityKOL_result result = new getActivityKOL_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActivityKOL failed: unknown result");
    }

    public String getFansNumDistOfProperty(int appKey, String propertyName, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getFansNumDistOfProperty(appKey, propertyName, startTime, endTime);
      return recv_getFansNumDistOfProperty();
    }

    public void send_getFansNumDistOfProperty(int appKey, String propertyName, long startTime, long endTime) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfProperty", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansNumDistOfProperty_args args = new getFansNumDistOfProperty_args();
      args.setAppKey(appKey);
      args.setPropertyName(propertyName);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansNumDistOfProperty() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansNumDistOfProperty failed: out of sequence response");
      }
      getFansNumDistOfProperty_result result = new getFansNumDistOfProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansNumDistOfProperty failed: unknown result");
    }

    public String getFansNumDistOfTagByCon(int appKey, String parentClassId, String propertyName, String propertyValue, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_getFansNumDistOfTagByCon(appKey, parentClassId, propertyName, propertyValue, startTime, endTime);
      return recv_getFansNumDistOfTagByCon();
    }

    public void send_getFansNumDistOfTagByCon(int appKey, String parentClassId, String propertyName, String propertyValue, long startTime, long endTime) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfTagByCon", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansNumDistOfTagByCon_args args = new getFansNumDistOfTagByCon_args();
      args.setAppKey(appKey);
      args.setParentClassId(parentClassId);
      args.setPropertyName(propertyName);
      args.setPropertyValue(propertyValue);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansNumDistOfTagByCon() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansNumDistOfTagByCon failed: out of sequence response");
      }
      getFansNumDistOfTagByCon_result result = new getFansNumDistOfTagByCon_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansNumDistOfTagByCon failed: unknown result");
    }

    public String getFansListByFanPropertyAndTagCondi(int appKey, int tagId, String classId, int page, int pageSize, String propertyName, String propertyValue, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_getFansListByFanPropertyAndTagCondi(appKey, tagId, classId, page, pageSize, propertyName, propertyValue, sortFlag, sortPropertyName, sortType);
      return recv_getFansListByFanPropertyAndTagCondi();
    }

    public void send_getFansListByFanPropertyAndTagCondi(int appKey, int tagId, String classId, int page, int pageSize, String propertyName, String propertyValue, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertyAndTagCondi", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansListByFanPropertyAndTagCondi_args args = new getFansListByFanPropertyAndTagCondi_args();
      args.setAppKey(appKey);
      args.setTagId(tagId);
      args.setClassId(classId);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setPropertyName(propertyName);
      args.setPropertyValue(propertyValue);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansListByFanPropertyAndTagCondi() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansListByFanPropertyAndTagCondi failed: out of sequence response");
      }
      getFansListByFanPropertyAndTagCondi_result result = new getFansListByFanPropertyAndTagCondi_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansListByFanPropertyAndTagCondi failed: unknown result");
    }

    public String getFansListByFanPropertiesAndTagId(int appKey, int tagId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_getFansListByFanPropertiesAndTagId(appKey, tagId, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType);
      return recv_getFansListByFanPropertiesAndTagId();
    }

    public void send_getFansListByFanPropertiesAndTagId(int appKey, int tagId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagId", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansListByFanPropertiesAndTagId_args args = new getFansListByFanPropertiesAndTagId_args();
      args.setAppKey(appKey);
      args.setTagId(tagId);
      args.setPropertyCondition(propertyCondition);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansListByFanPropertiesAndTagId() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansListByFanPropertiesAndTagId failed: out of sequence response");
      }
      getFansListByFanPropertiesAndTagId_result result = new getFansListByFanPropertiesAndTagId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansListByFanPropertiesAndTagId failed: unknown result");
    }

    public String getFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_getFansListByFanPropertiesAndAppId(appKey, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType);
      return recv_getFansListByFanPropertiesAndAppId();
    }

    public void send_getFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansListByFanPropertiesAndAppId_args args = new getFansListByFanPropertiesAndAppId_args();
      args.setAppKey(appKey);
      args.setPropertyCondition(propertyCondition);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansListByFanPropertiesAndAppId() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansListByFanPropertiesAndAppId failed: out of sequence response");
      }
      getFansListByFanPropertiesAndAppId_result result = new getFansListByFanPropertiesAndAppId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansListByFanPropertiesAndAppId failed: unknown result");
    }

    public String getFansNumDistOfNatureProperty(String propertyCondition, int appKey, String groupFieldName) throws org.apache.thrift.TException
    {
      send_getFansNumDistOfNatureProperty(propertyCondition, appKey, groupFieldName);
      return recv_getFansNumDistOfNatureProperty();
    }

    public void send_getFansNumDistOfNatureProperty(String propertyCondition, int appKey, String groupFieldName) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfNatureProperty", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansNumDistOfNatureProperty_args args = new getFansNumDistOfNatureProperty_args();
      args.setPropertyCondition(propertyCondition);
      args.setAppKey(appKey);
      args.setGroupFieldName(groupFieldName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansNumDistOfNatureProperty() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansNumDistOfNatureProperty failed: out of sequence response");
      }
      getFansNumDistOfNatureProperty_result result = new getFansNumDistOfNatureProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansNumDistOfNatureProperty failed: unknown result");
    }

    public String getFansListByFanPropertiesAndClassId(int appKey, String classId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_getFansListByFanPropertiesAndClassId(appKey, classId, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType);
      return recv_getFansListByFanPropertiesAndClassId();
    }

    public void send_getFansListByFanPropertiesAndClassId(int appKey, String classId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndClassId", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansListByFanPropertiesAndClassId_args args = new getFansListByFanPropertiesAndClassId_args();
      args.setAppKey(appKey);
      args.setClassId(classId);
      args.setPropertyCondition(propertyCondition);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansListByFanPropertiesAndClassId() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansListByFanPropertiesAndClassId failed: out of sequence response");
      }
      getFansListByFanPropertiesAndClassId_result result = new getFansListByFanPropertiesAndClassId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansListByFanPropertiesAndClassId failed: unknown result");
    }

    public String getFansNumOfGroupFieldByPropertyCon(int appKey, String propertyName, String propertyValue, long startTime, long endTime, String statisPropertyName) throws org.apache.thrift.TException
    {
      send_getFansNumOfGroupFieldByPropertyCon(appKey, propertyName, propertyValue, startTime, endTime, statisPropertyName);
      return recv_getFansNumOfGroupFieldByPropertyCon();
    }

    public void send_getFansNumOfGroupFieldByPropertyCon(int appKey, String propertyName, String propertyValue, long startTime, long endTime, String statisPropertyName) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumOfGroupFieldByPropertyCon", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansNumOfGroupFieldByPropertyCon_args args = new getFansNumOfGroupFieldByPropertyCon_args();
      args.setAppKey(appKey);
      args.setPropertyName(propertyName);
      args.setPropertyValue(propertyValue);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setStatisPropertyName(statisPropertyName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansNumOfGroupFieldByPropertyCon() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansNumOfGroupFieldByPropertyCon failed: out of sequence response");
      }
      getFansNumOfGroupFieldByPropertyCon_result result = new getFansNumOfGroupFieldByPropertyCon_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansNumOfGroupFieldByPropertyCon failed: unknown result");
    }

    public String getLatestTimeOfFansPropertyTagCount(int appKey) throws org.apache.thrift.TException
    {
      send_getLatestTimeOfFansPropertyTagCount(appKey);
      return recv_getLatestTimeOfFansPropertyTagCount();
    }

    public void send_getLatestTimeOfFansPropertyTagCount(int appKey) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestTimeOfFansPropertyTagCount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getLatestTimeOfFansPropertyTagCount_args args = new getLatestTimeOfFansPropertyTagCount_args();
      args.setAppKey(appKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getLatestTimeOfFansPropertyTagCount() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getLatestTimeOfFansPropertyTagCount failed: out of sequence response");
      }
      getLatestTimeOfFansPropertyTagCount_result result = new getLatestTimeOfFansPropertyTagCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestTimeOfFansPropertyTagCount failed: unknown result");
    }

    public String getFansListByFanPropertiesAndTagIds(int appKey, String tagIds, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_getFansListByFanPropertiesAndTagIds(appKey, tagIds, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType);
      return recv_getFansListByFanPropertiesAndTagIds();
    }

    public void send_getFansListByFanPropertiesAndTagIds(int appKey, String tagIds, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansListByFanPropertiesAndTagIds_args args = new getFansListByFanPropertiesAndTagIds_args();
      args.setAppKey(appKey);
      args.setTagIds(tagIds);
      args.setPropertyCondition(propertyCondition);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansListByFanPropertiesAndTagIds() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansListByFanPropertiesAndTagIds failed: out of sequence response");
      }
      getFansListByFanPropertiesAndTagIds_result result = new getFansListByFanPropertiesAndTagIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansListByFanPropertiesAndTagIds failed: unknown result");
    }

    public String fetchFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int offset, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_fetchFansListByFanPropertiesAndAppId(appKey, propertyCondition, offset, pageSize, sortFlag, sortPropertyName, sortType);
      return recv_fetchFansListByFanPropertiesAndAppId();
    }

    public void send_fetchFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int offset, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      fetchFansListByFanPropertiesAndAppId_args args = new fetchFansListByFanPropertiesAndAppId_args();
      args.setAppKey(appKey);
      args.setPropertyCondition(propertyCondition);
      args.setOffset(offset);
      args.setPageSize(pageSize);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_fetchFansListByFanPropertiesAndAppId() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "fetchFansListByFanPropertiesAndAppId failed: out of sequence response");
      }
      fetchFansListByFanPropertiesAndAppId_result result = new fetchFansListByFanPropertiesAndAppId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchFansListByFanPropertiesAndAppId failed: unknown result");
    }

    public String getFansInfoByOpenIds(String openIds) throws org.apache.thrift.TException
    {
      send_getFansInfoByOpenIds(openIds);
      return recv_getFansInfoByOpenIds();
    }

    public void send_getFansInfoByOpenIds(String openIds) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansInfoByOpenIds", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFansInfoByOpenIds_args args = new getFansInfoByOpenIds_args();
      args.setOpenIds(openIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getFansInfoByOpenIds() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFansInfoByOpenIds failed: out of sequence response");
      }
      getFansInfoByOpenIds_result result = new getFansInfoByOpenIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFansInfoByOpenIds failed: unknown result");
    }

    public String getListByRecursivePropertiesAndTagIds(String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_getListByRecursivePropertiesAndTagIds(propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType);
      return recv_getListByRecursivePropertiesAndTagIds();
    }

    public void send_getListByRecursivePropertiesAndTagIds(String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByRecursivePropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getListByRecursivePropertiesAndTagIds_args args = new getListByRecursivePropertiesAndTagIds_args();
      args.setPropertyCondition(propertyCondition);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getListByRecursivePropertiesAndTagIds() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getListByRecursivePropertiesAndTagIds failed: out of sequence response");
      }
      getListByRecursivePropertiesAndTagIds_result result = new getListByRecursivePropertiesAndTagIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListByRecursivePropertiesAndTagIds failed: unknown result");
    }

    public String getListByCollectionQuery(String propertyCondition, String tagCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      send_getListByCollectionQuery(propertyCondition, tagCondition, page, pageSize, sortFlag, sortPropertyName, sortType);
      return recv_getListByCollectionQuery();
    }

    public void send_getListByCollectionQuery(String propertyCondition, String tagCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByCollectionQuery", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getListByCollectionQuery_args args = new getListByCollectionQuery_args();
      args.setPropertyCondition(propertyCondition);
      args.setTagCondition(tagCondition);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setSortFlag(sortFlag);
      args.setSortPropertyName(sortPropertyName);
      args.setSortType(sortType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getListByCollectionQuery() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getListByCollectionQuery failed: out of sequence response");
      }
      getListByCollectionQuery_result result = new getListByCollectionQuery_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListByCollectionQuery failed: unknown result");
    }

    public String groupByByCollectionQuery(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int sampleCount) throws org.apache.thrift.TException
    {
      send_groupByByCollectionQuery(propertyCondition, tagCondition, groupFieldName, boundaryStr, sampleCount);
      return recv_groupByByCollectionQuery();
    }

    public void send_groupByByCollectionQuery(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int sampleCount) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByByCollectionQuery", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      groupByByCollectionQuery_args args = new groupByByCollectionQuery_args();
      args.setPropertyCondition(propertyCondition);
      args.setTagCondition(tagCondition);
      args.setGroupFieldName(groupFieldName);
      args.setBoundaryStr(boundaryStr);
      args.setSampleCount(sampleCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_groupByByCollectionQuery() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "groupByByCollectionQuery failed: out of sequence response");
      }
      groupByByCollectionQuery_result result = new groupByByCollectionQuery_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "groupByByCollectionQuery failed: unknown result");
    }

    public String groupSpecialTagIdByRecursiveFilter(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int groupTagId) throws org.apache.thrift.TException
    {
      send_groupSpecialTagIdByRecursiveFilter(propertyCondition, tagCondition, groupFieldName, boundaryStr, groupTagId);
      return recv_groupSpecialTagIdByRecursiveFilter();
    }

    public void send_groupSpecialTagIdByRecursiveFilter(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int groupTagId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupSpecialTagIdByRecursiveFilter", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      groupSpecialTagIdByRecursiveFilter_args args = new groupSpecialTagIdByRecursiveFilter_args();
      args.setPropertyCondition(propertyCondition);
      args.setTagCondition(tagCondition);
      args.setGroupFieldName(groupFieldName);
      args.setBoundaryStr(boundaryStr);
      args.setGroupTagId(groupTagId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_groupSpecialTagIdByRecursiveFilter() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "groupSpecialTagIdByRecursiveFilter failed: out of sequence response");
      }
      groupSpecialTagIdByRecursiveFilter_result result = new groupSpecialTagIdByRecursiveFilter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "groupSpecialTagIdByRecursiveFilter failed: unknown result");
    }

    public String groupTagsByRecursiveFilter(String propertyCondition, String tagCondition) throws org.apache.thrift.TException
    {
      send_groupTagsByRecursiveFilter(propertyCondition, tagCondition);
      return recv_groupTagsByRecursiveFilter();
    }

    public void send_groupTagsByRecursiveFilter(String propertyCondition, String tagCondition) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupTagsByRecursiveFilter", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      groupTagsByRecursiveFilter_args args = new groupTagsByRecursiveFilter_args();
      args.setPropertyCondition(propertyCondition);
      args.setTagCondition(tagCondition);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_groupTagsByRecursiveFilter() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "groupTagsByRecursiveFilter failed: out of sequence response");
      }
      groupTagsByRecursiveFilter_result result = new groupTagsByRecursiveFilter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "groupTagsByRecursiveFilter failed: unknown result");
    }

    public long addTagClass(long appkey, String className, String classDescription, long pid) throws org.apache.thrift.TException
    {
      send_addTagClass(appkey, className, classDescription, pid);
      return recv_addTagClass();
    }

    public void send_addTagClass(long appkey, String className, String classDescription, long pid) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagClass", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addTagClass_args args = new addTagClass_args();
      args.setAppkey(appkey);
      args.setClassName(className);
      args.setClassDescription(classDescription);
      args.setPid(pid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addTagClass() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addTagClass failed: out of sequence response");
      }
      addTagClass_result result = new addTagClass_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTagClass failed: unknown result");
    }

    public String searchTagClass(long appkey, String className, String classIds, long pid, boolean child, int page, int size) throws org.apache.thrift.TException
    {
      send_searchTagClass(appkey, className, classIds, pid, child, page, size);
      return recv_searchTagClass();
    }

    public void send_searchTagClass(long appkey, String className, String classIds, long pid, boolean child, int page, int size) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagClass", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchTagClass_args args = new searchTagClass_args();
      args.setAppkey(appkey);
      args.setClassName(className);
      args.setClassIds(classIds);
      args.setPid(pid);
      args.setChild(child);
      args.setPage(page);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchTagClass() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchTagClass failed: out of sequence response");
      }
      searchTagClass_result result = new searchTagClass_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchTagClass failed: unknown result");
    }

    public long addTagByClass(String jsonParam) throws org.apache.thrift.TException
    {
      send_addTagByClass(jsonParam);
      return recv_addTagByClass();
    }

    public void send_addTagByClass(String jsonParam) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagByClass", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addTagByClass_args args = new addTagByClass_args();
      args.setJsonParam(jsonParam);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addTagByClass() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addTagByClass failed: out of sequence response");
      }
      addTagByClass_result result = new addTagByClass_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTagByClass failed: unknown result");
    }

    public String searchTagsByClass(long appkey, String tagName, String tagIds, String classIds, double defWeight, int calcType, int generalTagType, String generalPropName, int page, int size) throws org.apache.thrift.TException
    {
      send_searchTagsByClass(appkey, tagName, tagIds, classIds, defWeight, calcType, generalTagType, generalPropName, page, size);
      return recv_searchTagsByClass();
    }

    public void send_searchTagsByClass(long appkey, String tagName, String tagIds, String classIds, double defWeight, int calcType, int generalTagType, String generalPropName, int page, int size) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagsByClass", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchTagsByClass_args args = new searchTagsByClass_args();
      args.setAppkey(appkey);
      args.setTagName(tagName);
      args.setTagIds(tagIds);
      args.setClassIds(classIds);
      args.setDefWeight(defWeight);
      args.setCalcType(calcType);
      args.setGeneralTagType(generalTagType);
      args.setGeneralPropName(generalPropName);
      args.setPage(page);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchTagsByClass() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchTagsByClass failed: out of sequence response");
      }
      searchTagsByClass_result result = new searchTagsByClass_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchTagsByClass failed: unknown result");
    }

    public int deleteLeafTagClass(long classId) throws org.apache.thrift.TException
    {
      send_deleteLeafTagClass(classId);
      return recv_deleteLeafTagClass();
    }

    public void send_deleteLeafTagClass(long classId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLeafTagClass", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteLeafTagClass_args args = new deleteLeafTagClass_args();
      args.setClassId(classId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteLeafTagClass() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteLeafTagClass failed: out of sequence response");
      }
      deleteLeafTagClass_result result = new deleteLeafTagClass_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLeafTagClass failed: unknown result");
    }

    public int modifyTagByClass(String jsonParam) throws org.apache.thrift.TException
    {
      send_modifyTagByClass(jsonParam);
      return recv_modifyTagByClass();
    }

    public void send_modifyTagByClass(String jsonParam) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTagByClass", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      modifyTagByClass_args args = new modifyTagByClass_args();
      args.setJsonParam(jsonParam);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_modifyTagByClass() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "modifyTagByClass failed: out of sequence response");
      }
      modifyTagByClass_result result = new modifyTagByClass_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyTagByClass failed: unknown result");
    }

    public String searchAllTagClass(long appkey, int size) throws org.apache.thrift.TException
    {
      send_searchAllTagClass(appkey, size);
      return recv_searchAllTagClass();
    }

    public void send_searchAllTagClass(long appkey, int size) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAllTagClass", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchAllTagClass_args args = new searchAllTagClass_args();
      args.setAppkey(appkey);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchAllTagClass() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchAllTagClass failed: out of sequence response");
      }
      searchAllTagClass_result result = new searchAllTagClass_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchAllTagClass failed: unknown result");
    }

    public String fuzzySearchTags(long appkey, String tagName, int page, int size) throws org.apache.thrift.TException
    {
      send_fuzzySearchTags(appkey, tagName, page, size);
      return recv_fuzzySearchTags();
    }

    public void send_fuzzySearchTags(long appkey, String tagName, int page, int size) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fuzzySearchTags", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      fuzzySearchTags_args args = new fuzzySearchTags_args();
      args.setAppkey(appkey);
      args.setTagName(tagName);
      args.setPage(page);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_fuzzySearchTags() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "fuzzySearchTags failed: out of sequence response");
      }
      fuzzySearchTags_result result = new fuzzySearchTags_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fuzzySearchTags failed: unknown result");
    }

    public long addExp(long tagWeightId, int expKey, String expVal, String expOp) throws org.apache.thrift.TException
    {
      send_addExp(tagWeightId, expKey, expVal, expOp);
      return recv_addExp();
    }

    public void send_addExp(long tagWeightId, int expKey, String expVal, String expOp) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addExp_args args = new addExp_args();
      args.setTagWeightId(tagWeightId);
      args.setExpKey(expKey);
      args.setExpVal(expVal);
      args.setExpOp(expOp);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addExp() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addExp failed: out of sequence response");
      }
      addExp_result result = new addExp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addExp failed: unknown result");
    }

    public int deleteExp(long expId) throws org.apache.thrift.TException
    {
      send_deleteExp(expId);
      return recv_deleteExp();
    }

    public void send_deleteExp(long expId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteExp_args args = new deleteExp_args();
      args.setExpId(expId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteExp() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteExp failed: out of sequence response");
      }
      deleteExp_result result = new deleteExp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteExp failed: unknown result");
    }

    public int modifyExp(String jsonParam) throws org.apache.thrift.TException
    {
      send_modifyExp(jsonParam);
      return recv_modifyExp();
    }

    public void send_modifyExp(String jsonParam) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      modifyExp_args args = new modifyExp_args();
      args.setJsonParam(jsonParam);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_modifyExp() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "modifyExp failed: out of sequence response");
      }
      modifyExp_result result = new modifyExp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyExp failed: unknown result");
    }

    public String searchExps(long expId, long tagWeightId, int page, int size) throws org.apache.thrift.TException
    {
      send_searchExps(expId, tagWeightId, page, size);
      return recv_searchExps();
    }

    public void send_searchExps(long expId, long tagWeightId, int page, int size) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchExps_args args = new searchExps_args();
      args.setExpId(expId);
      args.setTagWeightId(tagWeightId);
      args.setPage(page);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchExps() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchExps failed: out of sequence response");
      }
      searchExps_result result = new searchExps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchExps failed: unknown result");
    }

    public String searchAlgos(int calcType) throws org.apache.thrift.TException
    {
      send_searchAlgos(calcType);
      return recv_searchAlgos();
    }

    public void send_searchAlgos(int calcType) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAlgos", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchAlgos_args args = new searchAlgos_args();
      args.setCalcType(calcType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchAlgos() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchAlgos failed: out of sequence response");
      }
      searchAlgos_result result = new searchAlgos_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchAlgos failed: unknown result");
    }

    public long addAppidConfig(String jsonParam) throws org.apache.thrift.TException
    {
      send_addAppidConfig(jsonParam);
      return recv_addAppidConfig();
    }

    public void send_addAppidConfig(String jsonParam) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addAppidConfig_args args = new addAppidConfig_args();
      args.setJsonParam(jsonParam);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addAppidConfig() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addAppidConfig failed: out of sequence response");
      }
      addAppidConfig_result result = new addAppidConfig_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAppidConfig failed: unknown result");
    }

    public int updateAppidConfig(String jsonParam) throws org.apache.thrift.TException
    {
      send_updateAppidConfig(jsonParam);
      return recv_updateAppidConfig();
    }

    public void send_updateAppidConfig(String jsonParam) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      updateAppidConfig_args args = new updateAppidConfig_args();
      args.setJsonParam(jsonParam);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateAppidConfig() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "updateAppidConfig failed: out of sequence response");
      }
      updateAppidConfig_result result = new updateAppidConfig_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAppidConfig failed: unknown result");
    }

    public int deleteAppidConfig(long appkey) throws org.apache.thrift.TException
    {
      send_deleteAppidConfig(appkey);
      return recv_deleteAppidConfig();
    }

    public void send_deleteAppidConfig(long appkey) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteAppidConfig_args args = new deleteAppidConfig_args();
      args.setAppkey(appkey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteAppidConfig() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteAppidConfig failed: out of sequence response");
      }
      deleteAppidConfig_result result = new deleteAppidConfig_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAppidConfig failed: unknown result");
    }

    public String searchAppidConfig(long appkey) throws org.apache.thrift.TException
    {
      send_searchAppidConfig(appkey);
      return recv_searchAppidConfig();
    }

    public void send_searchAppidConfig(long appkey) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchAppidConfig_args args = new searchAppidConfig_args();
      args.setAppkey(appkey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchAppidConfig() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchAppidConfig failed: out of sequence response");
      }
      searchAppidConfig_result result = new searchAppidConfig_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchAppidConfig failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void searchTagRes(long appkey, String uid, String tagIds, boolean spread, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<searchTagRes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchTagRes_call method_call = new searchTagRes_call(appkey, uid, tagIds, spread, startTime, endTime, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchTagRes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private String uid;
      private String tagIds;
      private boolean spread;
      private long startTime;
      private long endTime;
      public searchTagRes_call(long appkey, String uid, String tagIds, boolean spread, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<searchTagRes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.uid = uid;
        this.tagIds = tagIds;
        this.spread = spread;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagRes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchTagRes_args args = new searchTagRes_args();
        args.setAppkey(appkey);
        args.setUid(uid);
        args.setTagIds(tagIds);
        args.setSpread(spread);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchTagRes();
      }
    }

    public void searchForecastTagRes(int appkey, String uid, String tagIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<searchForecastTagRes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchForecastTagRes_call method_call = new searchForecastTagRes_call(appkey, uid, tagIds, startTime, endTime, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchForecastTagRes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appkey;
      private String uid;
      private String tagIds;
      private long startTime;
      private long endTime;
      public searchForecastTagRes_call(int appkey, String uid, String tagIds, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<searchForecastTagRes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.uid = uid;
        this.tagIds = tagIds;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchForecastTagRes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchForecastTagRes_args args = new searchForecastTagRes_args();
        args.setAppkey(appkey);
        args.setUid(uid);
        args.setTagIds(tagIds);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchForecastTagRes();
      }
    }

    public void addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<addTag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTag_call method_call = new addTag_call(appkey, tagname, tagDescri, tagclass, tagSubclass, defWeight, calcType, days, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addTag_call extends org.apache.thrift.async.TAsyncMethodCall {
        private long appkey;
        private String tagname;
        private String tagDescri;
        private String tagclass;
        private String tagSubclass;
        private double defWeight;
        private int calcType;
        private int days;
        public addTag_call(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<addTag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
          super(client, protocolFactory, transport, resultHandler, false);
          this.appkey = appkey;
          this.tagname = tagname;
          this.tagDescri = tagDescri;
          this.tagclass = tagclass;
          this.tagSubclass = tagSubclass;
          this.defWeight = defWeight;
          this.calcType = calcType;
          this.days = days;
        }

        public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
          prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
          addTag_args args = new addTag_args();
          args.setAppkey(appkey);
          args.setTagname(tagname);
          args.setTagDescri(tagDescri);
          args.setTagclass(tagclass);
          args.setTagSubclass(tagSubclass);
          args.setDefWeight(defWeight);
          args.setCalcType(calcType);
          args.setDays(days);
          args.write(prot);
          prot.writeMessageEnd();
        }

        public long getResult() throws org.apache.thrift.TException {
          if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
            throw new IllegalStateException("Method call not finished!");
          }
          org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
          org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
          return (new Client(prot)).recv_addTag();
        }
      }

    public void modifyTag(long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType,int days, org.apache.thrift.async.AsyncMethodCallback<modifyTag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyTag_call method_call = new modifyTag_call(appkey, tagname, tagclass, tagSubclass, defWeight, calcType, days,resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyTag_call extends org.apache.thrift.async.TAsyncMethodCall {
        private long appkey;
        private String tagname;
        private String tagclass;
        private String tagSubclass;
        private double defWeight;
        private int calcType;
        private int days;
        public modifyTag_call(long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<modifyTag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
          super(client, protocolFactory, transport, resultHandler, false);
          this.appkey = appkey;
          this.tagname = tagname;
          this.tagclass = tagclass;
          this.tagSubclass = tagSubclass;
          this.defWeight = defWeight;
          this.calcType = calcType;
          this.days = days;
        }

        public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
          prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
          modifyTag_args args = new modifyTag_args();
          args.setAppkey(appkey);
          args.setTagname(tagname);
          args.setTagclass(tagclass);
          args.setTagSubclass(tagSubclass);
          args.setDefWeight(defWeight);
          args.setCalcType(calcType);
          args.setDays(days);
          args.write(prot);
          prot.writeMessageEnd();
        }

        public int getResult() throws org.apache.thrift.TException {
          if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
            throw new IllegalStateException("Method call not finished!");
          }
          org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
          org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
          return (new Client(prot)).recv_modifyTag();
        }
      }

    public void deleteTag(long tagId, org.apache.thrift.async.AsyncMethodCallback<deleteTag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTag_call method_call = new deleteTag_call(tagId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long tagId;
      public deleteTag_call(long tagId, org.apache.thrift.async.AsyncMethodCallback<deleteTag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagId = tagId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTag_args args = new deleteTag_args();
        args.setTagId(tagId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteTag();
      }
    }

    public void searchTags(long tagId, long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<searchTags_call> resultHandler) throws org.apache.thrift.TException {
        checkReady();
        searchTags_call method_call = new searchTags_call(tagId, appkey, tagname, tagclass, tagSubclass, defWeight, calcType, days, resultHandler, this, protocolFactory, transport);
        this.currentMethod = method_call;
        manager.call(method_call);
      }

      public static class searchTags_call extends org.apache.thrift.async.TAsyncMethodCall {
        private long tagId;
        private long appkey;
        private String tagname;
        private String tagclass;
        private String tagSubclass;
        private double defWeight;
        private int calcType;
        private int days;
        public searchTags_call(long tagId, long appkey, String tagname, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<searchTags_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
          super(client, protocolFactory, transport, resultHandler, false);
          this.tagId = tagId;
          this.appkey = appkey;
          this.tagname = tagname;
          this.tagclass = tagclass;
          this.tagSubclass = tagSubclass;
          this.defWeight = defWeight;
          this.calcType = calcType;
          this.days = days;
        }

        public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
          prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
          searchTags_args args = new searchTags_args();
          args.setTagId(tagId);
          args.setAppkey(appkey);
          args.setTagname(tagname);
          args.setTagclass(tagclass);
          args.setTagSubclass(tagSubclass);
          args.setDefWeight(defWeight);
          args.setCalcType(calcType);
          args.setDays(days);
          args.write(prot);
          prot.writeMessageEnd();
        }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchTags();
      }
    }

    public void addGroup(long appkey, String groupName, org.apache.thrift.async.AsyncMethodCallback<addGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGroup_call method_call = new addGroup_call(appkey, groupName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private String groupName;
      public addGroup_call(long appkey, String groupName, org.apache.thrift.async.AsyncMethodCallback<addGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.groupName = groupName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGroup_args args = new addGroup_args();
        args.setAppkey(appkey);
        args.setGroupName(groupName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addGroup();
      }
    }

    public void modifyGroup(long groupId, String groupName, org.apache.thrift.async.AsyncMethodCallback<modifyGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyGroup_call method_call = new modifyGroup_call(groupId, groupName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      private String groupName;
      public modifyGroup_call(long groupId, String groupName, org.apache.thrift.async.AsyncMethodCallback<modifyGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.groupName = groupName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyGroup_args args = new modifyGroup_args();
        args.setGroupId(groupId);
        args.setGroupName(groupName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyGroup();
      }
    }

    public void deleteGroup(long groupId, org.apache.thrift.async.AsyncMethodCallback<deleteGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteGroup_call method_call = new deleteGroup_call(groupId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      public deleteGroup_call(long groupId, org.apache.thrift.async.AsyncMethodCallback<deleteGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteGroup_args args = new deleteGroup_args();
        args.setGroupId(groupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteGroup();
      }
    }

    public void searchGroups(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<searchGroups_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchGroups_call method_call = new searchGroups_call(jsonParam, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonParam;
      public searchGroups_call(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<searchGroups_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonParam = jsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchGroups_args args = new searchGroups_args();
        args.setJsonParam(jsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchGroups();
      }
    }

    public void addWgtConfig(long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule, org.apache.thrift.async.AsyncMethodCallback<addWgtConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addWgtConfig_call method_call = new addWgtConfig_call(tagId, groupId, itemid, actionid, itemtype, weight, rule, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addWgtConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long tagId;
      private long groupId;
      private String itemid;
      private String actionid;
      private String itemtype;
      private double weight;
      private String rule;
      public addWgtConfig_call(long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule, org.apache.thrift.async.AsyncMethodCallback<addWgtConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagId = tagId;
        this.groupId = groupId;
        this.itemid = itemid;
        this.actionid = actionid;
        this.itemtype = itemtype;
        this.weight = weight;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addWgtConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addWgtConfig_args args = new addWgtConfig_args();
        args.setTagId(tagId);
        args.setGroupId(groupId);
        args.setItemid(itemid);
        args.setActionid(actionid);
        args.setItemtype(itemtype);
        args.setWeight(weight);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addWgtConfig();
      }
    }

    public void modifyWgtConfig(long configId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule, org.apache.thrift.async.AsyncMethodCallback<modifyWgtConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyWgtConfig_call method_call = new modifyWgtConfig_call(configId, groupId, itemid, actionid, itemtype, weight, rule, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyWgtConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long configId;
      private long groupId;
      private String itemid;
      private String actionid;
      private String itemtype;
      private double weight;
      private String rule;
      public modifyWgtConfig_call(long configId, long groupId, String itemid, String actionid, String itemtype, double weight, String rule, org.apache.thrift.async.AsyncMethodCallback<modifyWgtConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configId = configId;
        this.groupId = groupId;
        this.itemid = itemid;
        this.actionid = actionid;
        this.itemtype = itemtype;
        this.weight = weight;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyWgtConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyWgtConfig_args args = new modifyWgtConfig_args();
        args.setConfigId(configId);
        args.setGroupId(groupId);
        args.setItemid(itemid);
        args.setActionid(actionid);
        args.setItemtype(itemtype);
        args.setWeight(weight);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyWgtConfig();
      }
    }

    public void deleteWgtConfig(long configId, org.apache.thrift.async.AsyncMethodCallback<deleteWgtConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteWgtConfig_call method_call = new deleteWgtConfig_call(configId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteWgtConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long configId;
      public deleteWgtConfig_call(long configId, org.apache.thrift.async.AsyncMethodCallback<deleteWgtConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configId = configId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteWgtConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteWgtConfig_args args = new deleteWgtConfig_args();
        args.setConfigId(configId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteWgtConfig();
      }
    }

    public void searchWgtConfigs(long configId, long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchWgtConfigs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchWgtConfigs_call method_call = new searchWgtConfigs_call(configId, tagId, groupId, itemid, actionid, itemtype, weight, page, size, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchWgtConfigs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long configId;
      private long tagId;
      private long groupId;
      private String itemid;
      private String actionid;
      private String itemtype;
      private double weight;
      private int page;
      private int size;
      public searchWgtConfigs_call(long configId, long tagId, long groupId, String itemid, String actionid, String itemtype, double weight, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchWgtConfigs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configId = configId;
        this.tagId = tagId;
        this.groupId = groupId;
        this.itemid = itemid;
        this.actionid = actionid;
        this.itemtype = itemtype;
        this.weight = weight;
        this.page = page;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchWgtConfigs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchWgtConfigs_args args = new searchWgtConfigs_args();
        args.setConfigId(configId);
        args.setTagId(tagId);
        args.setGroupId(groupId);
        args.setItemid(itemid);
        args.setActionid(actionid);
        args.setItemtype(itemtype);
        args.setWeight(weight);
        args.setPage(page);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchWgtConfigs();
      }
    }

    public void getFansTagInfo(int appkey, String uids, org.apache.thrift.async.AsyncMethodCallback<getFansTagInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansTagInfo_call method_call = new getFansTagInfo_call(appkey, uids, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansTagInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appkey;
      private String uids;
      public getFansTagInfo_call(int appkey, String uids, org.apache.thrift.async.AsyncMethodCallback<getFansTagInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.uids = uids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansTagInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansTagInfo_args args = new getFansTagInfo_args();
        args.setAppkey(appkey);
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansTagInfo();
      }
    }

    public void getActivityKOL(int appkey, String uids, org.apache.thrift.async.AsyncMethodCallback<getActivityKOL_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActivityKOL_call method_call = new getActivityKOL_call(appkey, uids, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getActivityKOL_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appkey;
      private String uids;
      public getActivityKOL_call(int appkey, String uids, org.apache.thrift.async.AsyncMethodCallback<getActivityKOL_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.uids = uids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActivityKOL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActivityKOL_args args = new getActivityKOL_args();
        args.setAppkey(appkey);
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActivityKOL();
      }
    }

    public void getFansNumDistOfProperty(int appKey, String propertyName, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFansNumDistOfProperty_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansNumDistOfProperty_call method_call = new getFansNumDistOfProperty_call(appKey, propertyName, startTime, endTime, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansNumDistOfProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private String propertyName;
      private long startTime;
      private long endTime;
      public getFansNumDistOfProperty_call(int appKey, String propertyName, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFansNumDistOfProperty_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.propertyName = propertyName;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansNumDistOfProperty_args args = new getFansNumDistOfProperty_args();
        args.setAppKey(appKey);
        args.setPropertyName(propertyName);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansNumDistOfProperty();
      }
    }

    public void getFansNumDistOfTagByCon(int appKey, String parentClassId, String propertyName, String propertyValue, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFansNumDistOfTagByCon_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansNumDistOfTagByCon_call method_call = new getFansNumDistOfTagByCon_call(appKey, parentClassId, propertyName, propertyValue, startTime, endTime, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansNumDistOfTagByCon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private String parentClassId;
      private String propertyName;
      private String propertyValue;
      private long startTime;
      private long endTime;
      public getFansNumDistOfTagByCon_call(int appKey, String parentClassId, String propertyName, String propertyValue, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<getFansNumDistOfTagByCon_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.parentClassId = parentClassId;
        this.propertyName = propertyName;
        this.propertyValue = propertyValue;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfTagByCon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansNumDistOfTagByCon_args args = new getFansNumDistOfTagByCon_args();
        args.setAppKey(appKey);
        args.setParentClassId(parentClassId);
        args.setPropertyName(propertyName);
        args.setPropertyValue(propertyValue);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansNumDistOfTagByCon();
      }
    }

    public void getFansListByFanPropertyAndTagCondi(int appKey, int tagId, String classId, int page, int pageSize, String propertyName, String propertyValue, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertyAndTagCondi_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansListByFanPropertyAndTagCondi_call method_call = new getFansListByFanPropertyAndTagCondi_call(appKey, tagId, classId, page, pageSize, propertyName, propertyValue, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansListByFanPropertyAndTagCondi_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private int tagId;
      private String classId;
      private int page;
      private int pageSize;
      private String propertyName;
      private String propertyValue;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public getFansListByFanPropertyAndTagCondi_call(int appKey, int tagId, String classId, int page, int pageSize, String propertyName, String propertyValue, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertyAndTagCondi_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.tagId = tagId;
        this.classId = classId;
        this.page = page;
        this.pageSize = pageSize;
        this.propertyName = propertyName;
        this.propertyValue = propertyValue;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertyAndTagCondi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansListByFanPropertyAndTagCondi_args args = new getFansListByFanPropertyAndTagCondi_args();
        args.setAppKey(appKey);
        args.setTagId(tagId);
        args.setClassId(classId);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setPropertyName(propertyName);
        args.setPropertyValue(propertyValue);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansListByFanPropertyAndTagCondi();
      }
    }

    public void getFansListByFanPropertiesAndTagId(int appKey, int tagId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndTagId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansListByFanPropertiesAndTagId_call method_call = new getFansListByFanPropertiesAndTagId_call(appKey, tagId, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansListByFanPropertiesAndTagId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private int tagId;
      private String propertyCondition;
      private int page;
      private int pageSize;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public getFansListByFanPropertiesAndTagId_call(int appKey, int tagId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndTagId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.tagId = tagId;
        this.propertyCondition = propertyCondition;
        this.page = page;
        this.pageSize = pageSize;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansListByFanPropertiesAndTagId_args args = new getFansListByFanPropertiesAndTagId_args();
        args.setAppKey(appKey);
        args.setTagId(tagId);
        args.setPropertyCondition(propertyCondition);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansListByFanPropertiesAndTagId();
      }
    }

    public void getFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndAppId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansListByFanPropertiesAndAppId_call method_call = new getFansListByFanPropertiesAndAppId_call(appKey, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansListByFanPropertiesAndAppId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private String propertyCondition;
      private int page;
      private int pageSize;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public getFansListByFanPropertiesAndAppId_call(int appKey, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndAppId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.propertyCondition = propertyCondition;
        this.page = page;
        this.pageSize = pageSize;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansListByFanPropertiesAndAppId_args args = new getFansListByFanPropertiesAndAppId_args();
        args.setAppKey(appKey);
        args.setPropertyCondition(propertyCondition);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansListByFanPropertiesAndAppId();
      }
    }

    public void getFansNumDistOfNatureProperty(String propertyCondition, int appKey, String groupFieldName, org.apache.thrift.async.AsyncMethodCallback<getFansNumDistOfNatureProperty_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansNumDistOfNatureProperty_call method_call = new getFansNumDistOfNatureProperty_call(propertyCondition, appKey, groupFieldName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansNumDistOfNatureProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyCondition;
      private int appKey;
      private String groupFieldName;
      public getFansNumDistOfNatureProperty_call(String propertyCondition, int appKey, String groupFieldName, org.apache.thrift.async.AsyncMethodCallback<getFansNumDistOfNatureProperty_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyCondition = propertyCondition;
        this.appKey = appKey;
        this.groupFieldName = groupFieldName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfNatureProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansNumDistOfNatureProperty_args args = new getFansNumDistOfNatureProperty_args();
        args.setPropertyCondition(propertyCondition);
        args.setAppKey(appKey);
        args.setGroupFieldName(groupFieldName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansNumDistOfNatureProperty();
      }
    }

    public void getFansListByFanPropertiesAndClassId(int appKey, String classId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndClassId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansListByFanPropertiesAndClassId_call method_call = new getFansListByFanPropertiesAndClassId_call(appKey, classId, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansListByFanPropertiesAndClassId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private String classId;
      private String propertyCondition;
      private int page;
      private int pageSize;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public getFansListByFanPropertiesAndClassId_call(int appKey, String classId, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndClassId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.classId = classId;
        this.propertyCondition = propertyCondition;
        this.page = page;
        this.pageSize = pageSize;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndClassId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansListByFanPropertiesAndClassId_args args = new getFansListByFanPropertiesAndClassId_args();
        args.setAppKey(appKey);
        args.setClassId(classId);
        args.setPropertyCondition(propertyCondition);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansListByFanPropertiesAndClassId();
      }
    }

    public void getFansNumOfGroupFieldByPropertyCon(int appKey, String propertyName, String propertyValue, long startTime, long endTime, String statisPropertyName, org.apache.thrift.async.AsyncMethodCallback<getFansNumOfGroupFieldByPropertyCon_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansNumOfGroupFieldByPropertyCon_call method_call = new getFansNumOfGroupFieldByPropertyCon_call(appKey, propertyName, propertyValue, startTime, endTime, statisPropertyName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansNumOfGroupFieldByPropertyCon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private String propertyName;
      private String propertyValue;
      private long startTime;
      private long endTime;
      private String statisPropertyName;
      public getFansNumOfGroupFieldByPropertyCon_call(int appKey, String propertyName, String propertyValue, long startTime, long endTime, String statisPropertyName, org.apache.thrift.async.AsyncMethodCallback<getFansNumOfGroupFieldByPropertyCon_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.propertyName = propertyName;
        this.propertyValue = propertyValue;
        this.startTime = startTime;
        this.endTime = endTime;
        this.statisPropertyName = statisPropertyName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumOfGroupFieldByPropertyCon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansNumOfGroupFieldByPropertyCon_args args = new getFansNumOfGroupFieldByPropertyCon_args();
        args.setAppKey(appKey);
        args.setPropertyName(propertyName);
        args.setPropertyValue(propertyValue);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setStatisPropertyName(statisPropertyName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansNumOfGroupFieldByPropertyCon();
      }
    }

    public void getLatestTimeOfFansPropertyTagCount(int appKey, org.apache.thrift.async.AsyncMethodCallback<getLatestTimeOfFansPropertyTagCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestTimeOfFansPropertyTagCount_call method_call = new getLatestTimeOfFansPropertyTagCount_call(appKey, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getLatestTimeOfFansPropertyTagCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      public getLatestTimeOfFansPropertyTagCount_call(int appKey, org.apache.thrift.async.AsyncMethodCallback<getLatestTimeOfFansPropertyTagCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestTimeOfFansPropertyTagCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestTimeOfFansPropertyTagCount_args args = new getLatestTimeOfFansPropertyTagCount_args();
        args.setAppKey(appKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestTimeOfFansPropertyTagCount();
      }
    }

    public void getFansListByFanPropertiesAndTagIds(int appKey, String tagIds, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndTagIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansListByFanPropertiesAndTagIds_call method_call = new getFansListByFanPropertiesAndTagIds_call(appKey, tagIds, propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansListByFanPropertiesAndTagIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private String tagIds;
      private String propertyCondition;
      private int page;
      private int pageSize;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public getFansListByFanPropertiesAndTagIds_call(int appKey, String tagIds, String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getFansListByFanPropertiesAndTagIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.tagIds = tagIds;
        this.propertyCondition = propertyCondition;
        this.page = page;
        this.pageSize = pageSize;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansListByFanPropertiesAndTagIds_args args = new getFansListByFanPropertiesAndTagIds_args();
        args.setAppKey(appKey);
        args.setTagIds(tagIds);
        args.setPropertyCondition(propertyCondition);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansListByFanPropertiesAndTagIds();
      }
    }

    public void fetchFansListByFanPropertiesAndAppId(int appKey, String propertyCondition, int offset, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<fetchFansListByFanPropertiesAndAppId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchFansListByFanPropertiesAndAppId_call method_call = new fetchFansListByFanPropertiesAndAppId_call(appKey, propertyCondition, offset, pageSize, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class fetchFansListByFanPropertiesAndAppId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appKey;
      private String propertyCondition;
      private int offset;
      private int pageSize;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public fetchFansListByFanPropertiesAndAppId_call(int appKey, String propertyCondition, int offset, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<fetchFansListByFanPropertiesAndAppId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKey = appKey;
        this.propertyCondition = propertyCondition;
        this.offset = offset;
        this.pageSize = pageSize;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchFansListByFanPropertiesAndAppId_args args = new fetchFansListByFanPropertiesAndAppId_args();
        args.setAppKey(appKey);
        args.setPropertyCondition(propertyCondition);
        args.setOffset(offset);
        args.setPageSize(pageSize);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchFansListByFanPropertiesAndAppId();
      }
    }

    public void getFansInfoByOpenIds(String openIds, org.apache.thrift.async.AsyncMethodCallback<getFansInfoByOpenIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFansInfoByOpenIds_call method_call = new getFansInfoByOpenIds_call(openIds, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFansInfoByOpenIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String openIds;
      public getFansInfoByOpenIds_call(String openIds, org.apache.thrift.async.AsyncMethodCallback<getFansInfoByOpenIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.openIds = openIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansInfoByOpenIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFansInfoByOpenIds_args args = new getFansInfoByOpenIds_args();
        args.setOpenIds(openIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFansInfoByOpenIds();
      }
    }

    public void getListByRecursivePropertiesAndTagIds(String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getListByRecursivePropertiesAndTagIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListByRecursivePropertiesAndTagIds_call method_call = new getListByRecursivePropertiesAndTagIds_call(propertyCondition, page, pageSize, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getListByRecursivePropertiesAndTagIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyCondition;
      private int page;
      private int pageSize;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public getListByRecursivePropertiesAndTagIds_call(String propertyCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getListByRecursivePropertiesAndTagIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyCondition = propertyCondition;
        this.page = page;
        this.pageSize = pageSize;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByRecursivePropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListByRecursivePropertiesAndTagIds_args args = new getListByRecursivePropertiesAndTagIds_args();
        args.setPropertyCondition(propertyCondition);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListByRecursivePropertiesAndTagIds();
      }
    }

    public void getListByCollectionQuery(String propertyCondition, String tagCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getListByCollectionQuery_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListByCollectionQuery_call method_call = new getListByCollectionQuery_call(propertyCondition, tagCondition, page, pageSize, sortFlag, sortPropertyName, sortType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getListByCollectionQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyCondition;
      private String tagCondition;
      private int page;
      private int pageSize;
      private boolean sortFlag;
      private String sortPropertyName;
      private String sortType;
      public getListByCollectionQuery_call(String propertyCondition, String tagCondition, int page, int pageSize, boolean sortFlag, String sortPropertyName, String sortType, org.apache.thrift.async.AsyncMethodCallback<getListByCollectionQuery_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyCondition = propertyCondition;
        this.tagCondition = tagCondition;
        this.page = page;
        this.pageSize = pageSize;
        this.sortFlag = sortFlag;
        this.sortPropertyName = sortPropertyName;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByCollectionQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListByCollectionQuery_args args = new getListByCollectionQuery_args();
        args.setPropertyCondition(propertyCondition);
        args.setTagCondition(tagCondition);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setSortFlag(sortFlag);
        args.setSortPropertyName(sortPropertyName);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListByCollectionQuery();
      }
    }

    public void groupByByCollectionQuery(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int sampleCount, org.apache.thrift.async.AsyncMethodCallback<groupByByCollectionQuery_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      groupByByCollectionQuery_call method_call = new groupByByCollectionQuery_call(propertyCondition, tagCondition, groupFieldName, boundaryStr, sampleCount, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class groupByByCollectionQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyCondition;
      private String tagCondition;
      private String groupFieldName;
      private String boundaryStr;
      private int sampleCount;
      public groupByByCollectionQuery_call(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int sampleCount, org.apache.thrift.async.AsyncMethodCallback<groupByByCollectionQuery_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyCondition = propertyCondition;
        this.tagCondition = tagCondition;
        this.groupFieldName = groupFieldName;
        this.boundaryStr = boundaryStr;
        this.sampleCount = sampleCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByByCollectionQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        groupByByCollectionQuery_args args = new groupByByCollectionQuery_args();
        args.setPropertyCondition(propertyCondition);
        args.setTagCondition(tagCondition);
        args.setGroupFieldName(groupFieldName);
        args.setBoundaryStr(boundaryStr);
        args.setSampleCount(sampleCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_groupByByCollectionQuery();
      }
    }

    public void groupSpecialTagIdByRecursiveFilter(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int groupTagId, org.apache.thrift.async.AsyncMethodCallback<groupSpecialTagIdByRecursiveFilter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      groupSpecialTagIdByRecursiveFilter_call method_call = new groupSpecialTagIdByRecursiveFilter_call(propertyCondition, tagCondition, groupFieldName, boundaryStr, groupTagId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class groupSpecialTagIdByRecursiveFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyCondition;
      private String tagCondition;
      private String groupFieldName;
      private String boundaryStr;
      private int groupTagId;
      public groupSpecialTagIdByRecursiveFilter_call(String propertyCondition, String tagCondition, String groupFieldName, String boundaryStr, int groupTagId, org.apache.thrift.async.AsyncMethodCallback<groupSpecialTagIdByRecursiveFilter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyCondition = propertyCondition;
        this.tagCondition = tagCondition;
        this.groupFieldName = groupFieldName;
        this.boundaryStr = boundaryStr;
        this.groupTagId = groupTagId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupSpecialTagIdByRecursiveFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        groupSpecialTagIdByRecursiveFilter_args args = new groupSpecialTagIdByRecursiveFilter_args();
        args.setPropertyCondition(propertyCondition);
        args.setTagCondition(tagCondition);
        args.setGroupFieldName(groupFieldName);
        args.setBoundaryStr(boundaryStr);
        args.setGroupTagId(groupTagId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_groupSpecialTagIdByRecursiveFilter();
      }
    }

    public void groupTagsByRecursiveFilter(String propertyCondition, String tagCondition, org.apache.thrift.async.AsyncMethodCallback<groupTagsByRecursiveFilter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      groupTagsByRecursiveFilter_call method_call = new groupTagsByRecursiveFilter_call(propertyCondition, tagCondition, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class groupTagsByRecursiveFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyCondition;
      private String tagCondition;
      public groupTagsByRecursiveFilter_call(String propertyCondition, String tagCondition, org.apache.thrift.async.AsyncMethodCallback<groupTagsByRecursiveFilter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyCondition = propertyCondition;
        this.tagCondition = tagCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupTagsByRecursiveFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        groupTagsByRecursiveFilter_args args = new groupTagsByRecursiveFilter_args();
        args.setPropertyCondition(propertyCondition);
        args.setTagCondition(tagCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_groupTagsByRecursiveFilter();
      }
    }

    public void addTagClass(long appkey, String className, String classDescription, long pid, org.apache.thrift.async.AsyncMethodCallback<addTagClass_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTagClass_call method_call = new addTagClass_call(appkey, className, classDescription, pid, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addTagClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private String className;
      private String classDescription;
      private long pid;
      public addTagClass_call(long appkey, String className, String classDescription, long pid, org.apache.thrift.async.AsyncMethodCallback<addTagClass_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.className = className;
        this.classDescription = classDescription;
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTagClass_args args = new addTagClass_args();
        args.setAppkey(appkey);
        args.setClassName(className);
        args.setClassDescription(classDescription);
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTagClass();
      }
    }

    public void searchTagClass(long appkey, String className, String classIds, long pid, boolean child, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchTagClass_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchTagClass_call method_call = new searchTagClass_call(appkey, className, classIds, pid, child, page, size, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchTagClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private String className;
      private String classIds;
      private long pid;
      private boolean child;
      private int page;
      private int size;
      public searchTagClass_call(long appkey, String className, String classIds, long pid, boolean child, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchTagClass_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.className = className;
        this.classIds = classIds;
        this.pid = pid;
        this.child = child;
        this.page = page;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchTagClass_args args = new searchTagClass_args();
        args.setAppkey(appkey);
        args.setClassName(className);
        args.setClassIds(classIds);
        args.setPid(pid);
        args.setChild(child);
        args.setPage(page);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchTagClass();
      }
    }

    public void addTagByClass(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<addTagByClass_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTagByClass_call method_call = new addTagByClass_call(jsonParam, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addTagByClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonParam;
      public addTagByClass_call(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<addTagByClass_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonParam = jsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagByClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTagByClass_args args = new addTagByClass_args();
        args.setJsonParam(jsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTagByClass();
      }
    }

    public void searchTagsByClass(long appkey, String tagName, String tagIds, String classIds, double defWeight, int calcType, int generalTagType, String generalPropName, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchTagsByClass_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchTagsByClass_call method_call = new searchTagsByClass_call(appkey, tagName, tagIds, classIds, defWeight, calcType, generalTagType, generalPropName, page, size, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchTagsByClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private String tagName;
      private String tagIds;
      private String classIds;
      private double defWeight;
      private int calcType;
      private int generalTagType;
      private String generalPropName;
      private int page;
      private int size;
      public searchTagsByClass_call(long appkey, String tagName, String tagIds, String classIds, double defWeight, int calcType, int generalTagType, String generalPropName, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchTagsByClass_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.tagName = tagName;
        this.tagIds = tagIds;
        this.classIds = classIds;
        this.defWeight = defWeight;
        this.calcType = calcType;
        this.generalTagType = generalTagType;
        this.generalPropName = generalPropName;
        this.page = page;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagsByClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchTagsByClass_args args = new searchTagsByClass_args();
        args.setAppkey(appkey);
        args.setTagName(tagName);
        args.setTagIds(tagIds);
        args.setClassIds(classIds);
        args.setDefWeight(defWeight);
        args.setCalcType(calcType);
        args.setGeneralTagType(generalTagType);
        args.setGeneralPropName(generalPropName);
        args.setPage(page);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchTagsByClass();
      }
    }

    public void deleteLeafTagClass(long classId, org.apache.thrift.async.AsyncMethodCallback<deleteLeafTagClass_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLeafTagClass_call method_call = new deleteLeafTagClass_call(classId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteLeafTagClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long classId;
      public deleteLeafTagClass_call(long classId, org.apache.thrift.async.AsyncMethodCallback<deleteLeafTagClass_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.classId = classId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLeafTagClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLeafTagClass_args args = new deleteLeafTagClass_args();
        args.setClassId(classId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLeafTagClass();
      }
    }

    public void modifyTagByClass(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<modifyTagByClass_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyTagByClass_call method_call = new modifyTagByClass_call(jsonParam, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyTagByClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonParam;
      public modifyTagByClass_call(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<modifyTagByClass_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonParam = jsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTagByClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyTagByClass_args args = new modifyTagByClass_args();
        args.setJsonParam(jsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyTagByClass();
      }
    }

    public void searchAllTagClass(long appkey, int size, org.apache.thrift.async.AsyncMethodCallback<searchAllTagClass_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchAllTagClass_call method_call = new searchAllTagClass_call(appkey, size, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchAllTagClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private int size;
      public searchAllTagClass_call(long appkey, int size, org.apache.thrift.async.AsyncMethodCallback<searchAllTagClass_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAllTagClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchAllTagClass_args args = new searchAllTagClass_args();
        args.setAppkey(appkey);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchAllTagClass();
      }
    }

    public void fuzzySearchTags(long appkey, String tagName, int page, int size, org.apache.thrift.async.AsyncMethodCallback<fuzzySearchTags_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fuzzySearchTags_call method_call = new fuzzySearchTags_call(appkey, tagName, page, size, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class fuzzySearchTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private String tagName;
      private int page;
      private int size;
      public fuzzySearchTags_call(long appkey, String tagName, int page, int size, org.apache.thrift.async.AsyncMethodCallback<fuzzySearchTags_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.tagName = tagName;
        this.page = page;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fuzzySearchTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fuzzySearchTags_args args = new fuzzySearchTags_args();
        args.setAppkey(appkey);
        args.setTagName(tagName);
        args.setPage(page);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fuzzySearchTags();
      }
    }

    public void addExp(long tagWeightId, int expKey, String expVal, String expOp, org.apache.thrift.async.AsyncMethodCallback<addExp_call> resultHandler) throws org.apache.thrift.TException {
        checkReady();
        addExp_call method_call = new addExp_call(tagWeightId, expKey, expVal, expOp, resultHandler, this, protocolFactory, transport);
        this.currentMethod = method_call;
        manager.call(method_call);
      }

    public static class addExp_call extends org.apache.thrift.async.TAsyncMethodCall {
        private long tagWeightId;
        private int expKey;
        private String expVal;
        private String expOp;
        public addExp_call(long tagWeightId, int expKey, String expVal, String expOp, org.apache.thrift.async.AsyncMethodCallback<addExp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
          super(client, protocolFactory, transport, resultHandler, false);
          this.tagWeightId = tagWeightId;
          this.expKey = expKey;
          this.expVal = expVal;
          this.expOp = expOp;
        }

        public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
          prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
          addExp_args args = new addExp_args();
          args.setTagWeightId(tagWeightId);
          args.setExpKey(expKey);
          args.setExpVal(expVal);
          args.setExpOp(expOp);
          args.write(prot);
          prot.writeMessageEnd();
        }

        public long getResult() throws org.apache.thrift.TException {
          if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
            throw new IllegalStateException("Method call not finished!");
          }
          org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
          org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
          return (new Client(prot)).recv_addExp();
        }
      }

    public void deleteExp(long expId, org.apache.thrift.async.AsyncMethodCallback<deleteExp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteExp_call method_call = new deleteExp_call(expId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long expId;
      public deleteExp_call(long expId, org.apache.thrift.async.AsyncMethodCallback<deleteExp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expId = expId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteExp_args args = new deleteExp_args();
        args.setExpId(expId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteExp();
      }
    }

    public void modifyExp(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<modifyExp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyExp_call method_call = new modifyExp_call(jsonParam, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonParam;
      public modifyExp_call(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<modifyExp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonParam = jsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyExp_args args = new modifyExp_args();
        args.setJsonParam(jsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyExp();
      }
    }

    public void searchExps(long expId, long tagId, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchExps_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchExps_call method_call = new searchExps_call(expId, tagId, page, size, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchExps_call extends org.apache.thrift.async.TAsyncMethodCall {
        private long expId;
        private long tagWeightId;
        private int page;
        private int size;
        public searchExps_call(long expId, long tagWeightId, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchExps_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
          super(client, protocolFactory, transport, resultHandler, false);
          this.expId = expId;
          this.tagWeightId = tagWeightId;
          this.page = page;
          this.size = size;
        }

        public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
          prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
          searchExps_args args = new searchExps_args();
          args.setExpId(expId);
          args.setTagWeightId(tagWeightId);
          args.setPage(page);
          args.setSize(size);
          args.write(prot);
          prot.writeMessageEnd();
        }

        public String getResult() throws org.apache.thrift.TException {
          if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
            throw new IllegalStateException("Method call not finished!");
          }
          org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
          org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
          return (new Client(prot)).recv_searchExps();
        }
      }

    public void searchAlgos(int calcType, org.apache.thrift.async.AsyncMethodCallback<searchAlgos_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchAlgos_call method_call = new searchAlgos_call(calcType, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchAlgos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int calcType;
      public searchAlgos_call(int calcType, org.apache.thrift.async.AsyncMethodCallback<searchAlgos_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.calcType = calcType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAlgos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchAlgos_args args = new searchAlgos_args();
        args.setCalcType(calcType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchAlgos();
      }
    }

    public void addAppidConfig(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<addAppidConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAppidConfig_call method_call = new addAppidConfig_call(jsonParam, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addAppidConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonParam;
      public addAppidConfig_call(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<addAppidConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonParam = jsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAppidConfig_args args = new addAppidConfig_args();
        args.setJsonParam(jsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAppidConfig();
      }
    }

    public void updateAppidConfig(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<updateAppidConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAppidConfig_call method_call = new updateAppidConfig_call(jsonParam, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class updateAppidConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonParam;
      public updateAppidConfig_call(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<updateAppidConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonParam = jsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAppidConfig_args args = new updateAppidConfig_args();
        args.setJsonParam(jsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAppidConfig();
      }
    }

    public void deleteAppidConfig(long appkey, org.apache.thrift.async.AsyncMethodCallback<deleteAppidConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAppidConfig_call method_call = new deleteAppidConfig_call(appkey, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteAppidConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      public deleteAppidConfig_call(long appkey, org.apache.thrift.async.AsyncMethodCallback<deleteAppidConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAppidConfig_args args = new deleteAppidConfig_args();
        args.setAppkey(appkey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAppidConfig();
      }
    }

    public void searchAppidConfig(long appkey, org.apache.thrift.async.AsyncMethodCallback<searchAppidConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchAppidConfig_call method_call = new searchAppidConfig_call(appkey, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchAppidConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      public searchAppidConfig_call(long appkey, org.apache.thrift.async.AsyncMethodCallback<searchAppidConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAppidConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchAppidConfig_args args = new searchAppidConfig_args();
        args.setAppkey(appkey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchAppidConfig();
      }
    }

  }

  public static class Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("searchTagRes", new searchTagRes());
      processMap_.put("searchForecastTagRes", new searchForecastTagRes());
      processMap_.put("addTag", new addTag());
      processMap_.put("modifyTag", new modifyTag());
      processMap_.put("deleteTag", new deleteTag());
      processMap_.put("searchTags", new searchTags());
      processMap_.put("addGroup", new addGroup());
      processMap_.put("modifyGroup", new modifyGroup());
      processMap_.put("deleteGroup", new deleteGroup());
      processMap_.put("searchGroups", new searchGroups());
      processMap_.put("addWgtConfig", new addWgtConfig());
      processMap_.put("modifyWgtConfig", new modifyWgtConfig());
      processMap_.put("deleteWgtConfig", new deleteWgtConfig());
      processMap_.put("searchWgtConfigs", new searchWgtConfigs());
      processMap_.put("getFansTagInfo", new getFansTagInfo());
      processMap_.put("getActivityKOL", new getActivityKOL());
      processMap_.put("getFansNumDistOfProperty", new getFansNumDistOfProperty());
      processMap_.put("getFansNumDistOfTagByCon", new getFansNumDistOfTagByCon());
      processMap_.put("getFansListByFanPropertyAndTagCondi", new getFansListByFanPropertyAndTagCondi());
      processMap_.put("getFansListByFanPropertiesAndTagId", new getFansListByFanPropertiesAndTagId());
      processMap_.put("getFansListByFanPropertiesAndAppId", new getFansListByFanPropertiesAndAppId());
      processMap_.put("getFansNumDistOfNatureProperty", new getFansNumDistOfNatureProperty());
      processMap_.put("getFansListByFanPropertiesAndClassId", new getFansListByFanPropertiesAndClassId());
      processMap_.put("getFansNumOfGroupFieldByPropertyCon", new getFansNumOfGroupFieldByPropertyCon());
      processMap_.put("getLatestTimeOfFansPropertyTagCount", new getLatestTimeOfFansPropertyTagCount());
      processMap_.put("getFansListByFanPropertiesAndTagIds", new getFansListByFanPropertiesAndTagIds());
      processMap_.put("fetchFansListByFanPropertiesAndAppId", new fetchFansListByFanPropertiesAndAppId());
      processMap_.put("getFansInfoByOpenIds", new getFansInfoByOpenIds());
      processMap_.put("getListByRecursivePropertiesAndTagIds", new getListByRecursivePropertiesAndTagIds());
      processMap_.put("getListByCollectionQuery", new getListByCollectionQuery());
      processMap_.put("groupByByCollectionQuery", new groupByByCollectionQuery());
      processMap_.put("groupSpecialTagIdByRecursiveFilter", new groupSpecialTagIdByRecursiveFilter());
      processMap_.put("groupTagsByRecursiveFilter", new groupTagsByRecursiveFilter());
      processMap_.put("addTagClass", new addTagClass());
      processMap_.put("searchTagClass", new searchTagClass());
      processMap_.put("addTagByClass", new addTagByClass());
      processMap_.put("searchTagsByClass", new searchTagsByClass());
      processMap_.put("deleteLeafTagClass", new deleteLeafTagClass());
      processMap_.put("modifyTagByClass", new modifyTagByClass());
      processMap_.put("searchAllTagClass", new searchAllTagClass());
      processMap_.put("fuzzySearchTags", new fuzzySearchTags());
      processMap_.put("addExp", new addExp());
      processMap_.put("deleteExp", new deleteExp());
      processMap_.put("modifyExp", new modifyExp());
      processMap_.put("searchExps", new searchExps());
      processMap_.put("searchAlgos", new searchAlgos());
      processMap_.put("addAppidConfig", new addAppidConfig());
      processMap_.put("updateAppidConfig", new updateAppidConfig());
      processMap_.put("deleteAppidConfig", new deleteAppidConfig());
      processMap_.put("searchAppidConfig", new searchAppidConfig());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class searchTagRes implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchTagRes_args args = new searchTagRes_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagRes", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchTagRes_result result = new searchTagRes_result();
        result.success = iface_.searchTagRes(args.appkey, args.uid, args.tagIds, args.spread, args.startTime, args.endTime);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagRes", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchForecastTagRes implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchForecastTagRes_args args = new searchForecastTagRes_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchForecastTagRes", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchForecastTagRes_result result = new searchForecastTagRes_result();
        result.success = iface_.searchForecastTagRes(args.appkey, args.uid, args.tagIds, args.startTime, args.endTime);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchForecastTagRes", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addTag implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addTag_args args = new addTag_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addTag_result result = new addTag_result();
        result.success = iface_.addTag(args.appkey, args.tagname, args.tagDescri, args.tagclass, args.tagSubclass, args.defWeight, args.calcType, args.days);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class modifyTag implements ProcessFunction {
        public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
        {
          modifyTag_args args = new modifyTag_args();
          try {
            args.read(iprot);
          } catch (org.apache.thrift.protocol.TProtocolException e) {
            iprot.readMessageEnd();
            org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
            oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
            x.write(oprot);
            oprot.writeMessageEnd();
            oprot.getTransport().flush();
            return;
          }
          iprot.readMessageEnd();
          modifyTag_result result = new modifyTag_result();
          result.success = iface_.modifyTag(args.appkey, args.tagname, args.tagclass, args.tagSubclass, args.defWeight, args.calcType, args.days);
          result.setSuccessIsSet(true);
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTag", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
          result.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
        }

      }

    private class deleteTag implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteTag_args args = new deleteTag_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteTag_result result = new deleteTag_result();
        result.success = iface_.deleteTag(args.tagId);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTag", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchTags implements ProcessFunction {
        public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
        {
          searchTags_args args = new searchTags_args();
          try {
            args.read(iprot);
          } catch (org.apache.thrift.protocol.TProtocolException e) {
            iprot.readMessageEnd();
            org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
            oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTags", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
            x.write(oprot);
            oprot.writeMessageEnd();
            oprot.getTransport().flush();
            return;
          }
          iprot.readMessageEnd();
          searchTags_result result = new searchTags_result();
          result.success = iface_.searchTags(args.tagId, args.appkey, args.tagname, args.tagclass, args.tagSubclass, args.defWeight, args.calcType, args.days);
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTags", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
          result.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
        }

      }

    private class addGroup implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addGroup_args args = new addGroup_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGroup", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addGroup_result result = new addGroup_result();
        result.success = iface_.addGroup(args.appkey, args.groupName);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGroup", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class modifyGroup implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        modifyGroup_args args = new modifyGroup_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyGroup", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        modifyGroup_result result = new modifyGroup_result();
        result.success = iface_.modifyGroup(args.groupId, args.groupName);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyGroup", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteGroup implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteGroup_args args = new deleteGroup_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGroup", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteGroup_result result = new deleteGroup_result();
        result.success = iface_.deleteGroup(args.groupId);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGroup", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchGroups implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchGroups_args args = new searchGroups_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchGroups", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchGroups_result result = new searchGroups_result();
        result.success = iface_.searchGroups(args.jsonParam);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchGroups", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addWgtConfig implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addWgtConfig_args args = new addWgtConfig_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addWgtConfig", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addWgtConfig_result result = new addWgtConfig_result();
        result.success = iface_.addWgtConfig(args.tagId, args.groupId, args.itemid, args.actionid, args.itemtype, args.weight, args.rule);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addWgtConfig", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class modifyWgtConfig implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        modifyWgtConfig_args args = new modifyWgtConfig_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyWgtConfig", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        modifyWgtConfig_result result = new modifyWgtConfig_result();
        result.success = iface_.modifyWgtConfig(args.configId, args.groupId, args.itemid, args.actionid, args.itemtype, args.weight, args.rule);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyWgtConfig", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteWgtConfig implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteWgtConfig_args args = new deleteWgtConfig_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteWgtConfig", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteWgtConfig_result result = new deleteWgtConfig_result();
        result.success = iface_.deleteWgtConfig(args.configId);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteWgtConfig", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchWgtConfigs implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchWgtConfigs_args args = new searchWgtConfigs_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchWgtConfigs", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchWgtConfigs_result result = new searchWgtConfigs_result();
        result.success = iface_.searchWgtConfigs(args.configId, args.tagId, args.groupId, args.itemid, args.actionid, args.itemtype, args.weight, args.page, args.size);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchWgtConfigs", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansTagInfo implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansTagInfo_args args = new getFansTagInfo_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansTagInfo", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansTagInfo_result result = new getFansTagInfo_result();
        result.success = iface_.getFansTagInfo(args.appkey, args.uids);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansTagInfo", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getActivityKOL implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getActivityKOL_args args = new getActivityKOL_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActivityKOL", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getActivityKOL_result result = new getActivityKOL_result();
        result.success = iface_.getActivityKOL(args.appkey, args.uids);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActivityKOL", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansNumDistOfProperty implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansNumDistOfProperty_args args = new getFansNumDistOfProperty_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfProperty", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansNumDistOfProperty_result result = new getFansNumDistOfProperty_result();
        result.success = iface_.getFansNumDistOfProperty(args.appKey, args.propertyName, args.startTime, args.endTime);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfProperty", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansNumDistOfTagByCon implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansNumDistOfTagByCon_args args = new getFansNumDistOfTagByCon_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfTagByCon", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansNumDistOfTagByCon_result result = new getFansNumDistOfTagByCon_result();
        result.success = iface_.getFansNumDistOfTagByCon(args.appKey, args.parentClassId, args.propertyName, args.propertyValue, args.startTime, args.endTime);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfTagByCon", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansListByFanPropertyAndTagCondi implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansListByFanPropertyAndTagCondi_args args = new getFansListByFanPropertyAndTagCondi_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertyAndTagCondi", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansListByFanPropertyAndTagCondi_result result = new getFansListByFanPropertyAndTagCondi_result();
        result.success = iface_.getFansListByFanPropertyAndTagCondi(args.appKey, args.tagId, args.classId, args.page, args.pageSize, args.propertyName, args.propertyValue, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertyAndTagCondi", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansListByFanPropertiesAndTagId implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansListByFanPropertiesAndTagId_args args = new getFansListByFanPropertiesAndTagId_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagId", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansListByFanPropertiesAndTagId_result result = new getFansListByFanPropertiesAndTagId_result();
        result.success = iface_.getFansListByFanPropertiesAndTagId(args.appKey, args.tagId, args.propertyCondition, args.page, args.pageSize, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagId", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansListByFanPropertiesAndAppId implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansListByFanPropertiesAndAppId_args args = new getFansListByFanPropertiesAndAppId_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansListByFanPropertiesAndAppId_result result = new getFansListByFanPropertiesAndAppId_result();
        result.success = iface_.getFansListByFanPropertiesAndAppId(args.appKey, args.propertyCondition, args.page, args.pageSize, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansNumDistOfNatureProperty implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansNumDistOfNatureProperty_args args = new getFansNumDistOfNatureProperty_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfNatureProperty", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansNumDistOfNatureProperty_result result = new getFansNumDistOfNatureProperty_result();
        result.success = iface_.getFansNumDistOfNatureProperty(args.propertyCondition, args.appKey, args.groupFieldName);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumDistOfNatureProperty", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansListByFanPropertiesAndClassId implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansListByFanPropertiesAndClassId_args args = new getFansListByFanPropertiesAndClassId_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndClassId", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansListByFanPropertiesAndClassId_result result = new getFansListByFanPropertiesAndClassId_result();
        result.success = iface_.getFansListByFanPropertiesAndClassId(args.appKey, args.classId, args.propertyCondition, args.page, args.pageSize, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndClassId", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansNumOfGroupFieldByPropertyCon implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansNumOfGroupFieldByPropertyCon_args args = new getFansNumOfGroupFieldByPropertyCon_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumOfGroupFieldByPropertyCon", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansNumOfGroupFieldByPropertyCon_result result = new getFansNumOfGroupFieldByPropertyCon_result();
        result.success = iface_.getFansNumOfGroupFieldByPropertyCon(args.appKey, args.propertyName, args.propertyValue, args.startTime, args.endTime, args.statisPropertyName);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansNumOfGroupFieldByPropertyCon", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLatestTimeOfFansPropertyTagCount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getLatestTimeOfFansPropertyTagCount_args args = new getLatestTimeOfFansPropertyTagCount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestTimeOfFansPropertyTagCount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLatestTimeOfFansPropertyTagCount_result result = new getLatestTimeOfFansPropertyTagCount_result();
        result.success = iface_.getLatestTimeOfFansPropertyTagCount(args.appKey);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestTimeOfFansPropertyTagCount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansListByFanPropertiesAndTagIds implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansListByFanPropertiesAndTagIds_args args = new getFansListByFanPropertiesAndTagIds_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansListByFanPropertiesAndTagIds_result result = new getFansListByFanPropertiesAndTagIds_result();
        result.success = iface_.getFansListByFanPropertiesAndTagIds(args.appKey, args.tagIds, args.propertyCondition, args.page, args.pageSize, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansListByFanPropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchFansListByFanPropertiesAndAppId implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        fetchFansListByFanPropertiesAndAppId_args args = new fetchFansListByFanPropertiesAndAppId_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fetchFansListByFanPropertiesAndAppId_result result = new fetchFansListByFanPropertiesAndAppId_result();
        result.success = iface_.fetchFansListByFanPropertiesAndAppId(args.appKey, args.propertyCondition, args.offset, args.pageSize, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchFansListByFanPropertiesAndAppId", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFansInfoByOpenIds implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFansInfoByOpenIds_args args = new getFansInfoByOpenIds_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansInfoByOpenIds", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFansInfoByOpenIds_result result = new getFansInfoByOpenIds_result();
        result.success = iface_.getFansInfoByOpenIds(args.openIds);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFansInfoByOpenIds", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getListByRecursivePropertiesAndTagIds implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getListByRecursivePropertiesAndTagIds_args args = new getListByRecursivePropertiesAndTagIds_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByRecursivePropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getListByRecursivePropertiesAndTagIds_result result = new getListByRecursivePropertiesAndTagIds_result();
        result.success = iface_.getListByRecursivePropertiesAndTagIds(args.propertyCondition, args.page, args.pageSize, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByRecursivePropertiesAndTagIds", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getListByCollectionQuery implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getListByCollectionQuery_args args = new getListByCollectionQuery_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByCollectionQuery", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getListByCollectionQuery_result result = new getListByCollectionQuery_result();
        result.success = iface_.getListByCollectionQuery(args.propertyCondition, args.tagCondition, args.page, args.pageSize, args.sortFlag, args.sortPropertyName, args.sortType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListByCollectionQuery", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class groupByByCollectionQuery implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        groupByByCollectionQuery_args args = new groupByByCollectionQuery_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByByCollectionQuery", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        groupByByCollectionQuery_result result = new groupByByCollectionQuery_result();
        result.success = iface_.groupByByCollectionQuery(args.propertyCondition, args.tagCondition, args.groupFieldName, args.boundaryStr, args.sampleCount);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByByCollectionQuery", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class groupSpecialTagIdByRecursiveFilter implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        groupSpecialTagIdByRecursiveFilter_args args = new groupSpecialTagIdByRecursiveFilter_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupSpecialTagIdByRecursiveFilter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        groupSpecialTagIdByRecursiveFilter_result result = new groupSpecialTagIdByRecursiveFilter_result();
        result.success = iface_.groupSpecialTagIdByRecursiveFilter(args.propertyCondition, args.tagCondition, args.groupFieldName, args.boundaryStr, args.groupTagId);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupSpecialTagIdByRecursiveFilter", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class groupTagsByRecursiveFilter implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        groupTagsByRecursiveFilter_args args = new groupTagsByRecursiveFilter_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupTagsByRecursiveFilter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        groupTagsByRecursiveFilter_result result = new groupTagsByRecursiveFilter_result();
        result.success = iface_.groupTagsByRecursiveFilter(args.propertyCondition, args.tagCondition);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupTagsByRecursiveFilter", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addTagClass implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addTagClass_args args = new addTagClass_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagClass", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addTagClass_result result = new addTagClass_result();
        result.success = iface_.addTagClass(args.appkey, args.className, args.classDescription, args.pid);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagClass", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchTagClass implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchTagClass_args args = new searchTagClass_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagClass", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchTagClass_result result = new searchTagClass_result();
        result.success = iface_.searchTagClass(args.appkey, args.className, args.classIds, args.pid, args.child, args.page, args.size);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagClass", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addTagByClass implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addTagByClass_args args = new addTagByClass_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagByClass", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addTagByClass_result result = new addTagByClass_result();
        result.success = iface_.addTagByClass(args.jsonParam);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagByClass", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchTagsByClass implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchTagsByClass_args args = new searchTagsByClass_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagsByClass", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchTagsByClass_result result = new searchTagsByClass_result();
        result.success = iface_.searchTagsByClass(args.appkey, args.tagName, args.tagIds, args.classIds, args.defWeight, args.calcType, args.generalTagType, args.generalPropName, args.page, args.size);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTagsByClass", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteLeafTagClass implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteLeafTagClass_args args = new deleteLeafTagClass_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLeafTagClass", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteLeafTagClass_result result = new deleteLeafTagClass_result();
        result.success = iface_.deleteLeafTagClass(args.classId);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLeafTagClass", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class modifyTagByClass implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        modifyTagByClass_args args = new modifyTagByClass_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTagByClass", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        modifyTagByClass_result result = new modifyTagByClass_result();
        result.success = iface_.modifyTagByClass(args.jsonParam);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTagByClass", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchAllTagClass implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchAllTagClass_args args = new searchAllTagClass_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAllTagClass", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchAllTagClass_result result = new searchAllTagClass_result();
        result.success = iface_.searchAllTagClass(args.appkey, args.size);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAllTagClass", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fuzzySearchTags implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        fuzzySearchTags_args args = new fuzzySearchTags_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fuzzySearchTags", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fuzzySearchTags_result result = new fuzzySearchTags_result();
        result.success = iface_.fuzzySearchTags(args.appkey, args.tagName, args.page, args.size);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fuzzySearchTags", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addExp implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addExp_args args = new addExp_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addExp_result result = new addExp_result();
        result.success = iface_.addExp(args.tagWeightId, args.expKey, args.expVal, args.expOp);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteExp implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteExp_args args = new deleteExp_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteExp_result result = new deleteExp_result();
        result.success = iface_.deleteExp(args.expId);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class modifyExp implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        modifyExp_args args = new modifyExp_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        modifyExp_result result = new modifyExp_result();
        result.success = iface_.modifyExp(args.jsonParam);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchExps implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchExps_args args = new searchExps_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchExps_result result = new searchExps_result();
        result.success = iface_.searchExps(args.expId, args.tagWeightId, args.page, args.size);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchAlgos implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchAlgos_args args = new searchAlgos_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAlgos", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchAlgos_result result = new searchAlgos_result();
        result.success = iface_.searchAlgos(args.calcType);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAlgos", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addAppidConfig implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addAppidConfig_args args = new addAppidConfig_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAppidConfig", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addAppidConfig_result result = new addAppidConfig_result();
        result.success = iface_.addAppidConfig(args.jsonParam);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAppidConfig", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateAppidConfig implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        updateAppidConfig_args args = new updateAppidConfig_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppidConfig", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateAppidConfig_result result = new updateAppidConfig_result();
        result.success = iface_.updateAppidConfig(args.jsonParam);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppidConfig", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteAppidConfig implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteAppidConfig_args args = new deleteAppidConfig_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAppidConfig", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteAppidConfig_result result = new deleteAppidConfig_result();
        result.success = iface_.deleteAppidConfig(args.appkey);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAppidConfig", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchAppidConfig implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchAppidConfig_args args = new searchAppidConfig_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAppidConfig", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchAppidConfig_result result = new searchAppidConfig_result();
        result.success = iface_.searchAppidConfig(args.appkey);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAppidConfig", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class searchTagRes_args implements org.apache.thrift.TBase<searchTagRes_args, searchTagRes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTagRes_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SPREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("spread", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);

    public long appkey;
    public String uid;
    public String tagIds;
    public boolean spread;
    public long startTime;
    public long endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      UID((short)2, "uid"),
      TAG_IDS((short)3, "tagIds"),
      SPREAD((short)4, "spread"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)6, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // UID
            return UID;
          case 3: // TAG_IDS
            return TAG_IDS;
          case 4: // SPREAD
            return SPREAD;
          case 5: // START_TIME
            return START_TIME;
          case 6: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __SPREAD_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPREAD, new org.apache.thrift.meta_data.FieldMetaData("spread", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTagRes_args.class, metaDataMap);
    }

    public searchTagRes_args() {
    }

    public searchTagRes_args(
      long appkey,
      String uid,
      String tagIds,
      boolean spread,
      long startTime,
      long endTime)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.uid = uid;
      this.tagIds = tagIds;
      this.spread = spread;
      setSpreadIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTagRes_args(searchTagRes_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetTagIds()) {
        this.tagIds = other.tagIds;
      }
      this.spread = other.spread;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public searchTagRes_args deepCopy() {
      return new searchTagRes_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.uid = null;
      this.tagIds = null;
      setSpreadIsSet(false);
      this.spread = false;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public searchTagRes_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getUid() {
      return this.uid;
    }

    public searchTagRes_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public String getTagIds() {
      return this.tagIds;
    }

    public searchTagRes_args setTagIds(String tagIds) {
      this.tagIds = tagIds;
      return this;
    }

    public void unsetTagIds() {
      this.tagIds = null;
    }

    /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTagIds() {
      return this.tagIds != null;
    }

    public void setTagIdsIsSet(boolean value) {
      if (!value) {
        this.tagIds = null;
      }
    }

    public boolean isSpread() {
      return this.spread;
    }

    public searchTagRes_args setSpread(boolean spread) {
      this.spread = spread;
      setSpreadIsSet(true);
      return this;
    }

    public void unsetSpread() {
      __isset_bit_vector.clear(__SPREAD_ISSET_ID);
    }

    /** Returns true if field spread is set (has been assigned a value) and false otherwise */
    public boolean isSetSpread() {
      return __isset_bit_vector.get(__SPREAD_ISSET_ID);
    }

    public void setSpreadIsSet(boolean value) {
      __isset_bit_vector.set(__SPREAD_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public searchTagRes_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public searchTagRes_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case TAG_IDS:
        if (value == null) {
          unsetTagIds();
        } else {
          setTagIds((String)value);
        }
        break;

      case SPREAD:
        if (value == null) {
          unsetSpread();
        } else {
          setSpread((Boolean)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case UID:
        return getUid();

      case TAG_IDS:
        return getTagIds();

      case SPREAD:
        return new Boolean(isSpread());

      case START_TIME:
        return new Long(getStartTime());

      case END_TIME:
        return new Long(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case UID:
        return isSetUid();
      case TAG_IDS:
        return isSetTagIds();
      case SPREAD:
        return isSetSpread();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTagRes_args)
        return this.equals((searchTagRes_args)that);
      return false;
    }

    public boolean equals(searchTagRes_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_tagIds = true && this.isSetTagIds();
      boolean that_present_tagIds = true && that.isSetTagIds();
      if (this_present_tagIds || that_present_tagIds) {
        if (!(this_present_tagIds && that_present_tagIds))
          return false;
        if (!this.tagIds.equals(that.tagIds))
          return false;
      }

      boolean this_present_spread = true;
      boolean that_present_spread = true;
      if (this_present_spread || that_present_spread) {
        if (!(this_present_spread && that_present_spread))
          return false;
        if (this.spread != that.spread)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTagRes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTagRes_args typedOther = (searchTagRes_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpread()).compareTo(typedOther.isSetSpread());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpread()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spread, typedOther.spread);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TAG_IDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagIds = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SPREAD
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.spread = iprot.readBool();
              setSpreadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.startTime = iprot.readI64();
              setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.endTime = iprot.readI64();
              setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      if (this.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(this.tagIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPREAD_FIELD_DESC);
      oprot.writeBool(this.spread);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(this.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTagRes_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagIds:");
      if (this.tagIds == null) {
        sb.append("null");
      } else {
        sb.append(this.tagIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spread:");
      sb.append(this.spread);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchTagRes_result implements org.apache.thrift.TBase<searchTagRes_result, searchTagRes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTagRes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTagRes_result.class, metaDataMap);
    }

    public searchTagRes_result() {
    }

    public searchTagRes_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTagRes_result(searchTagRes_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchTagRes_result deepCopy() {
      return new searchTagRes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchTagRes_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTagRes_result)
        return this.equals((searchTagRes_result)that);
      return false;
    }

    public boolean equals(searchTagRes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTagRes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTagRes_result typedOther = (searchTagRes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTagRes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchForecastTagRes_args implements org.apache.thrift.TBase<searchForecastTagRes_args, searchForecastTagRes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchForecastTagRes_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    public int appkey;
    public String uid;
    public String tagIds;
    public long startTime;
    public long endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      UID((short)2, "uid"),
      TAG_IDS((short)3, "tagIds"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // UID
            return UID;
          case 3: // TAG_IDS
            return TAG_IDS;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchForecastTagRes_args.class, metaDataMap);
    }

    public searchForecastTagRes_args() {
    }

    public searchForecastTagRes_args(
      int appkey,
      String uid,
      String tagIds,
      long startTime,
      long endTime)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.uid = uid;
      this.tagIds = tagIds;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchForecastTagRes_args(searchForecastTagRes_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetTagIds()) {
        this.tagIds = other.tagIds;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public searchForecastTagRes_args deepCopy() {
      return new searchForecastTagRes_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.uid = null;
      this.tagIds = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getAppkey() {
      return this.appkey;
    }

    public searchForecastTagRes_args setAppkey(int appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getUid() {
      return this.uid;
    }

    public searchForecastTagRes_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public String getTagIds() {
      return this.tagIds;
    }

    public searchForecastTagRes_args setTagIds(String tagIds) {
      this.tagIds = tagIds;
      return this;
    }

    public void unsetTagIds() {
      this.tagIds = null;
    }

    /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTagIds() {
      return this.tagIds != null;
    }

    public void setTagIdsIsSet(boolean value) {
      if (!value) {
        this.tagIds = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public searchForecastTagRes_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public searchForecastTagRes_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Integer)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case TAG_IDS:
        if (value == null) {
          unsetTagIds();
        } else {
          setTagIds((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Integer(getAppkey());

      case UID:
        return getUid();

      case TAG_IDS:
        return getTagIds();

      case START_TIME:
        return new Long(getStartTime());

      case END_TIME:
        return new Long(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case UID:
        return isSetUid();
      case TAG_IDS:
        return isSetTagIds();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchForecastTagRes_args)
        return this.equals((searchForecastTagRes_args)that);
      return false;
    }

    public boolean equals(searchForecastTagRes_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_tagIds = true && this.isSetTagIds();
      boolean that_present_tagIds = true && that.isSetTagIds();
      if (this_present_tagIds || that_present_tagIds) {
        if (!(this_present_tagIds && that_present_tagIds))
          return false;
        if (!this.tagIds.equals(that.tagIds))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchForecastTagRes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchForecastTagRes_args typedOther = (searchForecastTagRes_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appkey = iprot.readI32();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.uid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TAG_IDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagIds = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.startTime = iprot.readI64();
              setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.endTime = iprot.readI64();
              setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI32(this.appkey);
      oprot.writeFieldEnd();
      if (this.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(this.uid);
        oprot.writeFieldEnd();
      }
      if (this.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(this.tagIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(this.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchForecastTagRes_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagIds:");
      if (this.tagIds == null) {
        sb.append("null");
      } else {
        sb.append(this.tagIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchForecastTagRes_result implements org.apache.thrift.TBase<searchForecastTagRes_result, searchForecastTagRes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchForecastTagRes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchForecastTagRes_result.class, metaDataMap);
    }

    public searchForecastTagRes_result() {
    }

    public searchForecastTagRes_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchForecastTagRes_result(searchForecastTagRes_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchForecastTagRes_result deepCopy() {
      return new searchForecastTagRes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchForecastTagRes_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchForecastTagRes_result)
        return this.equals((searchForecastTagRes_result)that);
      return false;
    }

    public boolean equals(searchForecastTagRes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchForecastTagRes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchForecastTagRes_result typedOther = (searchForecastTagRes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchForecastTagRes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addTag_args implements org.apache.thrift.TBase<addTag_args, addTag_args._Fields>, java.io.Serializable, Cloneable   {
	    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTag_args");

	    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
	    private static final org.apache.thrift.protocol.TField TAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagname", org.apache.thrift.protocol.TType.STRING, (short)2);
	    private static final org.apache.thrift.protocol.TField TAG_DESCRI_FIELD_DESC = new org.apache.thrift.protocol.TField("tagDescri", org.apache.thrift.protocol.TType.STRING, (short)3);
	    private static final org.apache.thrift.protocol.TField TAGCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagclass", org.apache.thrift.protocol.TType.STRING, (short)4);
	    private static final org.apache.thrift.protocol.TField TAG_SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagSubclass", org.apache.thrift.protocol.TType.STRING, (short)5);
	    private static final org.apache.thrift.protocol.TField DEF_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("defWeight", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
	    private static final org.apache.thrift.protocol.TField CALC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("calcType", org.apache.thrift.protocol.TType.I32, (short)7);
	    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)8);

	    public long appkey;
	    public String tagname;
	    public String tagDescri;
	    public String tagclass;
	    public String tagSubclass;
	    public double defWeight;
	    public int calcType;
	    public int days;

	    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
	      APPKEY((short)1, "appkey"),
	      TAGNAME((short)2, "tagname"),
	      TAG_DESCRI((short)3, "tagDescri"),
	      TAGCLASS((short)4, "tagclass"),
	      TAG_SUBCLASS((short)5, "tagSubclass"),
	      DEF_WEIGHT((short)6, "defWeight"),
	      CALC_TYPE((short)7, "calcType"),
	      DAYS((short)8, "days");

	      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

	      static {
	        for (_Fields field : EnumSet.allOf(_Fields.class)) {
	          byName.put(field.getFieldName(), field);
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, or null if its not found.
	       */
	      public static _Fields findByThriftId(int fieldId) {
	        switch(fieldId) {
	          case 1: // APPKEY
	            return APPKEY;
	          case 2: // TAGNAME
	            return TAGNAME;
	          case 3: // TAG_DESCRI
	            return TAG_DESCRI;
	          case 4: // TAGCLASS
	            return TAGCLASS;
	          case 5: // TAG_SUBCLASS
	            return TAG_SUBCLASS;
	          case 6: // DEF_WEIGHT
	            return DEF_WEIGHT;
	          case 7: // CALC_TYPE
	            return CALC_TYPE;
	          case 8: // DAYS
	            return DAYS;
	          default:
	            return null;
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, throwing an exception
	       * if it is not found.
	       */
	      public static _Fields findByThriftIdOrThrow(int fieldId) {
	        _Fields fields = findByThriftId(fieldId);
	        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
	        return fields;
	      }

	      /**
	       * Find the _Fields constant that matches name, or null if its not found.
	       */
	      public static _Fields findByName(String name) {
	        return byName.get(name);
	      }

	      private final short _thriftId;
	      private final String _fieldName;

	      _Fields(short thriftId, String fieldName) {
	        _thriftId = thriftId;
	        _fieldName = fieldName;
	      }

	      public short getThriftFieldId() {
	        return _thriftId;
	      }

	      public String getFieldName() {
	        return _fieldName;
	      }
	    }

	    // isset id assignments
	    private static final int __APPKEY_ISSET_ID = 0;
	    private static final int __DEFWEIGHT_ISSET_ID = 1;
	    private static final int __CALCTYPE_ISSET_ID = 2;
	    private static final int __DAYS_ISSET_ID = 3;
	    private BitSet __isset_bit_vector = new BitSet(4);

	    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	    static {
	      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
	      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
	      tmpMap.put(_Fields.TAGNAME, new org.apache.thrift.meta_data.FieldMetaData("tagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.TAG_DESCRI, new org.apache.thrift.meta_data.FieldMetaData("tagDescri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.TAGCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.TAG_SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagSubclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.DEF_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("defWeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
	      tmpMap.put(_Fields.CALC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("calcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      metaDataMap = Collections.unmodifiableMap(tmpMap);
	      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTag_args.class, metaDataMap);
	    }

	    public addTag_args() {
	    }

	    public addTag_args(
	      long appkey,
	      String tagname,
	      String tagDescri,
	      String tagclass,
	      String tagSubclass,
	      double defWeight,
	      int calcType,
	      int days)
	    {
	      this();
	      this.appkey = appkey;
	      setAppkeyIsSet(true);
	      this.tagname = tagname;
	      this.tagDescri = tagDescri;
	      this.tagclass = tagclass;
	      this.tagSubclass = tagSubclass;
	      this.defWeight = defWeight;
	      setDefWeightIsSet(true);
	      this.calcType = calcType;
	      setCalcTypeIsSet(true);
	      this.days = days;
	      setDaysIsSet(true);
	    }

	    /**
	     * Performs a deep copy on <i>other</i>.
	     */
	    public addTag_args(addTag_args other) {
	      __isset_bit_vector.clear();
	      __isset_bit_vector.or(other.__isset_bit_vector);
	      this.appkey = other.appkey;
	      if (other.isSetTagname()) {
	        this.tagname = other.tagname;
	      }
	      if (other.isSetTagDescri()) {
	        this.tagDescri = other.tagDescri;
	      }
	      if (other.isSetTagclass()) {
	        this.tagclass = other.tagclass;
	      }
	      if (other.isSetTagSubclass()) {
	        this.tagSubclass = other.tagSubclass;
	      }
	      this.defWeight = other.defWeight;
	      this.calcType = other.calcType;
	      this.days = other.days;
	    }

	    public addTag_args deepCopy() {
	      return new addTag_args(this);
	    }

	    @Override
	    public void clear() {
	      setAppkeyIsSet(false);
	      this.appkey = 0;
	      this.tagname = null;
	      this.tagDescri = null;
	      this.tagclass = null;
	      this.tagSubclass = null;
	      setDefWeightIsSet(false);
	      this.defWeight = 0.0;
	      setCalcTypeIsSet(false);
	      this.calcType = 0;
	      setDaysIsSet(false);
	      this.days = 0;
	    }

	    public long getAppkey() {
	      return this.appkey;
	    }

	    public addTag_args setAppkey(long appkey) {
	      this.appkey = appkey;
	      setAppkeyIsSet(true);
	      return this;
	    }

	    public void unsetAppkey() {
	      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
	    }

	    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
	    public boolean isSetAppkey() {
	      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
	    }

	    public void setAppkeyIsSet(boolean value) {
	      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
	    }

	    public String getTagname() {
	      return this.tagname;
	    }

	    public addTag_args setTagname(String tagname) {
	      this.tagname = tagname;
	      return this;
	    }

	    public void unsetTagname() {
	      this.tagname = null;
	    }

	    /** Returns true if field tagname is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagname() {
	      return this.tagname != null;
	    }

	    public void setTagnameIsSet(boolean value) {
	      if (!value) {
	        this.tagname = null;
	      }
	    }

	    public String getTagDescri() {
	      return this.tagDescri;
	    }

	    public addTag_args setTagDescri(String tagDescri) {
	      this.tagDescri = tagDescri;
	      return this;
	    }

	    public void unsetTagDescri() {
	      this.tagDescri = null;
	    }

	    /** Returns true if field tagDescri is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagDescri() {
	      return this.tagDescri != null;
	    }

	    public void setTagDescriIsSet(boolean value) {
	      if (!value) {
	        this.tagDescri = null;
	      }
	    }

	    public String getTagclass() {
	      return this.tagclass;
	    }

	    public addTag_args setTagclass(String tagclass) {
	      this.tagclass = tagclass;
	      return this;
	    }

	    public void unsetTagclass() {
	      this.tagclass = null;
	    }

	    /** Returns true if field tagclass is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagclass() {
	      return this.tagclass != null;
	    }

	    public void setTagclassIsSet(boolean value) {
	      if (!value) {
	        this.tagclass = null;
	      }
	    }

	    public String getTagSubclass() {
	      return this.tagSubclass;
	    }

	    public addTag_args setTagSubclass(String tagSubclass) {
	      this.tagSubclass = tagSubclass;
	      return this;
	    }

	    public void unsetTagSubclass() {
	      this.tagSubclass = null;
	    }

	    /** Returns true if field tagSubclass is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagSubclass() {
	      return this.tagSubclass != null;
	    }

	    public void setTagSubclassIsSet(boolean value) {
	      if (!value) {
	        this.tagSubclass = null;
	      }
	    }

	    public double getDefWeight() {
	      return this.defWeight;
	    }

	    public addTag_args setDefWeight(double defWeight) {
	      this.defWeight = defWeight;
	      setDefWeightIsSet(true);
	      return this;
	    }

	    public void unsetDefWeight() {
	      __isset_bit_vector.clear(__DEFWEIGHT_ISSET_ID);
	    }

	    /** Returns true if field defWeight is set (has been assigned a value) and false otherwise */
	    public boolean isSetDefWeight() {
	      return __isset_bit_vector.get(__DEFWEIGHT_ISSET_ID);
	    }

	    public void setDefWeightIsSet(boolean value) {
	      __isset_bit_vector.set(__DEFWEIGHT_ISSET_ID, value);
	    }

	    public int getCalcType() {
	      return this.calcType;
	    }

	    public addTag_args setCalcType(int calcType) {
	      this.calcType = calcType;
	      setCalcTypeIsSet(true);
	      return this;
	    }

	    public void unsetCalcType() {
	      __isset_bit_vector.clear(__CALCTYPE_ISSET_ID);
	    }

	    /** Returns true if field calcType is set (has been assigned a value) and false otherwise */
	    public boolean isSetCalcType() {
	      return __isset_bit_vector.get(__CALCTYPE_ISSET_ID);
	    }

	    public void setCalcTypeIsSet(boolean value) {
	      __isset_bit_vector.set(__CALCTYPE_ISSET_ID, value);
	    }

	    public int getDays() {
	      return this.days;
	    }

	    public addTag_args setDays(int days) {
	      this.days = days;
	      setDaysIsSet(true);
	      return this;
	    }

	    public void unsetDays() {
	      __isset_bit_vector.clear(__DAYS_ISSET_ID);
	    }

	    /** Returns true if field days is set (has been assigned a value) and false otherwise */
	    public boolean isSetDays() {
	      return __isset_bit_vector.get(__DAYS_ISSET_ID);
	    }

	    public void setDaysIsSet(boolean value) {
	      __isset_bit_vector.set(__DAYS_ISSET_ID, value);
	    }

	    public void setFieldValue(_Fields field, Object value) {
	      switch (field) {
	      case APPKEY:
	        if (value == null) {
	          unsetAppkey();
	        } else {
	          setAppkey((Long)value);
	        }
	        break;

	      case TAGNAME:
	        if (value == null) {
	          unsetTagname();
	        } else {
	          setTagname((String)value);
	        }
	        break;

	      case TAG_DESCRI:
	        if (value == null) {
	          unsetTagDescri();
	        } else {
	          setTagDescri((String)value);
	        }
	        break;

	      case TAGCLASS:
	        if (value == null) {
	          unsetTagclass();
	        } else {
	          setTagclass((String)value);
	        }
	        break;

	      case TAG_SUBCLASS:
	        if (value == null) {
	          unsetTagSubclass();
	        } else {
	          setTagSubclass((String)value);
	        }
	        break;

	      case DEF_WEIGHT:
	        if (value == null) {
	          unsetDefWeight();
	        } else {
	          setDefWeight((Double)value);
	        }
	        break;

	      case CALC_TYPE:
	        if (value == null) {
	          unsetCalcType();
	        } else {
	          setCalcType((Integer)value);
	        }
	        break;

	      case DAYS:
	        if (value == null) {
	          unsetDays();
	        } else {
	          setDays((Integer)value);
	        }
	        break;

	      }
	    }

	    public Object getFieldValue(_Fields field) {
	      switch (field) {
	      case APPKEY:
	        return new Long(getAppkey());

	      case TAGNAME:
	        return getTagname();

	      case TAG_DESCRI:
	        return getTagDescri();

	      case TAGCLASS:
	        return getTagclass();

	      case TAG_SUBCLASS:
	        return getTagSubclass();

	      case DEF_WEIGHT:
	        return new Double(getDefWeight());

	      case CALC_TYPE:
	        return new Integer(getCalcType());

	      case DAYS:
	        return new Integer(getDays());

	      }
	      throw new IllegalStateException();
	    }

	    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	    public boolean isSet(_Fields field) {
	      if (field == null) {
	        throw new IllegalArgumentException();
	      }

	      switch (field) {
	      case APPKEY:
	        return isSetAppkey();
	      case TAGNAME:
	        return isSetTagname();
	      case TAG_DESCRI:
	        return isSetTagDescri();
	      case TAGCLASS:
	        return isSetTagclass();
	      case TAG_SUBCLASS:
	        return isSetTagSubclass();
	      case DEF_WEIGHT:
	        return isSetDefWeight();
	      case CALC_TYPE:
	        return isSetCalcType();
	      case DAYS:
	        return isSetDays();
	      }
	      throw new IllegalStateException();
	    }

	    @Override
	    public boolean equals(Object that) {
	      if (that == null)
	        return false;
	      if (that instanceof addTag_args)
	        return this.equals((addTag_args)that);
	      return false;
	    }

	    public boolean equals(addTag_args that) {
	      if (that == null)
	        return false;

	      boolean this_present_appkey = true;
	      boolean that_present_appkey = true;
	      if (this_present_appkey || that_present_appkey) {
	        if (!(this_present_appkey && that_present_appkey))
	          return false;
	        if (this.appkey != that.appkey)
	          return false;
	      }

	      boolean this_present_tagname = true && this.isSetTagname();
	      boolean that_present_tagname = true && that.isSetTagname();
	      if (this_present_tagname || that_present_tagname) {
	        if (!(this_present_tagname && that_present_tagname))
	          return false;
	        if (!this.tagname.equals(that.tagname))
	          return false;
	      }

	      boolean this_present_tagDescri = true && this.isSetTagDescri();
	      boolean that_present_tagDescri = true && that.isSetTagDescri();
	      if (this_present_tagDescri || that_present_tagDescri) {
	        if (!(this_present_tagDescri && that_present_tagDescri))
	          return false;
	        if (!this.tagDescri.equals(that.tagDescri))
	          return false;
	      }

	      boolean this_present_tagclass = true && this.isSetTagclass();
	      boolean that_present_tagclass = true && that.isSetTagclass();
	      if (this_present_tagclass || that_present_tagclass) {
	        if (!(this_present_tagclass && that_present_tagclass))
	          return false;
	        if (!this.tagclass.equals(that.tagclass))
	          return false;
	      }

	      boolean this_present_tagSubclass = true && this.isSetTagSubclass();
	      boolean that_present_tagSubclass = true && that.isSetTagSubclass();
	      if (this_present_tagSubclass || that_present_tagSubclass) {
	        if (!(this_present_tagSubclass && that_present_tagSubclass))
	          return false;
	        if (!this.tagSubclass.equals(that.tagSubclass))
	          return false;
	      }

	      boolean this_present_defWeight = true;
	      boolean that_present_defWeight = true;
	      if (this_present_defWeight || that_present_defWeight) {
	        if (!(this_present_defWeight && that_present_defWeight))
	          return false;
	        if (this.defWeight != that.defWeight)
	          return false;
	      }

	      boolean this_present_calcType = true;
	      boolean that_present_calcType = true;
	      if (this_present_calcType || that_present_calcType) {
	        if (!(this_present_calcType && that_present_calcType))
	          return false;
	        if (this.calcType != that.calcType)
	          return false;
	      }

	      boolean this_present_days = true;
	      boolean that_present_days = true;
	      if (this_present_days || that_present_days) {
	        if (!(this_present_days && that_present_days))
	          return false;
	        if (this.days != that.days)
	          return false;
	      }

	      return true;
	    }

	    @Override
	    public int hashCode() {
	      return 0;
	    }

	    public int compareTo(addTag_args other) {
	      if (!getClass().equals(other.getClass())) {
	        return getClass().getName().compareTo(other.getClass().getName());
	      }

	      int lastComparison = 0;
	      addTag_args typedOther = (addTag_args)other;

	      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetAppkey()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagname()).compareTo(typedOther.isSetTagname());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagname()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagname, typedOther.tagname);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagDescri()).compareTo(typedOther.isSetTagDescri());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagDescri()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagDescri, typedOther.tagDescri);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagclass()).compareTo(typedOther.isSetTagclass());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagclass()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagclass, typedOther.tagclass);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagSubclass()).compareTo(typedOther.isSetTagSubclass());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagSubclass()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagSubclass, typedOther.tagSubclass);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetDefWeight()).compareTo(typedOther.isSetDefWeight());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetDefWeight()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defWeight, typedOther.defWeight);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetCalcType()).compareTo(typedOther.isSetCalcType());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetCalcType()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calcType, typedOther.calcType);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetDays()).compareTo(typedOther.isSetDays());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetDays()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, typedOther.days);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      return 0;
	    }

	    public _Fields fieldForId(int fieldId) {
	      return _Fields.findByThriftId(fieldId);
	    }

	    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
	      org.apache.thrift.protocol.TField field;
	      iprot.readStructBegin();
	      while (true)
	      {
	        field = iprot.readFieldBegin();
	        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
	          break;
	        }
	        switch (field.id) {
	          case 1: // APPKEY
	            if (field.type == org.apache.thrift.protocol.TType.I64) {
	              this.appkey = iprot.readI64();
	              setAppkeyIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 2: // TAGNAME
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagname = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 3: // TAG_DESCRI
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagDescri = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 4: // TAGCLASS
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagclass = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 5: // TAG_SUBCLASS
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagSubclass = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 6: // DEF_WEIGHT
	            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
	              this.defWeight = iprot.readDouble();
	              setDefWeightIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 7: // CALC_TYPE
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.calcType = iprot.readI32();
	              setCalcTypeIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 8: // DAYS
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.days = iprot.readI32();
	              setDaysIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          default:
	            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	        }
	        iprot.readFieldEnd();
	      }
	      iprot.readStructEnd();

	      // check for required fields of primitive type, which can't be checked in the validate method
	      validate();
	    }

	    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
	      validate();

	      oprot.writeStructBegin(STRUCT_DESC);
	      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
	      oprot.writeI64(this.appkey);
	      oprot.writeFieldEnd();
	      if (this.tagname != null) {
	        oprot.writeFieldBegin(TAGNAME_FIELD_DESC);
	        oprot.writeString(this.tagname);
	        oprot.writeFieldEnd();
	      }
	      if (this.tagDescri != null) {
	        oprot.writeFieldBegin(TAG_DESCRI_FIELD_DESC);
	        oprot.writeString(this.tagDescri);
	        oprot.writeFieldEnd();
	      }
	      if (this.tagclass != null) {
	        oprot.writeFieldBegin(TAGCLASS_FIELD_DESC);
	        oprot.writeString(this.tagclass);
	        oprot.writeFieldEnd();
	      }
	      if (this.tagSubclass != null) {
	        oprot.writeFieldBegin(TAG_SUBCLASS_FIELD_DESC);
	        oprot.writeString(this.tagSubclass);
	        oprot.writeFieldEnd();
	      }
	      oprot.writeFieldBegin(DEF_WEIGHT_FIELD_DESC);
	      oprot.writeDouble(this.defWeight);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(CALC_TYPE_FIELD_DESC);
	      oprot.writeI32(this.calcType);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(DAYS_FIELD_DESC);
	      oprot.writeI32(this.days);
	      oprot.writeFieldEnd();
	      oprot.writeFieldStop();
	      oprot.writeStructEnd();
	    }

	    @Override
	    public String toString() {
	      StringBuilder sb = new StringBuilder("addTag_args(");
	      boolean first = true;

	      sb.append("appkey:");
	      sb.append(this.appkey);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagname:");
	      if (this.tagname == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagname);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagDescri:");
	      if (this.tagDescri == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagDescri);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagclass:");
	      if (this.tagclass == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagclass);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagSubclass:");
	      if (this.tagSubclass == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagSubclass);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("defWeight:");
	      sb.append(this.defWeight);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("calcType:");
	      sb.append(this.calcType);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("days:");
	      sb.append(this.days);
	      first = false;
	      sb.append(")");
	      return sb.toString();
	    }

	    public void validate() throws org.apache.thrift.TException {
	      // check for required fields
	    }

	    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
	      try {
	        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
	      try {
	        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
	        __isset_bit_vector = new BitSet(1);
	        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	  }

  public static class addTag_result implements org.apache.thrift.TBase<addTag_result, addTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTag_result.class, metaDataMap);
    }

    public addTag_result() {
    }

    public addTag_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTag_result(addTag_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addTag_result deepCopy() {
      return new addTag_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addTag_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTag_result)
        return this.equals((addTag_result)that);
      return false;
    }

    public boolean equals(addTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addTag_result typedOther = (addTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyTag_args implements org.apache.thrift.TBase<modifyTag_args, modifyTag_args._Fields>, java.io.Serializable, Cloneable   {
	    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyTag_args");

	    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
	    private static final org.apache.thrift.protocol.TField TAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagname", org.apache.thrift.protocol.TType.STRING, (short)2);
	    private static final org.apache.thrift.protocol.TField TAGCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagclass", org.apache.thrift.protocol.TType.STRING, (short)3);
	    private static final org.apache.thrift.protocol.TField TAG_SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagSubclass", org.apache.thrift.protocol.TType.STRING, (short)4);
	    private static final org.apache.thrift.protocol.TField DEF_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("defWeight", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
	    private static final org.apache.thrift.protocol.TField CALC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("calcType", org.apache.thrift.protocol.TType.I32, (short)6);
	    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)7);

	    public long appkey;
	    public String tagname;
	    public String tagclass;
	    public String tagSubclass;
	    public double defWeight;
	    public int calcType;
	    public int days;

	    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
	      APPKEY((short)1, "appkey"),
	      TAGNAME((short)2, "tagname"),
	      TAGCLASS((short)3, "tagclass"),
	      TAG_SUBCLASS((short)4, "tagSubclass"),
	      DEF_WEIGHT((short)5, "defWeight"),
	      CALC_TYPE((short)6, "calcType"),
	      DAYS((short)7, "days");

	      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

	      static {
	        for (_Fields field : EnumSet.allOf(_Fields.class)) {
	          byName.put(field.getFieldName(), field);
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, or null if its not found.
	       */
	      public static _Fields findByThriftId(int fieldId) {
	        switch(fieldId) {
	          case 1: // APPKEY
	            return APPKEY;
	          case 2: // TAGNAME
	            return TAGNAME;
	          case 3: // TAGCLASS
	            return TAGCLASS;
	          case 4: // TAG_SUBCLASS
	            return TAG_SUBCLASS;
	          case 5: // DEF_WEIGHT
	            return DEF_WEIGHT;
	          case 6: // CALC_TYPE
	            return CALC_TYPE;
	          case 7: // DAYS
	            return DAYS;
	          default:
	            return null;
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, throwing an exception
	       * if it is not found.
	       */
	      public static _Fields findByThriftIdOrThrow(int fieldId) {
	        _Fields fields = findByThriftId(fieldId);
	        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
	        return fields;
	      }

	      /**
	       * Find the _Fields constant that matches name, or null if its not found.
	       */
	      public static _Fields findByName(String name) {
	        return byName.get(name);
	      }

	      private final short _thriftId;
	      private final String _fieldName;

	      _Fields(short thriftId, String fieldName) {
	        _thriftId = thriftId;
	        _fieldName = fieldName;
	      }

	      public short getThriftFieldId() {
	        return _thriftId;
	      }

	      public String getFieldName() {
	        return _fieldName;
	      }
	    }

	    // isset id assignments
	    private static final int __APPKEY_ISSET_ID = 0;
	    private static final int __DEFWEIGHT_ISSET_ID = 1;
	    private static final int __CALCTYPE_ISSET_ID = 2;
	    private static final int __DAYS_ISSET_ID = 3;
	    private BitSet __isset_bit_vector = new BitSet(4);

	    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	    static {
	      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
	      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
	      tmpMap.put(_Fields.TAGNAME, new org.apache.thrift.meta_data.FieldMetaData("tagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.TAGCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.TAG_SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagSubclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.DEF_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("defWeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
	      tmpMap.put(_Fields.CALC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("calcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      metaDataMap = Collections.unmodifiableMap(tmpMap);
	      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyTag_args.class, metaDataMap);
	    }

	    public modifyTag_args() {
	    }

	    public modifyTag_args(
	      long appkey,
	      String tagname,
	      String tagclass,
	      String tagSubclass,
	      double defWeight,
	      int calcType,
	      int days)
	    {
	      this();
	      this.appkey = appkey;
	      setAppkeyIsSet(true);
	      this.tagname = tagname;
	      this.tagclass = tagclass;
	      this.tagSubclass = tagSubclass;
	      this.defWeight = defWeight;
	      setDefWeightIsSet(true);
	      this.calcType = calcType;
	      setCalcTypeIsSet(true);
	      this.days = days;
	      setDaysIsSet(true);
	    }

	    /**
	     * Performs a deep copy on <i>other</i>.
	     */
	    public modifyTag_args(modifyTag_args other) {
	      __isset_bit_vector.clear();
	      __isset_bit_vector.or(other.__isset_bit_vector);
	      this.appkey = other.appkey;
	      if (other.isSetTagname()) {
	        this.tagname = other.tagname;
	      }
	      if (other.isSetTagclass()) {
	        this.tagclass = other.tagclass;
	      }
	      if (other.isSetTagSubclass()) {
	        this.tagSubclass = other.tagSubclass;
	      }
	      this.defWeight = other.defWeight;
	      this.calcType = other.calcType;
	      this.days = other.days;
	    }

	    public modifyTag_args deepCopy() {
	      return new modifyTag_args(this);
	    }

	    @Override
	    public void clear() {
	      setAppkeyIsSet(false);
	      this.appkey = 0;
	      this.tagname = null;
	      this.tagclass = null;
	      this.tagSubclass = null;
	      setDefWeightIsSet(false);
	      this.defWeight = 0.0;
	      setCalcTypeIsSet(false);
	      this.calcType = 0;
	      setDaysIsSet(false);
	      this.days = 0;
	    }

	    public long getAppkey() {
	      return this.appkey;
	    }

	    public modifyTag_args setAppkey(long appkey) {
	      this.appkey = appkey;
	      setAppkeyIsSet(true);
	      return this;
	    }

	    public void unsetAppkey() {
	      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
	    }

	    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
	    public boolean isSetAppkey() {
	      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
	    }

	    public void setAppkeyIsSet(boolean value) {
	      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
	    }

	    public String getTagname() {
	      return this.tagname;
	    }

	    public modifyTag_args setTagname(String tagname) {
	      this.tagname = tagname;
	      return this;
	    }

	    public void unsetTagname() {
	      this.tagname = null;
	    }

	    /** Returns true if field tagname is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagname() {
	      return this.tagname != null;
	    }

	    public void setTagnameIsSet(boolean value) {
	      if (!value) {
	        this.tagname = null;
	      }
	    }

	    public String getTagclass() {
	      return this.tagclass;
	    }

	    public modifyTag_args setTagclass(String tagclass) {
	      this.tagclass = tagclass;
	      return this;
	    }

	    public void unsetTagclass() {
	      this.tagclass = null;
	    }

	    /** Returns true if field tagclass is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagclass() {
	      return this.tagclass != null;
	    }

	    public void setTagclassIsSet(boolean value) {
	      if (!value) {
	        this.tagclass = null;
	      }
	    }

	    public String getTagSubclass() {
	      return this.tagSubclass;
	    }

	    public modifyTag_args setTagSubclass(String tagSubclass) {
	      this.tagSubclass = tagSubclass;
	      return this;
	    }

	    public void unsetTagSubclass() {
	      this.tagSubclass = null;
	    }

	    /** Returns true if field tagSubclass is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagSubclass() {
	      return this.tagSubclass != null;
	    }

	    public void setTagSubclassIsSet(boolean value) {
	      if (!value) {
	        this.tagSubclass = null;
	      }
	    }

	    public double getDefWeight() {
	      return this.defWeight;
	    }

	    public modifyTag_args setDefWeight(double defWeight) {
	      this.defWeight = defWeight;
	      setDefWeightIsSet(true);
	      return this;
	    }

	    public void unsetDefWeight() {
	      __isset_bit_vector.clear(__DEFWEIGHT_ISSET_ID);
	    }

	    /** Returns true if field defWeight is set (has been assigned a value) and false otherwise */
	    public boolean isSetDefWeight() {
	      return __isset_bit_vector.get(__DEFWEIGHT_ISSET_ID);
	    }

	    public void setDefWeightIsSet(boolean value) {
	      __isset_bit_vector.set(__DEFWEIGHT_ISSET_ID, value);
	    }

	    public int getCalcType() {
	      return this.calcType;
	    }

	    public modifyTag_args setCalcType(int calcType) {
	      this.calcType = calcType;
	      setCalcTypeIsSet(true);
	      return this;
	    }

	    public void unsetCalcType() {
	      __isset_bit_vector.clear(__CALCTYPE_ISSET_ID);
	    }

	    /** Returns true if field calcType is set (has been assigned a value) and false otherwise */
	    public boolean isSetCalcType() {
	      return __isset_bit_vector.get(__CALCTYPE_ISSET_ID);
	    }

	    public void setCalcTypeIsSet(boolean value) {
	      __isset_bit_vector.set(__CALCTYPE_ISSET_ID, value);
	    }

	    public int getDays() {
	      return this.days;
	    }

	    public modifyTag_args setDays(int days) {
	      this.days = days;
	      setDaysIsSet(true);
	      return this;
	    }

	    public void unsetDays() {
	      __isset_bit_vector.clear(__DAYS_ISSET_ID);
	    }

	    /** Returns true if field days is set (has been assigned a value) and false otherwise */
	    public boolean isSetDays() {
	      return __isset_bit_vector.get(__DAYS_ISSET_ID);
	    }

	    public void setDaysIsSet(boolean value) {
	      __isset_bit_vector.set(__DAYS_ISSET_ID, value);
	    }

	    public void setFieldValue(_Fields field, Object value) {
	      switch (field) {
	      case APPKEY:
	        if (value == null) {
	          unsetAppkey();
	        } else {
	          setAppkey((Long)value);
	        }
	        break;

	      case TAGNAME:
	        if (value == null) {
	          unsetTagname();
	        } else {
	          setTagname((String)value);
	        }
	        break;

	      case TAGCLASS:
	        if (value == null) {
	          unsetTagclass();
	        } else {
	          setTagclass((String)value);
	        }
	        break;

	      case TAG_SUBCLASS:
	        if (value == null) {
	          unsetTagSubclass();
	        } else {
	          setTagSubclass((String)value);
	        }
	        break;

	      case DEF_WEIGHT:
	        if (value == null) {
	          unsetDefWeight();
	        } else {
	          setDefWeight((Double)value);
	        }
	        break;

	      case CALC_TYPE:
	        if (value == null) {
	          unsetCalcType();
	        } else {
	          setCalcType((Integer)value);
	        }
	        break;

	      case DAYS:
	        if (value == null) {
	          unsetDays();
	        } else {
	          setDays((Integer)value);
	        }
	        break;

	      }
	    }

	    public Object getFieldValue(_Fields field) {
	      switch (field) {
	      case APPKEY:
	        return new Long(getAppkey());

	      case TAGNAME:
	        return getTagname();

	      case TAGCLASS:
	        return getTagclass();

	      case TAG_SUBCLASS:
	        return getTagSubclass();

	      case DEF_WEIGHT:
	        return new Double(getDefWeight());

	      case CALC_TYPE:
	        return new Integer(getCalcType());

	      case DAYS:
	        return new Integer(getDays());

	      }
	      throw new IllegalStateException();
	    }

	    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	    public boolean isSet(_Fields field) {
	      if (field == null) {
	        throw new IllegalArgumentException();
	      }

	      switch (field) {
	      case APPKEY:
	        return isSetAppkey();
	      case TAGNAME:
	        return isSetTagname();
	      case TAGCLASS:
	        return isSetTagclass();
	      case TAG_SUBCLASS:
	        return isSetTagSubclass();
	      case DEF_WEIGHT:
	        return isSetDefWeight();
	      case CALC_TYPE:
	        return isSetCalcType();
	      case DAYS:
	        return isSetDays();
	      }
	      throw new IllegalStateException();
	    }

	    @Override
	    public boolean equals(Object that) {
	      if (that == null)
	        return false;
	      if (that instanceof modifyTag_args)
	        return this.equals((modifyTag_args)that);
	      return false;
	    }

	    public boolean equals(modifyTag_args that) {
	      if (that == null)
	        return false;

	      boolean this_present_appkey = true;
	      boolean that_present_appkey = true;
	      if (this_present_appkey || that_present_appkey) {
	        if (!(this_present_appkey && that_present_appkey))
	          return false;
	        if (this.appkey != that.appkey)
	          return false;
	      }

	      boolean this_present_tagname = true && this.isSetTagname();
	      boolean that_present_tagname = true && that.isSetTagname();
	      if (this_present_tagname || that_present_tagname) {
	        if (!(this_present_tagname && that_present_tagname))
	          return false;
	        if (!this.tagname.equals(that.tagname))
	          return false;
	      }

	      boolean this_present_tagclass = true && this.isSetTagclass();
	      boolean that_present_tagclass = true && that.isSetTagclass();
	      if (this_present_tagclass || that_present_tagclass) {
	        if (!(this_present_tagclass && that_present_tagclass))
	          return false;
	        if (!this.tagclass.equals(that.tagclass))
	          return false;
	      }

	      boolean this_present_tagSubclass = true && this.isSetTagSubclass();
	      boolean that_present_tagSubclass = true && that.isSetTagSubclass();
	      if (this_present_tagSubclass || that_present_tagSubclass) {
	        if (!(this_present_tagSubclass && that_present_tagSubclass))
	          return false;
	        if (!this.tagSubclass.equals(that.tagSubclass))
	          return false;
	      }

	      boolean this_present_defWeight = true;
	      boolean that_present_defWeight = true;
	      if (this_present_defWeight || that_present_defWeight) {
	        if (!(this_present_defWeight && that_present_defWeight))
	          return false;
	        if (this.defWeight != that.defWeight)
	          return false;
	      }

	      boolean this_present_calcType = true;
	      boolean that_present_calcType = true;
	      if (this_present_calcType || that_present_calcType) {
	        if (!(this_present_calcType && that_present_calcType))
	          return false;
	        if (this.calcType != that.calcType)
	          return false;
	      }

	      boolean this_present_days = true;
	      boolean that_present_days = true;
	      if (this_present_days || that_present_days) {
	        if (!(this_present_days && that_present_days))
	          return false;
	        if (this.days != that.days)
	          return false;
	      }

	      return true;
	    }

	    @Override
	    public int hashCode() {
	      return 0;
	    }

	    public int compareTo(modifyTag_args other) {
	      if (!getClass().equals(other.getClass())) {
	        return getClass().getName().compareTo(other.getClass().getName());
	      }

	      int lastComparison = 0;
	      modifyTag_args typedOther = (modifyTag_args)other;

	      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetAppkey()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagname()).compareTo(typedOther.isSetTagname());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagname()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagname, typedOther.tagname);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagclass()).compareTo(typedOther.isSetTagclass());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagclass()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagclass, typedOther.tagclass);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagSubclass()).compareTo(typedOther.isSetTagSubclass());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagSubclass()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagSubclass, typedOther.tagSubclass);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetDefWeight()).compareTo(typedOther.isSetDefWeight());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetDefWeight()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defWeight, typedOther.defWeight);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetCalcType()).compareTo(typedOther.isSetCalcType());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetCalcType()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calcType, typedOther.calcType);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetDays()).compareTo(typedOther.isSetDays());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetDays()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, typedOther.days);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      return 0;
	    }

	    public _Fields fieldForId(int fieldId) {
	      return _Fields.findByThriftId(fieldId);
	    }

	    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
	      org.apache.thrift.protocol.TField field;
	      iprot.readStructBegin();
	      while (true)
	      {
	        field = iprot.readFieldBegin();
	        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
	          break;
	        }
	        switch (field.id) {
	          case 1: // APPKEY
	            if (field.type == org.apache.thrift.protocol.TType.I64) {
	              this.appkey = iprot.readI64();
	              setAppkeyIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 2: // TAGNAME
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagname = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 3: // TAGCLASS
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagclass = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 4: // TAG_SUBCLASS
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagSubclass = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 5: // DEF_WEIGHT
	            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
	              this.defWeight = iprot.readDouble();
	              setDefWeightIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 6: // CALC_TYPE
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.calcType = iprot.readI32();
	              setCalcTypeIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 7: // DAYS
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.days = iprot.readI32();
	              setDaysIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          default:
	            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	        }
	        iprot.readFieldEnd();
	      }
	      iprot.readStructEnd();

	      // check for required fields of primitive type, which can't be checked in the validate method
	      validate();
	    }

	    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
	      validate();

	      oprot.writeStructBegin(STRUCT_DESC);
	      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
	      oprot.writeI64(this.appkey);
	      oprot.writeFieldEnd();
	      if (this.tagname != null) {
	        oprot.writeFieldBegin(TAGNAME_FIELD_DESC);
	        oprot.writeString(this.tagname);
	        oprot.writeFieldEnd();
	      }
	      if (this.tagclass != null) {
	        oprot.writeFieldBegin(TAGCLASS_FIELD_DESC);
	        oprot.writeString(this.tagclass);
	        oprot.writeFieldEnd();
	      }
	      if (this.tagSubclass != null) {
	        oprot.writeFieldBegin(TAG_SUBCLASS_FIELD_DESC);
	        oprot.writeString(this.tagSubclass);
	        oprot.writeFieldEnd();
	      }
	      oprot.writeFieldBegin(DEF_WEIGHT_FIELD_DESC);
	      oprot.writeDouble(this.defWeight);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(CALC_TYPE_FIELD_DESC);
	      oprot.writeI32(this.calcType);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(DAYS_FIELD_DESC);
	      oprot.writeI32(this.days);
	      oprot.writeFieldEnd();
	      oprot.writeFieldStop();
	      oprot.writeStructEnd();
	    }

	    @Override
	    public String toString() {
	      StringBuilder sb = new StringBuilder("modifyTag_args(");
	      boolean first = true;

	      sb.append("appkey:");
	      sb.append(this.appkey);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagname:");
	      if (this.tagname == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagname);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagclass:");
	      if (this.tagclass == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagclass);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagSubclass:");
	      if (this.tagSubclass == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagSubclass);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("defWeight:");
	      sb.append(this.defWeight);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("calcType:");
	      sb.append(this.calcType);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("days:");
	      sb.append(this.days);
	      first = false;
	      sb.append(")");
	      return sb.toString();
	    }

	    public void validate() throws org.apache.thrift.TException {
	      // check for required fields
	    }

	    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
	      try {
	        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
	      try {
	        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
	        __isset_bit_vector = new BitSet(1);
	        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	  }

  public static class modifyTag_result implements org.apache.thrift.TBase<modifyTag_result, modifyTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyTag_result.class, metaDataMap);
    }

    public modifyTag_result() {
    }

    public modifyTag_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyTag_result(modifyTag_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public modifyTag_result deepCopy() {
      return new modifyTag_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public modifyTag_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyTag_result)
        return this.equals((modifyTag_result)that);
      return false;
    }

    public boolean equals(modifyTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyTag_result typedOther = (modifyTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteTag_args implements org.apache.thrift.TBase<deleteTag_args, deleteTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTag_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I64, (short)1);

    public long tagId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID((short)1, "tagId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID
            return TAG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAGID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTag_args.class, metaDataMap);
    }

    public deleteTag_args() {
    }

    public deleteTag_args(
      long tagId)
    {
      this();
      this.tagId = tagId;
      setTagIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTag_args(deleteTag_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.tagId = other.tagId;
    }

    public deleteTag_args deepCopy() {
      return new deleteTag_args(this);
    }

    @Override
    public void clear() {
      setTagIdIsSet(false);
      this.tagId = 0;
    }

    public long getTagId() {
      return this.tagId;
    }

    public deleteTag_args setTagId(long tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
      return this;
    }

    public void unsetTagId() {
      __isset_bit_vector.clear(__TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return __isset_bit_vector.get(__TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bit_vector.set(__TAGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID:
        return new Long(getTagId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID:
        return isSetTagId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTag_args)
        return this.equals((deleteTag_args)that);
      return false;
    }

    public boolean equals(deleteTag_args that) {
      if (that == null)
        return false;

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTag_args typedOther = (deleteTag_args)other;

      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TAG_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.tagId = iprot.readI64();
              setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
      oprot.writeI64(this.tagId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTag_args(");
      boolean first = true;

      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteTag_result implements org.apache.thrift.TBase<deleteTag_result, deleteTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTag_result.class, metaDataMap);
    }

    public deleteTag_result() {
    }

    public deleteTag_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTag_result(deleteTag_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteTag_result deepCopy() {
      return new deleteTag_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteTag_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTag_result)
        return this.equals((deleteTag_result)that);
      return false;
    }

    public boolean equals(deleteTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTag_result typedOther = (deleteTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchTags_args implements org.apache.thrift.TBase<searchTags_args, searchTags_args._Fields>, java.io.Serializable, Cloneable   {
	    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTags_args");

	    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I64, (short)1);
	    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)2);
	    private static final org.apache.thrift.protocol.TField TAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagname", org.apache.thrift.protocol.TType.STRING, (short)3);
	    private static final org.apache.thrift.protocol.TField TAGCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagclass", org.apache.thrift.protocol.TType.STRING, (short)4);
	    private static final org.apache.thrift.protocol.TField TAG_SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagSubclass", org.apache.thrift.protocol.TType.STRING, (short)5);
	    private static final org.apache.thrift.protocol.TField DEF_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("defWeight", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
	    private static final org.apache.thrift.protocol.TField CALC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("calcType", org.apache.thrift.protocol.TType.I32, (short)7);
	    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)8);

	    public long tagId;
	    public long appkey;
	    public String tagname;
	    public String tagclass;
	    public String tagSubclass;
	    public double defWeight;
	    public int calcType;
	    public int days;

	    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
	      TAG_ID((short)1, "tagId"),
	      APPKEY((short)2, "appkey"),
	      TAGNAME((short)3, "tagname"),
	      TAGCLASS((short)4, "tagclass"),
	      TAG_SUBCLASS((short)5, "tagSubclass"),
	      DEF_WEIGHT((short)6, "defWeight"),
	      CALC_TYPE((short)7, "calcType"),
	      DAYS((short)8, "days");

	      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

	      static {
	        for (_Fields field : EnumSet.allOf(_Fields.class)) {
	          byName.put(field.getFieldName(), field);
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, or null if its not found.
	       */
	      public static _Fields findByThriftId(int fieldId) {
	        switch(fieldId) {
	          case 1: // TAG_ID
	            return TAG_ID;
	          case 2: // APPKEY
	            return APPKEY;
	          case 3: // TAGNAME
	            return TAGNAME;
	          case 4: // TAGCLASS
	            return TAGCLASS;
	          case 5: // TAG_SUBCLASS
	            return TAG_SUBCLASS;
	          case 6: // DEF_WEIGHT
	            return DEF_WEIGHT;
	          case 7: // CALC_TYPE
	            return CALC_TYPE;
	          case 8: // DAYS
	            return DAYS;
	          default:
	            return null;
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, throwing an exception
	       * if it is not found.
	       */
	      public static _Fields findByThriftIdOrThrow(int fieldId) {
	        _Fields fields = findByThriftId(fieldId);
	        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
	        return fields;
	      }

	      /**
	       * Find the _Fields constant that matches name, or null if its not found.
	       */
	      public static _Fields findByName(String name) {
	        return byName.get(name);
	      }

	      private final short _thriftId;
	      private final String _fieldName;

	      _Fields(short thriftId, String fieldName) {
	        _thriftId = thriftId;
	        _fieldName = fieldName;
	      }

	      public short getThriftFieldId() {
	        return _thriftId;
	      }

	      public String getFieldName() {
	        return _fieldName;
	      }
	    }

	    // isset id assignments
	    private static final int __TAGID_ISSET_ID = 0;
	    private static final int __APPKEY_ISSET_ID = 1;
	    private static final int __DEFWEIGHT_ISSET_ID = 2;
	    private static final int __CALCTYPE_ISSET_ID = 3;
	    private static final int __DAYS_ISSET_ID = 4;
	    private BitSet __isset_bit_vector = new BitSet(5);

	    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	    static {
	      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
	      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
	      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
	      tmpMap.put(_Fields.TAGNAME, new org.apache.thrift.meta_data.FieldMetaData("tagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.TAGCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.TAG_SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagSubclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.DEF_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("defWeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
	      tmpMap.put(_Fields.CALC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("calcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      metaDataMap = Collections.unmodifiableMap(tmpMap);
	      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTags_args.class, metaDataMap);
	    }

	    public searchTags_args() {
	    }

	    public searchTags_args(
	      long tagId,
	      long appkey,
	      String tagname,
	      String tagclass,
	      String tagSubclass,
	      double defWeight,
	      int calcType,
	      int days)
	    {
	      this();
	      this.tagId = tagId;
	      setTagIdIsSet(true);
	      this.appkey = appkey;
	      setAppkeyIsSet(true);
	      this.tagname = tagname;
	      this.tagclass = tagclass;
	      this.tagSubclass = tagSubclass;
	      this.defWeight = defWeight;
	      setDefWeightIsSet(true);
	      this.calcType = calcType;
	      setCalcTypeIsSet(true);
	      this.days = days;
	      setDaysIsSet(true);
	    }

	    /**
	     * Performs a deep copy on <i>other</i>.
	     */
	    public searchTags_args(searchTags_args other) {
	      __isset_bit_vector.clear();
	      __isset_bit_vector.or(other.__isset_bit_vector);
	      this.tagId = other.tagId;
	      this.appkey = other.appkey;
	      if (other.isSetTagname()) {
	        this.tagname = other.tagname;
	      }
	      if (other.isSetTagclass()) {
	        this.tagclass = other.tagclass;
	      }
	      if (other.isSetTagSubclass()) {
	        this.tagSubclass = other.tagSubclass;
	      }
	      this.defWeight = other.defWeight;
	      this.calcType = other.calcType;
	      this.days = other.days;
	    }

	    public searchTags_args deepCopy() {
	      return new searchTags_args(this);
	    }

	    @Override
	    public void clear() {
	      setTagIdIsSet(false);
	      this.tagId = 0;
	      setAppkeyIsSet(false);
	      this.appkey = 0;
	      this.tagname = null;
	      this.tagclass = null;
	      this.tagSubclass = null;
	      setDefWeightIsSet(false);
	      this.defWeight = 0.0;
	      setCalcTypeIsSet(false);
	      this.calcType = 0;
	      setDaysIsSet(false);
	      this.days = 0;
	    }

	    public long getTagId() {
	      return this.tagId;
	    }

	    public searchTags_args setTagId(long tagId) {
	      this.tagId = tagId;
	      setTagIdIsSet(true);
	      return this;
	    }

	    public void unsetTagId() {
	      __isset_bit_vector.clear(__TAGID_ISSET_ID);
	    }

	    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagId() {
	      return __isset_bit_vector.get(__TAGID_ISSET_ID);
	    }

	    public void setTagIdIsSet(boolean value) {
	      __isset_bit_vector.set(__TAGID_ISSET_ID, value);
	    }

	    public long getAppkey() {
	      return this.appkey;
	    }

	    public searchTags_args setAppkey(long appkey) {
	      this.appkey = appkey;
	      setAppkeyIsSet(true);
	      return this;
	    }

	    public void unsetAppkey() {
	      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
	    }

	    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
	    public boolean isSetAppkey() {
	      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
	    }

	    public void setAppkeyIsSet(boolean value) {
	      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
	    }

	    public String getTagname() {
	      return this.tagname;
	    }

	    public searchTags_args setTagname(String tagname) {
	      this.tagname = tagname;
	      return this;
	    }

	    public void unsetTagname() {
	      this.tagname = null;
	    }

	    /** Returns true if field tagname is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagname() {
	      return this.tagname != null;
	    }

	    public void setTagnameIsSet(boolean value) {
	      if (!value) {
	        this.tagname = null;
	      }
	    }

	    public String getTagclass() {
	      return this.tagclass;
	    }

	    public searchTags_args setTagclass(String tagclass) {
	      this.tagclass = tagclass;
	      return this;
	    }

	    public void unsetTagclass() {
	      this.tagclass = null;
	    }

	    /** Returns true if field tagclass is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagclass() {
	      return this.tagclass != null;
	    }

	    public void setTagclassIsSet(boolean value) {
	      if (!value) {
	        this.tagclass = null;
	      }
	    }

	    public String getTagSubclass() {
	      return this.tagSubclass;
	    }

	    public searchTags_args setTagSubclass(String tagSubclass) {
	      this.tagSubclass = tagSubclass;
	      return this;
	    }

	    public void unsetTagSubclass() {
	      this.tagSubclass = null;
	    }

	    /** Returns true if field tagSubclass is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagSubclass() {
	      return this.tagSubclass != null;
	    }

	    public void setTagSubclassIsSet(boolean value) {
	      if (!value) {
	        this.tagSubclass = null;
	      }
	    }

	    public double getDefWeight() {
	      return this.defWeight;
	    }

	    public searchTags_args setDefWeight(double defWeight) {
	      this.defWeight = defWeight;
	      setDefWeightIsSet(true);
	      return this;
	    }

	    public void unsetDefWeight() {
	      __isset_bit_vector.clear(__DEFWEIGHT_ISSET_ID);
	    }

	    /** Returns true if field defWeight is set (has been assigned a value) and false otherwise */
	    public boolean isSetDefWeight() {
	      return __isset_bit_vector.get(__DEFWEIGHT_ISSET_ID);
	    }

	    public void setDefWeightIsSet(boolean value) {
	      __isset_bit_vector.set(__DEFWEIGHT_ISSET_ID, value);
	    }

	    public int getCalcType() {
	      return this.calcType;
	    }

	    public searchTags_args setCalcType(int calcType) {
	      this.calcType = calcType;
	      setCalcTypeIsSet(true);
	      return this;
	    }

	    public void unsetCalcType() {
	      __isset_bit_vector.clear(__CALCTYPE_ISSET_ID);
	    }

	    /** Returns true if field calcType is set (has been assigned a value) and false otherwise */
	    public boolean isSetCalcType() {
	      return __isset_bit_vector.get(__CALCTYPE_ISSET_ID);
	    }

	    public void setCalcTypeIsSet(boolean value) {
	      __isset_bit_vector.set(__CALCTYPE_ISSET_ID, value);
	    }

	    public int getDays() {
	      return this.days;
	    }

	    public searchTags_args setDays(int days) {
	      this.days = days;
	      setDaysIsSet(true);
	      return this;
	    }

	    public void unsetDays() {
	      __isset_bit_vector.clear(__DAYS_ISSET_ID);
	    }

	    /** Returns true if field days is set (has been assigned a value) and false otherwise */
	    public boolean isSetDays() {
	      return __isset_bit_vector.get(__DAYS_ISSET_ID);
	    }

	    public void setDaysIsSet(boolean value) {
	      __isset_bit_vector.set(__DAYS_ISSET_ID, value);
	    }

	    public void setFieldValue(_Fields field, Object value) {
	      switch (field) {
	      case TAG_ID:
	        if (value == null) {
	          unsetTagId();
	        } else {
	          setTagId((Long)value);
	        }
	        break;

	      case APPKEY:
	        if (value == null) {
	          unsetAppkey();
	        } else {
	          setAppkey((Long)value);
	        }
	        break;

	      case TAGNAME:
	        if (value == null) {
	          unsetTagname();
	        } else {
	          setTagname((String)value);
	        }
	        break;

	      case TAGCLASS:
	        if (value == null) {
	          unsetTagclass();
	        } else {
	          setTagclass((String)value);
	        }
	        break;

	      case TAG_SUBCLASS:
	        if (value == null) {
	          unsetTagSubclass();
	        } else {
	          setTagSubclass((String)value);
	        }
	        break;

	      case DEF_WEIGHT:
	        if (value == null) {
	          unsetDefWeight();
	        } else {
	          setDefWeight((Double)value);
	        }
	        break;

	      case CALC_TYPE:
	        if (value == null) {
	          unsetCalcType();
	        } else {
	          setCalcType((Integer)value);
	        }
	        break;

	      case DAYS:
	        if (value == null) {
	          unsetDays();
	        } else {
	          setDays((Integer)value);
	        }
	        break;

	      }
	    }

	    public Object getFieldValue(_Fields field) {
	      switch (field) {
	      case TAG_ID:
	        return new Long(getTagId());

	      case APPKEY:
	        return new Long(getAppkey());

	      case TAGNAME:
	        return getTagname();

	      case TAGCLASS:
	        return getTagclass();

	      case TAG_SUBCLASS:
	        return getTagSubclass();

	      case DEF_WEIGHT:
	        return new Double(getDefWeight());

	      case CALC_TYPE:
	        return new Integer(getCalcType());

	      case DAYS:
	        return new Integer(getDays());

	      }
	      throw new IllegalStateException();
	    }

	    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	    public boolean isSet(_Fields field) {
	      if (field == null) {
	        throw new IllegalArgumentException();
	      }

	      switch (field) {
	      case TAG_ID:
	        return isSetTagId();
	      case APPKEY:
	        return isSetAppkey();
	      case TAGNAME:
	        return isSetTagname();
	      case TAGCLASS:
	        return isSetTagclass();
	      case TAG_SUBCLASS:
	        return isSetTagSubclass();
	      case DEF_WEIGHT:
	        return isSetDefWeight();
	      case CALC_TYPE:
	        return isSetCalcType();
	      case DAYS:
	        return isSetDays();
	      }
	      throw new IllegalStateException();
	    }

	    @Override
	    public boolean equals(Object that) {
	      if (that == null)
	        return false;
	      if (that instanceof searchTags_args)
	        return this.equals((searchTags_args)that);
	      return false;
	    }

	    public boolean equals(searchTags_args that) {
	      if (that == null)
	        return false;

	      boolean this_present_tagId = true;
	      boolean that_present_tagId = true;
	      if (this_present_tagId || that_present_tagId) {
	        if (!(this_present_tagId && that_present_tagId))
	          return false;
	        if (this.tagId != that.tagId)
	          return false;
	      }

	      boolean this_present_appkey = true;
	      boolean that_present_appkey = true;
	      if (this_present_appkey || that_present_appkey) {
	        if (!(this_present_appkey && that_present_appkey))
	          return false;
	        if (this.appkey != that.appkey)
	          return false;
	      }

	      boolean this_present_tagname = true && this.isSetTagname();
	      boolean that_present_tagname = true && that.isSetTagname();
	      if (this_present_tagname || that_present_tagname) {
	        if (!(this_present_tagname && that_present_tagname))
	          return false;
	        if (!this.tagname.equals(that.tagname))
	          return false;
	      }

	      boolean this_present_tagclass = true && this.isSetTagclass();
	      boolean that_present_tagclass = true && that.isSetTagclass();
	      if (this_present_tagclass || that_present_tagclass) {
	        if (!(this_present_tagclass && that_present_tagclass))
	          return false;
	        if (!this.tagclass.equals(that.tagclass))
	          return false;
	      }

	      boolean this_present_tagSubclass = true && this.isSetTagSubclass();
	      boolean that_present_tagSubclass = true && that.isSetTagSubclass();
	      if (this_present_tagSubclass || that_present_tagSubclass) {
	        if (!(this_present_tagSubclass && that_present_tagSubclass))
	          return false;
	        if (!this.tagSubclass.equals(that.tagSubclass))
	          return false;
	      }

	      boolean this_present_defWeight = true;
	      boolean that_present_defWeight = true;
	      if (this_present_defWeight || that_present_defWeight) {
	        if (!(this_present_defWeight && that_present_defWeight))
	          return false;
	        if (this.defWeight != that.defWeight)
	          return false;
	      }

	      boolean this_present_calcType = true;
	      boolean that_present_calcType = true;
	      if (this_present_calcType || that_present_calcType) {
	        if (!(this_present_calcType && that_present_calcType))
	          return false;
	        if (this.calcType != that.calcType)
	          return false;
	      }

	      boolean this_present_days = true;
	      boolean that_present_days = true;
	      if (this_present_days || that_present_days) {
	        if (!(this_present_days && that_present_days))
	          return false;
	        if (this.days != that.days)
	          return false;
	      }

	      return true;
	    }

	    @Override
	    public int hashCode() {
	      return 0;
	    }

	    public int compareTo(searchTags_args other) {
	      if (!getClass().equals(other.getClass())) {
	        return getClass().getName().compareTo(other.getClass().getName());
	      }

	      int lastComparison = 0;
	      searchTags_args typedOther = (searchTags_args)other;

	      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagId()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetAppkey()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagname()).compareTo(typedOther.isSetTagname());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagname()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagname, typedOther.tagname);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagclass()).compareTo(typedOther.isSetTagclass());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagclass()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagclass, typedOther.tagclass);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagSubclass()).compareTo(typedOther.isSetTagSubclass());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagSubclass()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagSubclass, typedOther.tagSubclass);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetDefWeight()).compareTo(typedOther.isSetDefWeight());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetDefWeight()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defWeight, typedOther.defWeight);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetCalcType()).compareTo(typedOther.isSetCalcType());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetCalcType()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calcType, typedOther.calcType);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetDays()).compareTo(typedOther.isSetDays());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetDays()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, typedOther.days);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      return 0;
	    }

	    public _Fields fieldForId(int fieldId) {
	      return _Fields.findByThriftId(fieldId);
	    }

	    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
	      org.apache.thrift.protocol.TField field;
	      iprot.readStructBegin();
	      while (true)
	      {
	        field = iprot.readFieldBegin();
	        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
	          break;
	        }
	        switch (field.id) {
	          case 1: // TAG_ID
	            if (field.type == org.apache.thrift.protocol.TType.I64) {
	              this.tagId = iprot.readI64();
	              setTagIdIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 2: // APPKEY
	            if (field.type == org.apache.thrift.protocol.TType.I64) {
	              this.appkey = iprot.readI64();
	              setAppkeyIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 3: // TAGNAME
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagname = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 4: // TAGCLASS
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagclass = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 5: // TAG_SUBCLASS
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.tagSubclass = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 6: // DEF_WEIGHT
	            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
	              this.defWeight = iprot.readDouble();
	              setDefWeightIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 7: // CALC_TYPE
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.calcType = iprot.readI32();
	              setCalcTypeIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 8: // DAYS
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.days = iprot.readI32();
	              setDaysIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          default:
	            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	        }
	        iprot.readFieldEnd();
	      }
	      iprot.readStructEnd();

	      // check for required fields of primitive type, which can't be checked in the validate method
	      validate();
	    }

	    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
	      validate();

	      oprot.writeStructBegin(STRUCT_DESC);
	      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
	      oprot.writeI64(this.tagId);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
	      oprot.writeI64(this.appkey);
	      oprot.writeFieldEnd();
	      if (this.tagname != null) {
	        oprot.writeFieldBegin(TAGNAME_FIELD_DESC);
	        oprot.writeString(this.tagname);
	        oprot.writeFieldEnd();
	      }
	      if (this.tagclass != null) {
	        oprot.writeFieldBegin(TAGCLASS_FIELD_DESC);
	        oprot.writeString(this.tagclass);
	        oprot.writeFieldEnd();
	      }
	      if (this.tagSubclass != null) {
	        oprot.writeFieldBegin(TAG_SUBCLASS_FIELD_DESC);
	        oprot.writeString(this.tagSubclass);
	        oprot.writeFieldEnd();
	      }
	      oprot.writeFieldBegin(DEF_WEIGHT_FIELD_DESC);
	      oprot.writeDouble(this.defWeight);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(CALC_TYPE_FIELD_DESC);
	      oprot.writeI32(this.calcType);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(DAYS_FIELD_DESC);
	      oprot.writeI32(this.days);
	      oprot.writeFieldEnd();
	      oprot.writeFieldStop();
	      oprot.writeStructEnd();
	    }

	    @Override
	    public String toString() {
	      StringBuilder sb = new StringBuilder("searchTags_args(");
	      boolean first = true;

	      sb.append("tagId:");
	      sb.append(this.tagId);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("appkey:");
	      sb.append(this.appkey);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagname:");
	      if (this.tagname == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagname);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagclass:");
	      if (this.tagclass == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagclass);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagSubclass:");
	      if (this.tagSubclass == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.tagSubclass);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("defWeight:");
	      sb.append(this.defWeight);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("calcType:");
	      sb.append(this.calcType);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("days:");
	      sb.append(this.days);
	      first = false;
	      sb.append(")");
	      return sb.toString();
	    }

	    public void validate() throws org.apache.thrift.TException {
	      // check for required fields
	    }

	    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
	      try {
	        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
	      try {
	        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
	        __isset_bit_vector = new BitSet(1);
	        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	  }

  public static class searchTags_result implements org.apache.thrift.TBase<searchTags_result, searchTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTags_result.class, metaDataMap);
    }

    public searchTags_result() {
    }

    public searchTags_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTags_result(searchTags_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchTags_result deepCopy() {
      return new searchTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchTags_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTags_result)
        return this.equals((searchTags_result)that);
      return false;
    }

    public boolean equals(searchTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTags_result typedOther = (searchTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addGroup_args implements org.apache.thrift.TBase<addGroup_args, addGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGroup_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long appkey;
    public String groupName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      GROUP_NAME((short)2, "groupName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // GROUP_NAME
            return GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroup_args.class, metaDataMap);
    }

    public addGroup_args() {
    }

    public addGroup_args(
      long appkey,
      String groupName)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.groupName = groupName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGroup_args(addGroup_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
    }

    public addGroup_args deepCopy() {
      return new addGroup_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.groupName = null;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public addGroup_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getGroupName() {
      return this.groupName;
    }

    public addGroup_args setGroupName(String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case GROUP_NAME:
        return getGroupName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case GROUP_NAME:
        return isSetGroupName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGroup_args)
        return this.equals((addGroup_args)that);
      return false;
    }

    public boolean equals(addGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addGroup_args typedOther = (addGroup_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      if (this.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.groupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGroup_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addGroup_result implements org.apache.thrift.TBase<addGroup_result, addGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroup_result.class, metaDataMap);
    }

    public addGroup_result() {
    }

    public addGroup_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGroup_result(addGroup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addGroup_result deepCopy() {
      return new addGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addGroup_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGroup_result)
        return this.equals((addGroup_result)that);
      return false;
    }

    public boolean equals(addGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addGroup_result typedOther = (addGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyGroup_args implements org.apache.thrift.TBase<modifyGroup_args, modifyGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long groupId;
    public String groupName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      GROUP_NAME((short)2, "groupName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // GROUP_NAME
            return GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyGroup_args.class, metaDataMap);
    }

    public modifyGroup_args() {
    }

    public modifyGroup_args(
      long groupId,
      String groupName)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.groupName = groupName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyGroup_args(modifyGroup_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.groupId = other.groupId;
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
    }

    public modifyGroup_args deepCopy() {
      return new modifyGroup_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.groupName = null;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public modifyGroup_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bit_vector.clear(__GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return __isset_bit_vector.get(__GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bit_vector.set(__GROUPID_ISSET_ID, value);
    }

    public String getGroupName() {
      return this.groupName;
    }

    public modifyGroup_args setGroupName(String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return new Long(getGroupId());

      case GROUP_NAME:
        return getGroupName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case GROUP_NAME:
        return isSetGroupName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyGroup_args)
        return this.equals((modifyGroup_args)that);
      return false;
    }

    public boolean equals(modifyGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyGroup_args typedOther = (modifyGroup_args)other;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(typedOther.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, typedOther.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.groupId = iprot.readI64();
              setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI64(this.groupId);
      oprot.writeFieldEnd();
      if (this.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.groupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyGroup_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyGroup_result implements org.apache.thrift.TBase<modifyGroup_result, modifyGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyGroup_result.class, metaDataMap);
    }

    public modifyGroup_result() {
    }

    public modifyGroup_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyGroup_result(modifyGroup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public modifyGroup_result deepCopy() {
      return new modifyGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public modifyGroup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyGroup_result)
        return this.equals((modifyGroup_result)that);
      return false;
    }

    public boolean equals(modifyGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyGroup_result typedOther = (modifyGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteGroup_args implements org.apache.thrift.TBase<deleteGroup_args, deleteGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);

    public long groupId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGroup_args.class, metaDataMap);
    }

    public deleteGroup_args() {
    }

    public deleteGroup_args(
      long groupId)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGroup_args(deleteGroup_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.groupId = other.groupId;
    }

    public deleteGroup_args deepCopy() {
      return new deleteGroup_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public deleteGroup_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bit_vector.clear(__GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return __isset_bit_vector.get(__GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bit_vector.set(__GROUPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return new Long(getGroupId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGroup_args)
        return this.equals((deleteGroup_args)that);
      return false;
    }

    public boolean equals(deleteGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteGroup_args typedOther = (deleteGroup_args)other;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(typedOther.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, typedOther.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.groupId = iprot.readI64();
              setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI64(this.groupId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGroup_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteGroup_result implements org.apache.thrift.TBase<deleteGroup_result, deleteGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGroup_result.class, metaDataMap);
    }

    public deleteGroup_result() {
    }

    public deleteGroup_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGroup_result(deleteGroup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteGroup_result deepCopy() {
      return new deleteGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteGroup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGroup_result)
        return this.equals((deleteGroup_result)that);
      return false;
    }

    public boolean equals(deleteGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteGroup_result typedOther = (deleteGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchGroups_args implements org.apache.thrift.TBase<searchGroups_args, searchGroups_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchGroups_args");

    private static final org.apache.thrift.protocol.TField JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String jsonParam;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_PARAM((short)1, "jsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_PARAM
            return JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("jsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchGroups_args.class, metaDataMap);
    }

    public searchGroups_args() {
    }

    public searchGroups_args(
      String jsonParam)
    {
      this();
      this.jsonParam = jsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchGroups_args(searchGroups_args other) {
      if (other.isSetJsonParam()) {
        this.jsonParam = other.jsonParam;
      }
    }

    public searchGroups_args deepCopy() {
      return new searchGroups_args(this);
    }

    @Override
    public void clear() {
      this.jsonParam = null;
    }

    public String getJsonParam() {
      return this.jsonParam;
    }

    public searchGroups_args setJsonParam(String jsonParam) {
      this.jsonParam = jsonParam;
      return this;
    }

    public void unsetJsonParam() {
      this.jsonParam = null;
    }

    /** Returns true if field jsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParam() {
      return this.jsonParam != null;
    }

    public void setJsonParamIsSet(boolean value) {
      if (!value) {
        this.jsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_PARAM:
        if (value == null) {
          unsetJsonParam();
        } else {
          setJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_PARAM:
        return getJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_PARAM:
        return isSetJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchGroups_args)
        return this.equals((searchGroups_args)that);
      return false;
    }

    public boolean equals(searchGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonParam = true && this.isSetJsonParam();
      boolean that_present_jsonParam = true && that.isSetJsonParam();
      if (this_present_jsonParam || that_present_jsonParam) {
        if (!(this_present_jsonParam && that_present_jsonParam))
          return false;
        if (!this.jsonParam.equals(that.jsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchGroups_args typedOther = (searchGroups_args)other;

      lastComparison = Boolean.valueOf(isSetJsonParam()).compareTo(typedOther.isSetJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParam, typedOther.jsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JSON_PARAM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.jsonParam = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.jsonParam != null) {
        oprot.writeFieldBegin(JSON_PARAM_FIELD_DESC);
        oprot.writeString(this.jsonParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchGroups_args(");
      boolean first = true;

      sb.append("jsonParam:");
      if (this.jsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchGroups_result implements org.apache.thrift.TBase<searchGroups_result, searchGroups_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchGroups_result.class, metaDataMap);
    }

    public searchGroups_result() {
    }

    public searchGroups_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchGroups_result(searchGroups_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchGroups_result deepCopy() {
      return new searchGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchGroups_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchGroups_result)
        return this.equals((searchGroups_result)that);
      return false;
    }

    public boolean equals(searchGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchGroups_result typedOther = (searchGroups_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addWgtConfig_args implements org.apache.thrift.TBase<addWgtConfig_args, addWgtConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWgtConfig_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemid", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACTIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionid", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ITEMTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemtype", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)7);

    public long tagId;
    public long groupId;
    public String itemid;
    public String actionid;
    public String itemtype;
    public double weight;
    public String rule;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID((short)1, "tagId"),
      GROUP_ID((short)2, "groupId"),
      ITEMID((short)3, "itemid"),
      ACTIONID((short)4, "actionid"),
      ITEMTYPE((short)5, "itemtype"),
      WEIGHT((short)6, "weight"),
      RULE((short)7, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID
            return TAG_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          case 3: // ITEMID
            return ITEMID;
          case 4: // ACTIONID
            return ACTIONID;
          case 5: // ITEMTYPE
            return ITEMTYPE;
          case 6: // WEIGHT
            return WEIGHT;
          case 7: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAGID_ISSET_ID = 0;
    private static final int __GROUPID_ISSET_ID = 1;
    private static final int __WEIGHT_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEMID, new org.apache.thrift.meta_data.FieldMetaData("itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIONID, new org.apache.thrift.meta_data.FieldMetaData("actionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEMTYPE, new org.apache.thrift.meta_data.FieldMetaData("itemtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWgtConfig_args.class, metaDataMap);
    }

    public addWgtConfig_args() {
    }

    public addWgtConfig_args(
      long tagId,
      long groupId,
      String itemid,
      String actionid,
      String itemtype,
      double weight,
      String rule)
    {
      this();
      this.tagId = tagId;
      setTagIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.itemid = itemid;
      this.actionid = actionid;
      this.itemtype = itemtype;
      this.weight = weight;
      setWeightIsSet(true);
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWgtConfig_args(addWgtConfig_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.tagId = other.tagId;
      this.groupId = other.groupId;
      if (other.isSetItemid()) {
        this.itemid = other.itemid;
      }
      if (other.isSetActionid()) {
        this.actionid = other.actionid;
      }
      if (other.isSetItemtype()) {
        this.itemtype = other.itemtype;
      }
      this.weight = other.weight;
      if (other.isSetRule()) {
        this.rule = other.rule;
      }
    }

    public addWgtConfig_args deepCopy() {
      return new addWgtConfig_args(this);
    }

    @Override
    public void clear() {
      setTagIdIsSet(false);
      this.tagId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.itemid = null;
      this.actionid = null;
      this.itemtype = null;
      setWeightIsSet(false);
      this.weight = 0.0;
      this.rule = null;
    }

    public long getTagId() {
      return this.tagId;
    }

    public addWgtConfig_args setTagId(long tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
      return this;
    }

    public void unsetTagId() {
      __isset_bit_vector.clear(__TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return __isset_bit_vector.get(__TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bit_vector.set(__TAGID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public addWgtConfig_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bit_vector.clear(__GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return __isset_bit_vector.get(__GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bit_vector.set(__GROUPID_ISSET_ID, value);
    }

    public String getItemid() {
      return this.itemid;
    }

    public addWgtConfig_args setItemid(String itemid) {
      this.itemid = itemid;
      return this;
    }

    public void unsetItemid() {
      this.itemid = null;
    }

    /** Returns true if field itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetItemid() {
      return this.itemid != null;
    }

    public void setItemidIsSet(boolean value) {
      if (!value) {
        this.itemid = null;
      }
    }

    public String getActionid() {
      return this.actionid;
    }

    public addWgtConfig_args setActionid(String actionid) {
      this.actionid = actionid;
      return this;
    }

    public void unsetActionid() {
      this.actionid = null;
    }

    /** Returns true if field actionid is set (has been assigned a value) and false otherwise */
    public boolean isSetActionid() {
      return this.actionid != null;
    }

    public void setActionidIsSet(boolean value) {
      if (!value) {
        this.actionid = null;
      }
    }

    public String getItemtype() {
      return this.itemtype;
    }

    public addWgtConfig_args setItemtype(String itemtype) {
      this.itemtype = itemtype;
      return this;
    }

    public void unsetItemtype() {
      this.itemtype = null;
    }

    /** Returns true if field itemtype is set (has been assigned a value) and false otherwise */
    public boolean isSetItemtype() {
      return this.itemtype != null;
    }

    public void setItemtypeIsSet(boolean value) {
      if (!value) {
        this.itemtype = null;
      }
    }

    public double getWeight() {
      return this.weight;
    }

    public addWgtConfig_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
    }

    public String getRule() {
      return this.rule;
    }

    public addWgtConfig_args setRule(String rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case ITEMID:
        if (value == null) {
          unsetItemid();
        } else {
          setItemid((String)value);
        }
        break;

      case ACTIONID:
        if (value == null) {
          unsetActionid();
        } else {
          setActionid((String)value);
        }
        break;

      case ITEMTYPE:
        if (value == null) {
          unsetItemtype();
        } else {
          setItemtype((String)value);
        }
        break;

      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID:
        return new Long(getTagId());

      case GROUP_ID:
        return new Long(getGroupId());

      case ITEMID:
        return getItemid();

      case ACTIONID:
        return getActionid();

      case ITEMTYPE:
        return getItemtype();

      case WEIGHT:
        return new Double(getWeight());

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID:
        return isSetTagId();
      case GROUP_ID:
        return isSetGroupId();
      case ITEMID:
        return isSetItemid();
      case ACTIONID:
        return isSetActionid();
      case ITEMTYPE:
        return isSetItemtype();
      case WEIGHT:
        return isSetWeight();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWgtConfig_args)
        return this.equals((addWgtConfig_args)that);
      return false;
    }

    public boolean equals(addWgtConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_itemid = true && this.isSetItemid();
      boolean that_present_itemid = true && that.isSetItemid();
      if (this_present_itemid || that_present_itemid) {
        if (!(this_present_itemid && that_present_itemid))
          return false;
        if (!this.itemid.equals(that.itemid))
          return false;
      }

      boolean this_present_actionid = true && this.isSetActionid();
      boolean that_present_actionid = true && that.isSetActionid();
      if (this_present_actionid || that_present_actionid) {
        if (!(this_present_actionid && that_present_actionid))
          return false;
        if (!this.actionid.equals(that.actionid))
          return false;
      }

      boolean this_present_itemtype = true && this.isSetItemtype();
      boolean that_present_itemtype = true && that.isSetItemtype();
      if (this_present_itemtype || that_present_itemtype) {
        if (!(this_present_itemtype && that_present_itemtype))
          return false;
        if (!this.itemtype.equals(that.itemtype))
          return false;
      }

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addWgtConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addWgtConfig_args typedOther = (addWgtConfig_args)other;

      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(typedOther.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, typedOther.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemid()).compareTo(typedOther.isSetItemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemid, typedOther.itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionid()).compareTo(typedOther.isSetActionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionid, typedOther.actionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemtype()).compareTo(typedOther.isSetItemtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemtype, typedOther.itemtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TAG_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.tagId = iprot.readI64();
              setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.groupId = iprot.readI64();
              setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ITEMID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.itemid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ACTIONID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.actionid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ITEMTYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.itemtype = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WEIGHT
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.weight = iprot.readDouble();
              setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // RULE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.rule = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
      oprot.writeI64(this.tagId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI64(this.groupId);
      oprot.writeFieldEnd();
      if (this.itemid != null) {
        oprot.writeFieldBegin(ITEMID_FIELD_DESC);
        oprot.writeString(this.itemid);
        oprot.writeFieldEnd();
      }
      if (this.actionid != null) {
        oprot.writeFieldBegin(ACTIONID_FIELD_DESC);
        oprot.writeString(this.actionid);
        oprot.writeFieldEnd();
      }
      if (this.itemtype != null) {
        oprot.writeFieldBegin(ITEMTYPE_FIELD_DESC);
        oprot.writeString(this.itemtype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeDouble(this.weight);
      oprot.writeFieldEnd();
      if (this.rule != null) {
        oprot.writeFieldBegin(RULE_FIELD_DESC);
        oprot.writeString(this.rule);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWgtConfig_args(");
      boolean first = true;

      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemid:");
      if (this.itemid == null) {
        sb.append("null");
      } else {
        sb.append(this.itemid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionid:");
      if (this.actionid == null) {
        sb.append("null");
      } else {
        sb.append(this.actionid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemtype:");
      if (this.itemtype == null) {
        sb.append("null");
      } else {
        sb.append(this.itemtype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addWgtConfig_result implements org.apache.thrift.TBase<addWgtConfig_result, addWgtConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWgtConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWgtConfig_result.class, metaDataMap);
    }

    public addWgtConfig_result() {
    }

    public addWgtConfig_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWgtConfig_result(addWgtConfig_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addWgtConfig_result deepCopy() {
      return new addWgtConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addWgtConfig_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWgtConfig_result)
        return this.equals((addWgtConfig_result)that);
      return false;
    }

    public boolean equals(addWgtConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addWgtConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addWgtConfig_result typedOther = (addWgtConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWgtConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyWgtConfig_args implements org.apache.thrift.TBase<modifyWgtConfig_args, modifyWgtConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyWgtConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemid", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACTIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionid", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ITEMTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemtype", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)7);

    public long configId;
    public long groupId;
    public String itemid;
    public String actionid;
    public String itemtype;
    public double weight;
    public String rule;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_ID((short)1, "configId"),
      GROUP_ID((short)2, "groupId"),
      ITEMID((short)3, "itemid"),
      ACTIONID((short)4, "actionid"),
      ITEMTYPE((short)5, "itemtype"),
      WEIGHT((short)6, "weight"),
      RULE((short)7, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_ID
            return CONFIG_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          case 3: // ITEMID
            return ITEMID;
          case 4: // ACTIONID
            return ACTIONID;
          case 5: // ITEMTYPE
            return ITEMTYPE;
          case 6: // WEIGHT
            return WEIGHT;
          case 7: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIGID_ISSET_ID = 0;
    private static final int __GROUPID_ISSET_ID = 1;
    private static final int __WEIGHT_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEMID, new org.apache.thrift.meta_data.FieldMetaData("itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIONID, new org.apache.thrift.meta_data.FieldMetaData("actionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEMTYPE, new org.apache.thrift.meta_data.FieldMetaData("itemtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyWgtConfig_args.class, metaDataMap);
    }

    public modifyWgtConfig_args() {
    }

    public modifyWgtConfig_args(
      long configId,
      long groupId,
      String itemid,
      String actionid,
      String itemtype,
      double weight,
      String rule)
    {
      this();
      this.configId = configId;
      setConfigIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.itemid = itemid;
      this.actionid = actionid;
      this.itemtype = itemtype;
      this.weight = weight;
      setWeightIsSet(true);
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyWgtConfig_args(modifyWgtConfig_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.configId = other.configId;
      this.groupId = other.groupId;
      if (other.isSetItemid()) {
        this.itemid = other.itemid;
      }
      if (other.isSetActionid()) {
        this.actionid = other.actionid;
      }
      if (other.isSetItemtype()) {
        this.itemtype = other.itemtype;
      }
      this.weight = other.weight;
      if (other.isSetRule()) {
        this.rule = other.rule;
      }
    }

    public modifyWgtConfig_args deepCopy() {
      return new modifyWgtConfig_args(this);
    }

    @Override
    public void clear() {
      setConfigIdIsSet(false);
      this.configId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.itemid = null;
      this.actionid = null;
      this.itemtype = null;
      setWeightIsSet(false);
      this.weight = 0.0;
      this.rule = null;
    }

    public long getConfigId() {
      return this.configId;
    }

    public modifyWgtConfig_args setConfigId(long configId) {
      this.configId = configId;
      setConfigIdIsSet(true);
      return this;
    }

    public void unsetConfigId() {
      __isset_bit_vector.clear(__CONFIGID_ISSET_ID);
    }

    /** Returns true if field configId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigId() {
      return __isset_bit_vector.get(__CONFIGID_ISSET_ID);
    }

    public void setConfigIdIsSet(boolean value) {
      __isset_bit_vector.set(__CONFIGID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public modifyWgtConfig_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bit_vector.clear(__GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return __isset_bit_vector.get(__GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bit_vector.set(__GROUPID_ISSET_ID, value);
    }

    public String getItemid() {
      return this.itemid;
    }

    public modifyWgtConfig_args setItemid(String itemid) {
      this.itemid = itemid;
      return this;
    }

    public void unsetItemid() {
      this.itemid = null;
    }

    /** Returns true if field itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetItemid() {
      return this.itemid != null;
    }

    public void setItemidIsSet(boolean value) {
      if (!value) {
        this.itemid = null;
      }
    }

    public String getActionid() {
      return this.actionid;
    }

    public modifyWgtConfig_args setActionid(String actionid) {
      this.actionid = actionid;
      return this;
    }

    public void unsetActionid() {
      this.actionid = null;
    }

    /** Returns true if field actionid is set (has been assigned a value) and false otherwise */
    public boolean isSetActionid() {
      return this.actionid != null;
    }

    public void setActionidIsSet(boolean value) {
      if (!value) {
        this.actionid = null;
      }
    }

    public String getItemtype() {
      return this.itemtype;
    }

    public modifyWgtConfig_args setItemtype(String itemtype) {
      this.itemtype = itemtype;
      return this;
    }

    public void unsetItemtype() {
      this.itemtype = null;
    }

    /** Returns true if field itemtype is set (has been assigned a value) and false otherwise */
    public boolean isSetItemtype() {
      return this.itemtype != null;
    }

    public void setItemtypeIsSet(boolean value) {
      if (!value) {
        this.itemtype = null;
      }
    }

    public double getWeight() {
      return this.weight;
    }

    public modifyWgtConfig_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
    }

    public String getRule() {
      return this.rule;
    }

    public modifyWgtConfig_args setRule(String rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_ID:
        if (value == null) {
          unsetConfigId();
        } else {
          setConfigId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case ITEMID:
        if (value == null) {
          unsetItemid();
        } else {
          setItemid((String)value);
        }
        break;

      case ACTIONID:
        if (value == null) {
          unsetActionid();
        } else {
          setActionid((String)value);
        }
        break;

      case ITEMTYPE:
        if (value == null) {
          unsetItemtype();
        } else {
          setItemtype((String)value);
        }
        break;

      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_ID:
        return new Long(getConfigId());

      case GROUP_ID:
        return new Long(getGroupId());

      case ITEMID:
        return getItemid();

      case ACTIONID:
        return getActionid();

      case ITEMTYPE:
        return getItemtype();

      case WEIGHT:
        return new Double(getWeight());

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_ID:
        return isSetConfigId();
      case GROUP_ID:
        return isSetGroupId();
      case ITEMID:
        return isSetItemid();
      case ACTIONID:
        return isSetActionid();
      case ITEMTYPE:
        return isSetItemtype();
      case WEIGHT:
        return isSetWeight();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyWgtConfig_args)
        return this.equals((modifyWgtConfig_args)that);
      return false;
    }

    public boolean equals(modifyWgtConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configId = true;
      boolean that_present_configId = true;
      if (this_present_configId || that_present_configId) {
        if (!(this_present_configId && that_present_configId))
          return false;
        if (this.configId != that.configId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_itemid = true && this.isSetItemid();
      boolean that_present_itemid = true && that.isSetItemid();
      if (this_present_itemid || that_present_itemid) {
        if (!(this_present_itemid && that_present_itemid))
          return false;
        if (!this.itemid.equals(that.itemid))
          return false;
      }

      boolean this_present_actionid = true && this.isSetActionid();
      boolean that_present_actionid = true && that.isSetActionid();
      if (this_present_actionid || that_present_actionid) {
        if (!(this_present_actionid && that_present_actionid))
          return false;
        if (!this.actionid.equals(that.actionid))
          return false;
      }

      boolean this_present_itemtype = true && this.isSetItemtype();
      boolean that_present_itemtype = true && that.isSetItemtype();
      if (this_present_itemtype || that_present_itemtype) {
        if (!(this_present_itemtype && that_present_itemtype))
          return false;
        if (!this.itemtype.equals(that.itemtype))
          return false;
      }

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyWgtConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyWgtConfig_args typedOther = (modifyWgtConfig_args)other;

      lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(typedOther.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, typedOther.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemid()).compareTo(typedOther.isSetItemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemid, typedOther.itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionid()).compareTo(typedOther.isSetActionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionid, typedOther.actionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemtype()).compareTo(typedOther.isSetItemtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemtype, typedOther.itemtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CONFIG_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.configId = iprot.readI64();
              setConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.groupId = iprot.readI64();
              setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ITEMID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.itemid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ACTIONID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.actionid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ITEMTYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.itemtype = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WEIGHT
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.weight = iprot.readDouble();
              setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // RULE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.rule = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
      oprot.writeI64(this.configId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI64(this.groupId);
      oprot.writeFieldEnd();
      if (this.itemid != null) {
        oprot.writeFieldBegin(ITEMID_FIELD_DESC);
        oprot.writeString(this.itemid);
        oprot.writeFieldEnd();
      }
      if (this.actionid != null) {
        oprot.writeFieldBegin(ACTIONID_FIELD_DESC);
        oprot.writeString(this.actionid);
        oprot.writeFieldEnd();
      }
      if (this.itemtype != null) {
        oprot.writeFieldBegin(ITEMTYPE_FIELD_DESC);
        oprot.writeString(this.itemtype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeDouble(this.weight);
      oprot.writeFieldEnd();
      if (this.rule != null) {
        oprot.writeFieldBegin(RULE_FIELD_DESC);
        oprot.writeString(this.rule);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyWgtConfig_args(");
      boolean first = true;

      sb.append("configId:");
      sb.append(this.configId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemid:");
      if (this.itemid == null) {
        sb.append("null");
      } else {
        sb.append(this.itemid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionid:");
      if (this.actionid == null) {
        sb.append("null");
      } else {
        sb.append(this.actionid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemtype:");
      if (this.itemtype == null) {
        sb.append("null");
      } else {
        sb.append(this.itemtype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyWgtConfig_result implements org.apache.thrift.TBase<modifyWgtConfig_result, modifyWgtConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyWgtConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyWgtConfig_result.class, metaDataMap);
    }

    public modifyWgtConfig_result() {
    }

    public modifyWgtConfig_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyWgtConfig_result(modifyWgtConfig_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public modifyWgtConfig_result deepCopy() {
      return new modifyWgtConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public modifyWgtConfig_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyWgtConfig_result)
        return this.equals((modifyWgtConfig_result)that);
      return false;
    }

    public boolean equals(modifyWgtConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyWgtConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyWgtConfig_result typedOther = (modifyWgtConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyWgtConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteWgtConfig_args implements org.apache.thrift.TBase<deleteWgtConfig_args, deleteWgtConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteWgtConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.I64, (short)1);

    public long configId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_ID((short)1, "configId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_ID
            return CONFIG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIGID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteWgtConfig_args.class, metaDataMap);
    }

    public deleteWgtConfig_args() {
    }

    public deleteWgtConfig_args(
      long configId)
    {
      this();
      this.configId = configId;
      setConfigIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteWgtConfig_args(deleteWgtConfig_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.configId = other.configId;
    }

    public deleteWgtConfig_args deepCopy() {
      return new deleteWgtConfig_args(this);
    }

    @Override
    public void clear() {
      setConfigIdIsSet(false);
      this.configId = 0;
    }

    public long getConfigId() {
      return this.configId;
    }

    public deleteWgtConfig_args setConfigId(long configId) {
      this.configId = configId;
      setConfigIdIsSet(true);
      return this;
    }

    public void unsetConfigId() {
      __isset_bit_vector.clear(__CONFIGID_ISSET_ID);
    }

    /** Returns true if field configId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigId() {
      return __isset_bit_vector.get(__CONFIGID_ISSET_ID);
    }

    public void setConfigIdIsSet(boolean value) {
      __isset_bit_vector.set(__CONFIGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_ID:
        if (value == null) {
          unsetConfigId();
        } else {
          setConfigId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_ID:
        return new Long(getConfigId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_ID:
        return isSetConfigId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteWgtConfig_args)
        return this.equals((deleteWgtConfig_args)that);
      return false;
    }

    public boolean equals(deleteWgtConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configId = true;
      boolean that_present_configId = true;
      if (this_present_configId || that_present_configId) {
        if (!(this_present_configId && that_present_configId))
          return false;
        if (this.configId != that.configId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteWgtConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteWgtConfig_args typedOther = (deleteWgtConfig_args)other;

      lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CONFIG_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.configId = iprot.readI64();
              setConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
      oprot.writeI64(this.configId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteWgtConfig_args(");
      boolean first = true;

      sb.append("configId:");
      sb.append(this.configId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteWgtConfig_result implements org.apache.thrift.TBase<deleteWgtConfig_result, deleteWgtConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteWgtConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteWgtConfig_result.class, metaDataMap);
    }

    public deleteWgtConfig_result() {
    }

    public deleteWgtConfig_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteWgtConfig_result(deleteWgtConfig_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteWgtConfig_result deepCopy() {
      return new deleteWgtConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteWgtConfig_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteWgtConfig_result)
        return this.equals((deleteWgtConfig_result)that);
      return false;
    }

    public boolean equals(deleteWgtConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteWgtConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteWgtConfig_result typedOther = (deleteWgtConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteWgtConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchWgtConfigs_args implements org.apache.thrift.TBase<searchWgtConfigs_args, searchWgtConfigs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchWgtConfigs_args");

    private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemid", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACTIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionid", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ITEMTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemtype", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)9);

    public long configId;
    public long tagId;
    public long groupId;
    public String itemid;
    public String actionid;
    public String itemtype;
    public double weight;
    public int page;
    public int size;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_ID((short)1, "configId"),
      TAG_ID((short)2, "tagId"),
      GROUP_ID((short)3, "groupId"),
      ITEMID((short)4, "itemid"),
      ACTIONID((short)5, "actionid"),
      ITEMTYPE((short)6, "itemtype"),
      WEIGHT((short)7, "weight"),
      PAGE((short)8, "page"),
      SIZE((short)9, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_ID
            return CONFIG_ID;
          case 2: // TAG_ID
            return TAG_ID;
          case 3: // GROUP_ID
            return GROUP_ID;
          case 4: // ITEMID
            return ITEMID;
          case 5: // ACTIONID
            return ACTIONID;
          case 6: // ITEMTYPE
            return ITEMTYPE;
          case 7: // WEIGHT
            return WEIGHT;
          case 8: // PAGE
            return PAGE;
          case 9: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIGID_ISSET_ID = 0;
    private static final int __TAGID_ISSET_ID = 1;
    private static final int __GROUPID_ISSET_ID = 2;
    private static final int __WEIGHT_ISSET_ID = 3;
    private static final int __PAGE_ISSET_ID = 4;
    private static final int __SIZE_ISSET_ID = 5;
    private BitSet __isset_bit_vector = new BitSet(6);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEMID, new org.apache.thrift.meta_data.FieldMetaData("itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIONID, new org.apache.thrift.meta_data.FieldMetaData("actionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEMTYPE, new org.apache.thrift.meta_data.FieldMetaData("itemtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchWgtConfigs_args.class, metaDataMap);
    }

    public searchWgtConfigs_args() {
    }

    public searchWgtConfigs_args(
      long configId,
      long tagId,
      long groupId,
      String itemid,
      String actionid,
      String itemtype,
      double weight,
      int page,
      int size)
    {
      this();
      this.configId = configId;
      setConfigIdIsSet(true);
      this.tagId = tagId;
      setTagIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.itemid = itemid;
      this.actionid = actionid;
      this.itemtype = itemtype;
      this.weight = weight;
      setWeightIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchWgtConfigs_args(searchWgtConfigs_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.configId = other.configId;
      this.tagId = other.tagId;
      this.groupId = other.groupId;
      if (other.isSetItemid()) {
        this.itemid = other.itemid;
      }
      if (other.isSetActionid()) {
        this.actionid = other.actionid;
      }
      if (other.isSetItemtype()) {
        this.itemtype = other.itemtype;
      }
      this.weight = other.weight;
      this.page = other.page;
      this.size = other.size;
    }

    public searchWgtConfigs_args deepCopy() {
      return new searchWgtConfigs_args(this);
    }

    @Override
    public void clear() {
      setConfigIdIsSet(false);
      this.configId = 0;
      setTagIdIsSet(false);
      this.tagId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.itemid = null;
      this.actionid = null;
      this.itemtype = null;
      setWeightIsSet(false);
      this.weight = 0.0;
      setPageIsSet(false);
      this.page = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public long getConfigId() {
      return this.configId;
    }

    public searchWgtConfigs_args setConfigId(long configId) {
      this.configId = configId;
      setConfigIdIsSet(true);
      return this;
    }

    public void unsetConfigId() {
      __isset_bit_vector.clear(__CONFIGID_ISSET_ID);
    }

    /** Returns true if field configId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigId() {
      return __isset_bit_vector.get(__CONFIGID_ISSET_ID);
    }

    public void setConfigIdIsSet(boolean value) {
      __isset_bit_vector.set(__CONFIGID_ISSET_ID, value);
    }

    public long getTagId() {
      return this.tagId;
    }

    public searchWgtConfigs_args setTagId(long tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
      return this;
    }

    public void unsetTagId() {
      __isset_bit_vector.clear(__TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return __isset_bit_vector.get(__TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bit_vector.set(__TAGID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public searchWgtConfigs_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bit_vector.clear(__GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return __isset_bit_vector.get(__GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bit_vector.set(__GROUPID_ISSET_ID, value);
    }

    public String getItemid() {
      return this.itemid;
    }

    public searchWgtConfigs_args setItemid(String itemid) {
      this.itemid = itemid;
      return this;
    }

    public void unsetItemid() {
      this.itemid = null;
    }

    /** Returns true if field itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetItemid() {
      return this.itemid != null;
    }

    public void setItemidIsSet(boolean value) {
      if (!value) {
        this.itemid = null;
      }
    }

    public String getActionid() {
      return this.actionid;
    }

    public searchWgtConfigs_args setActionid(String actionid) {
      this.actionid = actionid;
      return this;
    }

    public void unsetActionid() {
      this.actionid = null;
    }

    /** Returns true if field actionid is set (has been assigned a value) and false otherwise */
    public boolean isSetActionid() {
      return this.actionid != null;
    }

    public void setActionidIsSet(boolean value) {
      if (!value) {
        this.actionid = null;
      }
    }

    public String getItemtype() {
      return this.itemtype;
    }

    public searchWgtConfigs_args setItemtype(String itemtype) {
      this.itemtype = itemtype;
      return this;
    }

    public void unsetItemtype() {
      this.itemtype = null;
    }

    /** Returns true if field itemtype is set (has been assigned a value) and false otherwise */
    public boolean isSetItemtype() {
      return this.itemtype != null;
    }

    public void setItemtypeIsSet(boolean value) {
      if (!value) {
        this.itemtype = null;
      }
    }

    public double getWeight() {
      return this.weight;
    }

    public searchWgtConfigs_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public searchWgtConfigs_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public searchWgtConfigs_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bit_vector.clear(__SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_bit_vector.get(__SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_ID:
        if (value == null) {
          unsetConfigId();
        } else {
          setConfigId((Long)value);
        }
        break;

      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case ITEMID:
        if (value == null) {
          unsetItemid();
        } else {
          setItemid((String)value);
        }
        break;

      case ACTIONID:
        if (value == null) {
          unsetActionid();
        } else {
          setActionid((String)value);
        }
        break;

      case ITEMTYPE:
        if (value == null) {
          unsetItemtype();
        } else {
          setItemtype((String)value);
        }
        break;

      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_ID:
        return new Long(getConfigId());

      case TAG_ID:
        return new Long(getTagId());

      case GROUP_ID:
        return new Long(getGroupId());

      case ITEMID:
        return getItemid();

      case ACTIONID:
        return getActionid();

      case ITEMTYPE:
        return getItemtype();

      case WEIGHT:
        return new Double(getWeight());

      case PAGE:
        return new Integer(getPage());

      case SIZE:
        return new Integer(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_ID:
        return isSetConfigId();
      case TAG_ID:
        return isSetTagId();
      case GROUP_ID:
        return isSetGroupId();
      case ITEMID:
        return isSetItemid();
      case ACTIONID:
        return isSetActionid();
      case ITEMTYPE:
        return isSetItemtype();
      case WEIGHT:
        return isSetWeight();
      case PAGE:
        return isSetPage();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchWgtConfigs_args)
        return this.equals((searchWgtConfigs_args)that);
      return false;
    }

    public boolean equals(searchWgtConfigs_args that) {
      if (that == null)
        return false;

      boolean this_present_configId = true;
      boolean that_present_configId = true;
      if (this_present_configId || that_present_configId) {
        if (!(this_present_configId && that_present_configId))
          return false;
        if (this.configId != that.configId)
          return false;
      }

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_itemid = true && this.isSetItemid();
      boolean that_present_itemid = true && that.isSetItemid();
      if (this_present_itemid || that_present_itemid) {
        if (!(this_present_itemid && that_present_itemid))
          return false;
        if (!this.itemid.equals(that.itemid))
          return false;
      }

      boolean this_present_actionid = true && this.isSetActionid();
      boolean that_present_actionid = true && that.isSetActionid();
      if (this_present_actionid || that_present_actionid) {
        if (!(this_present_actionid && that_present_actionid))
          return false;
        if (!this.actionid.equals(that.actionid))
          return false;
      }

      boolean this_present_itemtype = true && this.isSetItemtype();
      boolean that_present_itemtype = true && that.isSetItemtype();
      if (this_present_itemtype || that_present_itemtype) {
        if (!(this_present_itemtype && that_present_itemtype))
          return false;
        if (!this.itemtype.equals(that.itemtype))
          return false;
      }

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchWgtConfigs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchWgtConfigs_args typedOther = (searchWgtConfigs_args)other;

      lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(typedOther.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, typedOther.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemid()).compareTo(typedOther.isSetItemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemid, typedOther.itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionid()).compareTo(typedOther.isSetActionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionid, typedOther.actionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemtype()).compareTo(typedOther.isSetItemtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemtype, typedOther.itemtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CONFIG_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.configId = iprot.readI64();
              setConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.tagId = iprot.readI64();
              setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GROUP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.groupId = iprot.readI64();
              setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ITEMID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.itemid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACTIONID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.actionid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ITEMTYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.itemtype = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // WEIGHT
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.weight = iprot.readDouble();
              setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
      oprot.writeI64(this.configId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
      oprot.writeI64(this.tagId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI64(this.groupId);
      oprot.writeFieldEnd();
      if (this.itemid != null) {
        oprot.writeFieldBegin(ITEMID_FIELD_DESC);
        oprot.writeString(this.itemid);
        oprot.writeFieldEnd();
      }
      if (this.actionid != null) {
        oprot.writeFieldBegin(ACTIONID_FIELD_DESC);
        oprot.writeString(this.actionid);
        oprot.writeFieldEnd();
      }
      if (this.itemtype != null) {
        oprot.writeFieldBegin(ITEMTYPE_FIELD_DESC);
        oprot.writeString(this.itemtype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeDouble(this.weight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchWgtConfigs_args(");
      boolean first = true;

      sb.append("configId:");
      sb.append(this.configId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemid:");
      if (this.itemid == null) {
        sb.append("null");
      } else {
        sb.append(this.itemid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionid:");
      if (this.actionid == null) {
        sb.append("null");
      } else {
        sb.append(this.actionid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemtype:");
      if (this.itemtype == null) {
        sb.append("null");
      } else {
        sb.append(this.itemtype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchWgtConfigs_result implements org.apache.thrift.TBase<searchWgtConfigs_result, searchWgtConfigs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchWgtConfigs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchWgtConfigs_result.class, metaDataMap);
    }

    public searchWgtConfigs_result() {
    }

    public searchWgtConfigs_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchWgtConfigs_result(searchWgtConfigs_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchWgtConfigs_result deepCopy() {
      return new searchWgtConfigs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchWgtConfigs_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchWgtConfigs_result)
        return this.equals((searchWgtConfigs_result)that);
      return false;
    }

    public boolean equals(searchWgtConfigs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchWgtConfigs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchWgtConfigs_result typedOther = (searchWgtConfigs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchWgtConfigs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansTagInfo_args implements org.apache.thrift.TBase<getFansTagInfo_args, getFansTagInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansTagInfo_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.STRING, (short)2);

    public int appkey;
    public String uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      UIDS((short)2, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansTagInfo_args.class, metaDataMap);
    }

    public getFansTagInfo_args() {
    }

    public getFansTagInfo_args(
      int appkey,
      String uids)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansTagInfo_args(getFansTagInfo_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetUids()) {
        this.uids = other.uids;
      }
    }

    public getFansTagInfo_args deepCopy() {
      return new getFansTagInfo_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.uids = null;
    }

    public int getAppkey() {
      return this.appkey;
    }

    public getFansTagInfo_args setAppkey(int appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getUids() {
      return this.uids;
    }

    public getFansTagInfo_args setUids(String uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been assigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Integer)value);
        }
        break;

      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Integer(getAppkey());

      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansTagInfo_args)
        return this.equals((getFansTagInfo_args)that);
      return false;
    }

    public boolean equals(getFansTagInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansTagInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansTagInfo_args typedOther = (getFansTagInfo_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appkey = iprot.readI32();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UIDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.uids = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI32(this.appkey);
      oprot.writeFieldEnd();
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        oprot.writeString(this.uids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansTagInfo_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansTagInfo_result implements org.apache.thrift.TBase<getFansTagInfo_result, getFansTagInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansTagInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansTagInfo_result.class, metaDataMap);
    }

    public getFansTagInfo_result() {
    }

    public getFansTagInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansTagInfo_result(getFansTagInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansTagInfo_result deepCopy() {
      return new getFansTagInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansTagInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansTagInfo_result)
        return this.equals((getFansTagInfo_result)that);
      return false;
    }

    public boolean equals(getFansTagInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansTagInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansTagInfo_result typedOther = (getFansTagInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansTagInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getActivityKOL_args implements org.apache.thrift.TBase<getActivityKOL_args, getActivityKOL_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActivityKOL_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.STRING, (short)2);

    public int appkey;
    public String uids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      UIDS((short)2, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActivityKOL_args.class, metaDataMap);
    }

    public getActivityKOL_args() {
    }

    public getActivityKOL_args(
      int appkey,
      String uids)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivityKOL_args(getActivityKOL_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetUids()) {
        this.uids = other.uids;
      }
    }

    public getActivityKOL_args deepCopy() {
      return new getActivityKOL_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.uids = null;
    }

    public int getAppkey() {
      return this.appkey;
    }

    public getActivityKOL_args setAppkey(int appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getUids() {
      return this.uids;
    }

    public getActivityKOL_args setUids(String uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been assigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Integer)value);
        }
        break;

      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Integer(getAppkey());

      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivityKOL_args)
        return this.equals((getActivityKOL_args)that);
      return false;
    }

    public boolean equals(getActivityKOL_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActivityKOL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActivityKOL_args typedOther = (getActivityKOL_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appkey = iprot.readI32();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UIDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.uids = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI32(this.appkey);
      oprot.writeFieldEnd();
      if (this.uids != null) {
        oprot.writeFieldBegin(UIDS_FIELD_DESC);
        oprot.writeString(this.uids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActivityKOL_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getActivityKOL_result implements org.apache.thrift.TBase<getActivityKOL_result, getActivityKOL_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActivityKOL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActivityKOL_result.class, metaDataMap);
    }

    public getActivityKOL_result() {
    }

    public getActivityKOL_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivityKOL_result(getActivityKOL_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getActivityKOL_result deepCopy() {
      return new getActivityKOL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getActivityKOL_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivityKOL_result)
        return this.equals((getActivityKOL_result)that);
      return false;
    }

    public boolean equals(getActivityKOL_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActivityKOL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActivityKOL_result typedOther = (getActivityKOL_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActivityKOL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumDistOfProperty_args implements org.apache.thrift.TBase<getFansNumDistOfProperty_args, getFansNumDistOfProperty_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumDistOfProperty_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    public int appKey;
    public String propertyName;
    public long startTime;
    public long endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      PROPERTY_NAME((short)2, "propertyName"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // PROPERTY_NAME
            return PROPERTY_NAME;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumDistOfProperty_args.class, metaDataMap);
    }

    public getFansNumDistOfProperty_args() {
    }

    public getFansNumDistOfProperty_args(
      int appKey,
      String propertyName,
      long startTime,
      long endTime)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.propertyName = propertyName;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumDistOfProperty_args(getFansNumDistOfProperty_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      if (other.isSetPropertyName()) {
        this.propertyName = other.propertyName;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getFansNumDistOfProperty_args deepCopy() {
      return new getFansNumDistOfProperty_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.propertyName = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansNumDistOfProperty_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getPropertyName() {
      return this.propertyName;
    }

    public getFansNumDistOfProperty_args setPropertyName(String propertyName) {
      this.propertyName = propertyName;
      return this;
    }

    public void unsetPropertyName() {
      this.propertyName = null;
    }

    /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyName() {
      return this.propertyName != null;
    }

    public void setPropertyNameIsSet(boolean value) {
      if (!value) {
        this.propertyName = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getFansNumDistOfProperty_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getFansNumDistOfProperty_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case PROPERTY_NAME:
        if (value == null) {
          unsetPropertyName();
        } else {
          setPropertyName((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case PROPERTY_NAME:
        return getPropertyName();

      case START_TIME:
        return new Long(getStartTime());

      case END_TIME:
        return new Long(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case PROPERTY_NAME:
        return isSetPropertyName();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumDistOfProperty_args)
        return this.equals((getFansNumDistOfProperty_args)that);
      return false;
    }

    public boolean equals(getFansNumDistOfProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_propertyName = true && this.isSetPropertyName();
      boolean that_present_propertyName = true && that.isSetPropertyName();
      if (this_present_propertyName || that_present_propertyName) {
        if (!(this_present_propertyName && that_present_propertyName))
          return false;
        if (!this.propertyName.equals(that.propertyName))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumDistOfProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumDistOfProperty_args typedOther = (getFansNumDistOfProperty_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(typedOther.isSetPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, typedOther.propertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.startTime = iprot.readI64();
              setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.endTime = iprot.readI64();
              setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.propertyName != null) {
        oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.propertyName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(this.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumDistOfProperty_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumDistOfProperty_result implements org.apache.thrift.TBase<getFansNumDistOfProperty_result, getFansNumDistOfProperty_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumDistOfProperty_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumDistOfProperty_result.class, metaDataMap);
    }

    public getFansNumDistOfProperty_result() {
    }

    public getFansNumDistOfProperty_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumDistOfProperty_result(getFansNumDistOfProperty_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansNumDistOfProperty_result deepCopy() {
      return new getFansNumDistOfProperty_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansNumDistOfProperty_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumDistOfProperty_result)
        return this.equals((getFansNumDistOfProperty_result)that);
      return false;
    }

    public boolean equals(getFansNumDistOfProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumDistOfProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumDistOfProperty_result typedOther = (getFansNumDistOfProperty_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumDistOfProperty_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumDistOfTagByCon_args implements org.apache.thrift.TBase<getFansNumDistOfTagByCon_args, getFansNumDistOfTagByCon_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumDistOfTagByCon_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentClassId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PROPERTY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyValue", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);

    public int appKey;
    public String parentClassId;
    public String propertyName;
    public String propertyValue;
    public long startTime;
    public long endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      PARENT_CLASS_ID((short)2, "parentClassId"),
      PROPERTY_NAME((short)3, "propertyName"),
      PROPERTY_VALUE((short)4, "propertyValue"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)6, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // PARENT_CLASS_ID
            return PARENT_CLASS_ID;
          case 3: // PROPERTY_NAME
            return PROPERTY_NAME;
          case 4: // PROPERTY_VALUE
            return PROPERTY_VALUE;
          case 5: // START_TIME
            return START_TIME;
          case 6: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARENT_CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("parentClassId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("propertyValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumDistOfTagByCon_args.class, metaDataMap);
    }

    public getFansNumDistOfTagByCon_args() {
    }

    public getFansNumDistOfTagByCon_args(
      int appKey,
      String parentClassId,
      String propertyName,
      String propertyValue,
      long startTime,
      long endTime)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.parentClassId = parentClassId;
      this.propertyName = propertyName;
      this.propertyValue = propertyValue;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumDistOfTagByCon_args(getFansNumDistOfTagByCon_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      if (other.isSetParentClassId()) {
        this.parentClassId = other.parentClassId;
      }
      if (other.isSetPropertyName()) {
        this.propertyName = other.propertyName;
      }
      if (other.isSetPropertyValue()) {
        this.propertyValue = other.propertyValue;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public getFansNumDistOfTagByCon_args deepCopy() {
      return new getFansNumDistOfTagByCon_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.parentClassId = null;
      this.propertyName = null;
      this.propertyValue = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansNumDistOfTagByCon_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getParentClassId() {
      return this.parentClassId;
    }

    public getFansNumDistOfTagByCon_args setParentClassId(String parentClassId) {
      this.parentClassId = parentClassId;
      return this;
    }

    public void unsetParentClassId() {
      this.parentClassId = null;
    }

    /** Returns true if field parentClassId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentClassId() {
      return this.parentClassId != null;
    }

    public void setParentClassIdIsSet(boolean value) {
      if (!value) {
        this.parentClassId = null;
      }
    }

    public String getPropertyName() {
      return this.propertyName;
    }

    public getFansNumDistOfTagByCon_args setPropertyName(String propertyName) {
      this.propertyName = propertyName;
      return this;
    }

    public void unsetPropertyName() {
      this.propertyName = null;
    }

    /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyName() {
      return this.propertyName != null;
    }

    public void setPropertyNameIsSet(boolean value) {
      if (!value) {
        this.propertyName = null;
      }
    }

    public String getPropertyValue() {
      return this.propertyValue;
    }

    public getFansNumDistOfTagByCon_args setPropertyValue(String propertyValue) {
      this.propertyValue = propertyValue;
      return this;
    }

    public void unsetPropertyValue() {
      this.propertyValue = null;
    }

    /** Returns true if field propertyValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyValue() {
      return this.propertyValue != null;
    }

    public void setPropertyValueIsSet(boolean value) {
      if (!value) {
        this.propertyValue = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getFansNumDistOfTagByCon_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getFansNumDistOfTagByCon_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case PARENT_CLASS_ID:
        if (value == null) {
          unsetParentClassId();
        } else {
          setParentClassId((String)value);
        }
        break;

      case PROPERTY_NAME:
        if (value == null) {
          unsetPropertyName();
        } else {
          setPropertyName((String)value);
        }
        break;

      case PROPERTY_VALUE:
        if (value == null) {
          unsetPropertyValue();
        } else {
          setPropertyValue((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case PARENT_CLASS_ID:
        return getParentClassId();

      case PROPERTY_NAME:
        return getPropertyName();

      case PROPERTY_VALUE:
        return getPropertyValue();

      case START_TIME:
        return new Long(getStartTime());

      case END_TIME:
        return new Long(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case PARENT_CLASS_ID:
        return isSetParentClassId();
      case PROPERTY_NAME:
        return isSetPropertyName();
      case PROPERTY_VALUE:
        return isSetPropertyValue();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumDistOfTagByCon_args)
        return this.equals((getFansNumDistOfTagByCon_args)that);
      return false;
    }

    public boolean equals(getFansNumDistOfTagByCon_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_parentClassId = true && this.isSetParentClassId();
      boolean that_present_parentClassId = true && that.isSetParentClassId();
      if (this_present_parentClassId || that_present_parentClassId) {
        if (!(this_present_parentClassId && that_present_parentClassId))
          return false;
        if (!this.parentClassId.equals(that.parentClassId))
          return false;
      }

      boolean this_present_propertyName = true && this.isSetPropertyName();
      boolean that_present_propertyName = true && that.isSetPropertyName();
      if (this_present_propertyName || that_present_propertyName) {
        if (!(this_present_propertyName && that_present_propertyName))
          return false;
        if (!this.propertyName.equals(that.propertyName))
          return false;
      }

      boolean this_present_propertyValue = true && this.isSetPropertyValue();
      boolean that_present_propertyValue = true && that.isSetPropertyValue();
      if (this_present_propertyValue || that_present_propertyValue) {
        if (!(this_present_propertyValue && that_present_propertyValue))
          return false;
        if (!this.propertyValue.equals(that.propertyValue))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumDistOfTagByCon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumDistOfTagByCon_args typedOther = (getFansNumDistOfTagByCon_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentClassId()).compareTo(typedOther.isSetParentClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentClassId, typedOther.parentClassId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(typedOther.isSetPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, typedOther.propertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyValue()).compareTo(typedOther.isSetPropertyValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyValue, typedOther.propertyValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PARENT_CLASS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.parentClassId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PROPERTY_VALUE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyValue = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.startTime = iprot.readI64();
              setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.endTime = iprot.readI64();
              setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.parentClassId != null) {
        oprot.writeFieldBegin(PARENT_CLASS_ID_FIELD_DESC);
        oprot.writeString(this.parentClassId);
        oprot.writeFieldEnd();
      }
      if (this.propertyName != null) {
        oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.propertyName);
        oprot.writeFieldEnd();
      }
      if (this.propertyValue != null) {
        oprot.writeFieldBegin(PROPERTY_VALUE_FIELD_DESC);
        oprot.writeString(this.propertyValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(this.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumDistOfTagByCon_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentClassId:");
      if (this.parentClassId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentClassId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyValue:");
      if (this.propertyValue == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumDistOfTagByCon_result implements org.apache.thrift.TBase<getFansNumDistOfTagByCon_result, getFansNumDistOfTagByCon_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumDistOfTagByCon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumDistOfTagByCon_result.class, metaDataMap);
    }

    public getFansNumDistOfTagByCon_result() {
    }

    public getFansNumDistOfTagByCon_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumDistOfTagByCon_result(getFansNumDistOfTagByCon_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansNumDistOfTagByCon_result deepCopy() {
      return new getFansNumDistOfTagByCon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansNumDistOfTagByCon_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumDistOfTagByCon_result)
        return this.equals((getFansNumDistOfTagByCon_result)that);
      return false;
    }

    public boolean equals(getFansNumDistOfTagByCon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumDistOfTagByCon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumDistOfTagByCon_result typedOther = (getFansNumDistOfTagByCon_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumDistOfTagByCon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertyAndTagCondi_args implements org.apache.thrift.TBase<getFansListByFanPropertyAndTagCondi_args, getFansListByFanPropertyAndTagCondi_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertyAndTagCondi_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("classId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PROPERTY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyValue", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)8);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)10);

    public int appKey;
    public int tagId;
    public String classId;
    public int page;
    public int pageSize;
    public String propertyName;
    public String propertyValue;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      TAG_ID((short)2, "tagId"),
      CLASS_ID((short)3, "classId"),
      PAGE((short)4, "page"),
      PAGE_SIZE((short)5, "pageSize"),
      PROPERTY_NAME((short)6, "propertyName"),
      PROPERTY_VALUE((short)7, "propertyValue"),
      SORT_FLAG((short)8, "sortFlag"),
      SORT_PROPERTY_NAME((short)9, "sortPropertyName"),
      SORT_TYPE((short)10, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // TAG_ID
            return TAG_ID;
          case 3: // CLASS_ID
            return CLASS_ID;
          case 4: // PAGE
            return PAGE;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          case 6: // PROPERTY_NAME
            return PROPERTY_NAME;
          case 7: // PROPERTY_VALUE
            return PROPERTY_VALUE;
          case 8: // SORT_FLAG
            return SORT_FLAG;
          case 9: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 10: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __TAGID_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private static final int __SORTFLAG_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("classId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("propertyValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertyAndTagCondi_args.class, metaDataMap);
    }

    public getFansListByFanPropertyAndTagCondi_args() {
    }

    public getFansListByFanPropertyAndTagCondi_args(
      int appKey,
      int tagId,
      String classId,
      int page,
      int pageSize,
      String propertyName,
      String propertyValue,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.tagId = tagId;
      setTagIdIsSet(true);
      this.classId = classId;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.propertyName = propertyName;
      this.propertyValue = propertyValue;
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertyAndTagCondi_args(getFansListByFanPropertyAndTagCondi_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      this.tagId = other.tagId;
      if (other.isSetClassId()) {
        this.classId = other.classId;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      if (other.isSetPropertyName()) {
        this.propertyName = other.propertyName;
      }
      if (other.isSetPropertyValue()) {
        this.propertyValue = other.propertyValue;
      }
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public getFansListByFanPropertyAndTagCondi_args deepCopy() {
      return new getFansListByFanPropertyAndTagCondi_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      setTagIdIsSet(false);
      this.tagId = 0;
      this.classId = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.propertyName = null;
      this.propertyValue = null;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansListByFanPropertyAndTagCondi_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public int getTagId() {
      return this.tagId;
    }

    public getFansListByFanPropertyAndTagCondi_args setTagId(int tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
      return this;
    }

    public void unsetTagId() {
      __isset_bit_vector.clear(__TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return __isset_bit_vector.get(__TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bit_vector.set(__TAGID_ISSET_ID, value);
    }

    public String getClassId() {
      return this.classId;
    }

    public getFansListByFanPropertyAndTagCondi_args setClassId(String classId) {
      this.classId = classId;
      return this;
    }

    public void unsetClassId() {
      this.classId = null;
    }

    /** Returns true if field classId is set (has been assigned a value) and false otherwise */
    public boolean isSetClassId() {
      return this.classId != null;
    }

    public void setClassIdIsSet(boolean value) {
      if (!value) {
        this.classId = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public getFansListByFanPropertyAndTagCondi_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getFansListByFanPropertyAndTagCondi_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public String getPropertyName() {
      return this.propertyName;
    }

    public getFansListByFanPropertyAndTagCondi_args setPropertyName(String propertyName) {
      this.propertyName = propertyName;
      return this;
    }

    public void unsetPropertyName() {
      this.propertyName = null;
    }

    /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyName() {
      return this.propertyName != null;
    }

    public void setPropertyNameIsSet(boolean value) {
      if (!value) {
        this.propertyName = null;
      }
    }

    public String getPropertyValue() {
      return this.propertyValue;
    }

    public getFansListByFanPropertyAndTagCondi_args setPropertyValue(String propertyValue) {
      this.propertyValue = propertyValue;
      return this;
    }

    public void unsetPropertyValue() {
      this.propertyValue = null;
    }

    /** Returns true if field propertyValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyValue() {
      return this.propertyValue != null;
    }

    public void setPropertyValueIsSet(boolean value) {
      if (!value) {
        this.propertyValue = null;
      }
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public getFansListByFanPropertyAndTagCondi_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public getFansListByFanPropertyAndTagCondi_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public getFansListByFanPropertyAndTagCondi_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Integer)value);
        }
        break;

      case CLASS_ID:
        if (value == null) {
          unsetClassId();
        } else {
          setClassId((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case PROPERTY_NAME:
        if (value == null) {
          unsetPropertyName();
        } else {
          setPropertyName((String)value);
        }
        break;

      case PROPERTY_VALUE:
        if (value == null) {
          unsetPropertyValue();
        } else {
          setPropertyValue((String)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case TAG_ID:
        return new Integer(getTagId());

      case CLASS_ID:
        return getClassId();

      case PAGE:
        return new Integer(getPage());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case PROPERTY_NAME:
        return getPropertyName();

      case PROPERTY_VALUE:
        return getPropertyValue();

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case TAG_ID:
        return isSetTagId();
      case CLASS_ID:
        return isSetClassId();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case PROPERTY_NAME:
        return isSetPropertyName();
      case PROPERTY_VALUE:
        return isSetPropertyValue();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertyAndTagCondi_args)
        return this.equals((getFansListByFanPropertyAndTagCondi_args)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertyAndTagCondi_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      boolean this_present_classId = true && this.isSetClassId();
      boolean that_present_classId = true && that.isSetClassId();
      if (this_present_classId || that_present_classId) {
        if (!(this_present_classId && that_present_classId))
          return false;
        if (!this.classId.equals(that.classId))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_propertyName = true && this.isSetPropertyName();
      boolean that_present_propertyName = true && that.isSetPropertyName();
      if (this_present_propertyName || that_present_propertyName) {
        if (!(this_present_propertyName && that_present_propertyName))
          return false;
        if (!this.propertyName.equals(that.propertyName))
          return false;
      }

      boolean this_present_propertyValue = true && this.isSetPropertyValue();
      boolean that_present_propertyValue = true && that.isSetPropertyValue();
      if (this_present_propertyValue || that_present_propertyValue) {
        if (!(this_present_propertyValue && that_present_propertyValue))
          return false;
        if (!this.propertyValue.equals(that.propertyValue))
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertyAndTagCondi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertyAndTagCondi_args typedOther = (getFansListByFanPropertyAndTagCondi_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassId()).compareTo(typedOther.isSetClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, typedOther.classId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(typedOther.isSetPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, typedOther.propertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyValue()).compareTo(typedOther.isSetPropertyValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyValue, typedOther.propertyValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_ID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.tagId = iprot.readI32();
              setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CLASS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.classId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // PROPERTY_VALUE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyValue = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
      oprot.writeI32(this.tagId);
      oprot.writeFieldEnd();
      if (this.classId != null) {
        oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
        oprot.writeString(this.classId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      if (this.propertyName != null) {
        oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.propertyName);
        oprot.writeFieldEnd();
      }
      if (this.propertyValue != null) {
        oprot.writeFieldBegin(PROPERTY_VALUE_FIELD_DESC);
        oprot.writeString(this.propertyValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertyAndTagCondi_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("classId:");
      if (this.classId == null) {
        sb.append("null");
      } else {
        sb.append(this.classId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyValue:");
      if (this.propertyValue == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertyAndTagCondi_result implements org.apache.thrift.TBase<getFansListByFanPropertyAndTagCondi_result, getFansListByFanPropertyAndTagCondi_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertyAndTagCondi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertyAndTagCondi_result.class, metaDataMap);
    }

    public getFansListByFanPropertyAndTagCondi_result() {
    }

    public getFansListByFanPropertyAndTagCondi_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertyAndTagCondi_result(getFansListByFanPropertyAndTagCondi_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansListByFanPropertyAndTagCondi_result deepCopy() {
      return new getFansListByFanPropertyAndTagCondi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansListByFanPropertyAndTagCondi_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertyAndTagCondi_result)
        return this.equals((getFansListByFanPropertyAndTagCondi_result)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertyAndTagCondi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertyAndTagCondi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertyAndTagCondi_result typedOther = (getFansListByFanPropertyAndTagCondi_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertyAndTagCondi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndTagId_args implements org.apache.thrift.TBase<getFansListByFanPropertiesAndTagId_args, getFansListByFanPropertiesAndTagId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndTagId_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)8);

    public int appKey;
    public int tagId;
    public String propertyCondition;
    public int page;
    public int pageSize;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      TAG_ID((short)2, "tagId"),
      PROPERTY_CONDITION((short)3, "propertyCondition"),
      PAGE((short)4, "page"),
      PAGE_SIZE((short)5, "pageSize"),
      SORT_FLAG((short)6, "sortFlag"),
      SORT_PROPERTY_NAME((short)7, "sortPropertyName"),
      SORT_TYPE((short)8, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // TAG_ID
            return TAG_ID;
          case 3: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 4: // PAGE
            return PAGE;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          case 6: // SORT_FLAG
            return SORT_FLAG;
          case 7: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 8: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __TAGID_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private static final int __SORTFLAG_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndTagId_args.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndTagId_args() {
    }

    public getFansListByFanPropertiesAndTagId_args(
      int appKey,
      int tagId,
      String propertyCondition,
      int page,
      int pageSize,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.tagId = tagId;
      setTagIdIsSet(true);
      this.propertyCondition = propertyCondition;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndTagId_args(getFansListByFanPropertiesAndTagId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      this.tagId = other.tagId;
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public getFansListByFanPropertiesAndTagId_args deepCopy() {
      return new getFansListByFanPropertiesAndTagId_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      setTagIdIsSet(false);
      this.tagId = 0;
      this.propertyCondition = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansListByFanPropertiesAndTagId_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public int getTagId() {
      return this.tagId;
    }

    public getFansListByFanPropertiesAndTagId_args setTagId(int tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
      return this;
    }

    public void unsetTagId() {
      __isset_bit_vector.clear(__TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return __isset_bit_vector.get(__TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bit_vector.set(__TAGID_ISSET_ID, value);
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public getFansListByFanPropertiesAndTagId_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public getFansListByFanPropertiesAndTagId_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getFansListByFanPropertiesAndTagId_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public getFansListByFanPropertiesAndTagId_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public getFansListByFanPropertiesAndTagId_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public getFansListByFanPropertiesAndTagId_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Integer)value);
        }
        break;

      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case TAG_ID:
        return new Integer(getTagId());

      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case PAGE:
        return new Integer(getPage());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case TAG_ID:
        return isSetTagId();
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndTagId_args)
        return this.equals((getFansListByFanPropertiesAndTagId_args)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndTagId_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndTagId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndTagId_args typedOther = (getFansListByFanPropertiesAndTagId_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_ID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.tagId = iprot.readI32();
              setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
      oprot.writeI32(this.tagId);
      oprot.writeFieldEnd();
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndTagId_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndTagId_result implements org.apache.thrift.TBase<getFansListByFanPropertiesAndTagId_result, getFansListByFanPropertiesAndTagId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndTagId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndTagId_result.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndTagId_result() {
    }

    public getFansListByFanPropertiesAndTagId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndTagId_result(getFansListByFanPropertiesAndTagId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansListByFanPropertiesAndTagId_result deepCopy() {
      return new getFansListByFanPropertiesAndTagId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansListByFanPropertiesAndTagId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndTagId_result)
        return this.equals((getFansListByFanPropertiesAndTagId_result)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndTagId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndTagId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndTagId_result typedOther = (getFansListByFanPropertiesAndTagId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndTagId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndAppId_args implements org.apache.thrift.TBase<getFansListByFanPropertiesAndAppId_args, getFansListByFanPropertiesAndAppId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndAppId_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)7);

    public int appKey;
    public String propertyCondition;
    public int page;
    public int pageSize;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      PROPERTY_CONDITION((short)2, "propertyCondition"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize"),
      SORT_FLAG((short)5, "sortFlag"),
      SORT_PROPERTY_NAME((short)6, "sortPropertyName"),
      SORT_TYPE((short)7, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          case 5: // SORT_FLAG
            return SORT_FLAG;
          case 6: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 7: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __SORTFLAG_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndAppId_args.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndAppId_args() {
    }

    public getFansListByFanPropertiesAndAppId_args(
      int appKey,
      String propertyCondition,
      int page,
      int pageSize,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.propertyCondition = propertyCondition;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndAppId_args(getFansListByFanPropertiesAndAppId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public getFansListByFanPropertiesAndAppId_args deepCopy() {
      return new getFansListByFanPropertiesAndAppId_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.propertyCondition = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansListByFanPropertiesAndAppId_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public getFansListByFanPropertiesAndAppId_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public getFansListByFanPropertiesAndAppId_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getFansListByFanPropertiesAndAppId_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public getFansListByFanPropertiesAndAppId_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public getFansListByFanPropertiesAndAppId_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public getFansListByFanPropertiesAndAppId_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case PAGE:
        return new Integer(getPage());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndAppId_args)
        return this.equals((getFansListByFanPropertiesAndAppId_args)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndAppId_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndAppId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndAppId_args typedOther = (getFansListByFanPropertiesAndAppId_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndAppId_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndAppId_result implements org.apache.thrift.TBase<getFansListByFanPropertiesAndAppId_result, getFansListByFanPropertiesAndAppId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndAppId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndAppId_result.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndAppId_result() {
    }

    public getFansListByFanPropertiesAndAppId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndAppId_result(getFansListByFanPropertiesAndAppId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansListByFanPropertiesAndAppId_result deepCopy() {
      return new getFansListByFanPropertiesAndAppId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansListByFanPropertiesAndAppId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndAppId_result)
        return this.equals((getFansListByFanPropertiesAndAppId_result)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndAppId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndAppId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndAppId_result typedOther = (getFansListByFanPropertiesAndAppId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndAppId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumDistOfNatureProperty_args implements org.apache.thrift.TBase<getFansNumDistOfNatureProperty_args, getFansNumDistOfNatureProperty_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumDistOfNatureProperty_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupFieldName", org.apache.thrift.protocol.TType.STRING, (short)3);

    public String propertyCondition;
    public int appKey;
    public String groupFieldName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_CONDITION((short)1, "propertyCondition"),
      APP_KEY((short)2, "appKey"),
      GROUP_FIELD_NAME((short)3, "groupFieldName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 2: // APP_KEY
            return APP_KEY;
          case 3: // GROUP_FIELD_NAME
            return GROUP_FIELD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GROUP_FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupFieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumDistOfNatureProperty_args.class, metaDataMap);
    }

    public getFansNumDistOfNatureProperty_args() {
    }

    public getFansNumDistOfNatureProperty_args(
      String propertyCondition,
      int appKey,
      String groupFieldName)
    {
      this();
      this.propertyCondition = propertyCondition;
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.groupFieldName = groupFieldName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumDistOfNatureProperty_args(getFansNumDistOfNatureProperty_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      this.appKey = other.appKey;
      if (other.isSetGroupFieldName()) {
        this.groupFieldName = other.groupFieldName;
      }
    }

    public getFansNumDistOfNatureProperty_args deepCopy() {
      return new getFansNumDistOfNatureProperty_args(this);
    }

    @Override
    public void clear() {
      this.propertyCondition = null;
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.groupFieldName = null;
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public getFansNumDistOfNatureProperty_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansNumDistOfNatureProperty_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getGroupFieldName() {
      return this.groupFieldName;
    }

    public getFansNumDistOfNatureProperty_args setGroupFieldName(String groupFieldName) {
      this.groupFieldName = groupFieldName;
      return this;
    }

    public void unsetGroupFieldName() {
      this.groupFieldName = null;
    }

    /** Returns true if field groupFieldName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupFieldName() {
      return this.groupFieldName != null;
    }

    public void setGroupFieldNameIsSet(boolean value) {
      if (!value) {
        this.groupFieldName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case GROUP_FIELD_NAME:
        if (value == null) {
          unsetGroupFieldName();
        } else {
          setGroupFieldName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case APP_KEY:
        return new Integer(getAppKey());

      case GROUP_FIELD_NAME:
        return getGroupFieldName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case APP_KEY:
        return isSetAppKey();
      case GROUP_FIELD_NAME:
        return isSetGroupFieldName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumDistOfNatureProperty_args)
        return this.equals((getFansNumDistOfNatureProperty_args)that);
      return false;
    }

    public boolean equals(getFansNumDistOfNatureProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_groupFieldName = true && this.isSetGroupFieldName();
      boolean that_present_groupFieldName = true && that.isSetGroupFieldName();
      if (this_present_groupFieldName || that_present_groupFieldName) {
        if (!(this_present_groupFieldName && that_present_groupFieldName))
          return false;
        if (!this.groupFieldName.equals(that.groupFieldName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumDistOfNatureProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumDistOfNatureProperty_args typedOther = (getFansNumDistOfNatureProperty_args)other;

      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupFieldName()).compareTo(typedOther.isSetGroupFieldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupFieldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupFieldName, typedOther.groupFieldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GROUP_FIELD_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupFieldName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.groupFieldName != null) {
        oprot.writeFieldBegin(GROUP_FIELD_NAME_FIELD_DESC);
        oprot.writeString(this.groupFieldName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumDistOfNatureProperty_args(");
      boolean first = true;

      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupFieldName:");
      if (this.groupFieldName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupFieldName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumDistOfNatureProperty_result implements org.apache.thrift.TBase<getFansNumDistOfNatureProperty_result, getFansNumDistOfNatureProperty_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumDistOfNatureProperty_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumDistOfNatureProperty_result.class, metaDataMap);
    }

    public getFansNumDistOfNatureProperty_result() {
    }

    public getFansNumDistOfNatureProperty_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumDistOfNatureProperty_result(getFansNumDistOfNatureProperty_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansNumDistOfNatureProperty_result deepCopy() {
      return new getFansNumDistOfNatureProperty_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansNumDistOfNatureProperty_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumDistOfNatureProperty_result)
        return this.equals((getFansNumDistOfNatureProperty_result)that);
      return false;
    }

    public boolean equals(getFansNumDistOfNatureProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumDistOfNatureProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumDistOfNatureProperty_result typedOther = (getFansNumDistOfNatureProperty_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumDistOfNatureProperty_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndClassId_args implements org.apache.thrift.TBase<getFansListByFanPropertiesAndClassId_args, getFansListByFanPropertiesAndClassId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndClassId_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("classId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)8);

    public int appKey;
    public String classId;
    public String propertyCondition;
    public int page;
    public int pageSize;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      CLASS_ID((short)2, "classId"),
      PROPERTY_CONDITION((short)3, "propertyCondition"),
      PAGE((short)4, "page"),
      PAGE_SIZE((short)5, "pageSize"),
      SORT_FLAG((short)6, "sortFlag"),
      SORT_PROPERTY_NAME((short)7, "sortPropertyName"),
      SORT_TYPE((short)8, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // CLASS_ID
            return CLASS_ID;
          case 3: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 4: // PAGE
            return PAGE;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          case 6: // SORT_FLAG
            return SORT_FLAG;
          case 7: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 8: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __SORTFLAG_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("classId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndClassId_args.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndClassId_args() {
    }

    public getFansListByFanPropertiesAndClassId_args(
      int appKey,
      String classId,
      String propertyCondition,
      int page,
      int pageSize,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.classId = classId;
      this.propertyCondition = propertyCondition;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndClassId_args(getFansListByFanPropertiesAndClassId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      if (other.isSetClassId()) {
        this.classId = other.classId;
      }
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public getFansListByFanPropertiesAndClassId_args deepCopy() {
      return new getFansListByFanPropertiesAndClassId_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.classId = null;
      this.propertyCondition = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansListByFanPropertiesAndClassId_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getClassId() {
      return this.classId;
    }

    public getFansListByFanPropertiesAndClassId_args setClassId(String classId) {
      this.classId = classId;
      return this;
    }

    public void unsetClassId() {
      this.classId = null;
    }

    /** Returns true if field classId is set (has been assigned a value) and false otherwise */
    public boolean isSetClassId() {
      return this.classId != null;
    }

    public void setClassIdIsSet(boolean value) {
      if (!value) {
        this.classId = null;
      }
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public getFansListByFanPropertiesAndClassId_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public getFansListByFanPropertiesAndClassId_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getFansListByFanPropertiesAndClassId_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public getFansListByFanPropertiesAndClassId_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public getFansListByFanPropertiesAndClassId_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public getFansListByFanPropertiesAndClassId_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case CLASS_ID:
        if (value == null) {
          unsetClassId();
        } else {
          setClassId((String)value);
        }
        break;

      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case CLASS_ID:
        return getClassId();

      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case PAGE:
        return new Integer(getPage());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case CLASS_ID:
        return isSetClassId();
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndClassId_args)
        return this.equals((getFansListByFanPropertiesAndClassId_args)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndClassId_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_classId = true && this.isSetClassId();
      boolean that_present_classId = true && that.isSetClassId();
      if (this_present_classId || that_present_classId) {
        if (!(this_present_classId && that_present_classId))
          return false;
        if (!this.classId.equals(that.classId))
          return false;
      }

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndClassId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndClassId_args typedOther = (getFansListByFanPropertiesAndClassId_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassId()).compareTo(typedOther.isSetClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, typedOther.classId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CLASS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.classId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.classId != null) {
        oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
        oprot.writeString(this.classId);
        oprot.writeFieldEnd();
      }
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndClassId_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("classId:");
      if (this.classId == null) {
        sb.append("null");
      } else {
        sb.append(this.classId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndClassId_result implements org.apache.thrift.TBase<getFansListByFanPropertiesAndClassId_result, getFansListByFanPropertiesAndClassId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndClassId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndClassId_result.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndClassId_result() {
    }

    public getFansListByFanPropertiesAndClassId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndClassId_result(getFansListByFanPropertiesAndClassId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansListByFanPropertiesAndClassId_result deepCopy() {
      return new getFansListByFanPropertiesAndClassId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansListByFanPropertiesAndClassId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndClassId_result)
        return this.equals((getFansListByFanPropertiesAndClassId_result)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndClassId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndClassId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndClassId_result typedOther = (getFansListByFanPropertiesAndClassId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndClassId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumOfGroupFieldByPropertyCon_args implements org.apache.thrift.TBase<getFansNumOfGroupFieldByPropertyCon_args, getFansNumOfGroupFieldByPropertyCon_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumOfGroupFieldByPropertyCon_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyValue", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField STATIS_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("statisPropertyName", org.apache.thrift.protocol.TType.STRING, (short)6);

    public int appKey;
    public String propertyName;
    public String propertyValue;
    public long startTime;
    public long endTime;
    public String statisPropertyName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      PROPERTY_NAME((short)2, "propertyName"),
      PROPERTY_VALUE((short)3, "propertyValue"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime"),
      STATIS_PROPERTY_NAME((short)6, "statisPropertyName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // PROPERTY_NAME
            return PROPERTY_NAME;
          case 3: // PROPERTY_VALUE
            return PROPERTY_VALUE;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          case 6: // STATIS_PROPERTY_NAME
            return STATIS_PROPERTY_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("propertyValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STATIS_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("statisPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumOfGroupFieldByPropertyCon_args.class, metaDataMap);
    }

    public getFansNumOfGroupFieldByPropertyCon_args() {
    }

    public getFansNumOfGroupFieldByPropertyCon_args(
      int appKey,
      String propertyName,
      String propertyValue,
      long startTime,
      long endTime,
      String statisPropertyName)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.propertyName = propertyName;
      this.propertyValue = propertyValue;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.statisPropertyName = statisPropertyName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumOfGroupFieldByPropertyCon_args(getFansNumOfGroupFieldByPropertyCon_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      if (other.isSetPropertyName()) {
        this.propertyName = other.propertyName;
      }
      if (other.isSetPropertyValue()) {
        this.propertyValue = other.propertyValue;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      if (other.isSetStatisPropertyName()) {
        this.statisPropertyName = other.statisPropertyName;
      }
    }

    public getFansNumOfGroupFieldByPropertyCon_args deepCopy() {
      return new getFansNumOfGroupFieldByPropertyCon_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.propertyName = null;
      this.propertyValue = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      this.statisPropertyName = null;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansNumOfGroupFieldByPropertyCon_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getPropertyName() {
      return this.propertyName;
    }

    public getFansNumOfGroupFieldByPropertyCon_args setPropertyName(String propertyName) {
      this.propertyName = propertyName;
      return this;
    }

    public void unsetPropertyName() {
      this.propertyName = null;
    }

    /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyName() {
      return this.propertyName != null;
    }

    public void setPropertyNameIsSet(boolean value) {
      if (!value) {
        this.propertyName = null;
      }
    }

    public String getPropertyValue() {
      return this.propertyValue;
    }

    public getFansNumOfGroupFieldByPropertyCon_args setPropertyValue(String propertyValue) {
      this.propertyValue = propertyValue;
      return this;
    }

    public void unsetPropertyValue() {
      this.propertyValue = null;
    }

    /** Returns true if field propertyValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyValue() {
      return this.propertyValue != null;
    }

    public void setPropertyValueIsSet(boolean value) {
      if (!value) {
        this.propertyValue = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public getFansNumOfGroupFieldByPropertyCon_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public getFansNumOfGroupFieldByPropertyCon_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
    }

    public String getStatisPropertyName() {
      return this.statisPropertyName;
    }

    public getFansNumOfGroupFieldByPropertyCon_args setStatisPropertyName(String statisPropertyName) {
      this.statisPropertyName = statisPropertyName;
      return this;
    }

    public void unsetStatisPropertyName() {
      this.statisPropertyName = null;
    }

    /** Returns true if field statisPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetStatisPropertyName() {
      return this.statisPropertyName != null;
    }

    public void setStatisPropertyNameIsSet(boolean value) {
      if (!value) {
        this.statisPropertyName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case PROPERTY_NAME:
        if (value == null) {
          unsetPropertyName();
        } else {
          setPropertyName((String)value);
        }
        break;

      case PROPERTY_VALUE:
        if (value == null) {
          unsetPropertyValue();
        } else {
          setPropertyValue((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      case STATIS_PROPERTY_NAME:
        if (value == null) {
          unsetStatisPropertyName();
        } else {
          setStatisPropertyName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case PROPERTY_NAME:
        return getPropertyName();

      case PROPERTY_VALUE:
        return getPropertyValue();

      case START_TIME:
        return new Long(getStartTime());

      case END_TIME:
        return new Long(getEndTime());

      case STATIS_PROPERTY_NAME:
        return getStatisPropertyName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case PROPERTY_NAME:
        return isSetPropertyName();
      case PROPERTY_VALUE:
        return isSetPropertyValue();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case STATIS_PROPERTY_NAME:
        return isSetStatisPropertyName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumOfGroupFieldByPropertyCon_args)
        return this.equals((getFansNumOfGroupFieldByPropertyCon_args)that);
      return false;
    }

    public boolean equals(getFansNumOfGroupFieldByPropertyCon_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_propertyName = true && this.isSetPropertyName();
      boolean that_present_propertyName = true && that.isSetPropertyName();
      if (this_present_propertyName || that_present_propertyName) {
        if (!(this_present_propertyName && that_present_propertyName))
          return false;
        if (!this.propertyName.equals(that.propertyName))
          return false;
      }

      boolean this_present_propertyValue = true && this.isSetPropertyValue();
      boolean that_present_propertyValue = true && that.isSetPropertyValue();
      if (this_present_propertyValue || that_present_propertyValue) {
        if (!(this_present_propertyValue && that_present_propertyValue))
          return false;
        if (!this.propertyValue.equals(that.propertyValue))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_statisPropertyName = true && this.isSetStatisPropertyName();
      boolean that_present_statisPropertyName = true && that.isSetStatisPropertyName();
      if (this_present_statisPropertyName || that_present_statisPropertyName) {
        if (!(this_present_statisPropertyName && that_present_statisPropertyName))
          return false;
        if (!this.statisPropertyName.equals(that.statisPropertyName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumOfGroupFieldByPropertyCon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumOfGroupFieldByPropertyCon_args typedOther = (getFansNumOfGroupFieldByPropertyCon_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(typedOther.isSetPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, typedOther.propertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyValue()).compareTo(typedOther.isSetPropertyValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyValue, typedOther.propertyValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatisPropertyName()).compareTo(typedOther.isSetStatisPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatisPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statisPropertyName, typedOther.statisPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROPERTY_VALUE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyValue = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.startTime = iprot.readI64();
              setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.endTime = iprot.readI64();
              setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // STATIS_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.statisPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.propertyName != null) {
        oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.propertyName);
        oprot.writeFieldEnd();
      }
      if (this.propertyValue != null) {
        oprot.writeFieldBegin(PROPERTY_VALUE_FIELD_DESC);
        oprot.writeString(this.propertyValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(this.endTime);
      oprot.writeFieldEnd();
      if (this.statisPropertyName != null) {
        oprot.writeFieldBegin(STATIS_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.statisPropertyName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumOfGroupFieldByPropertyCon_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyValue:");
      if (this.propertyValue == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("statisPropertyName:");
      if (this.statisPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.statisPropertyName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansNumOfGroupFieldByPropertyCon_result implements org.apache.thrift.TBase<getFansNumOfGroupFieldByPropertyCon_result, getFansNumOfGroupFieldByPropertyCon_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansNumOfGroupFieldByPropertyCon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansNumOfGroupFieldByPropertyCon_result.class, metaDataMap);
    }

    public getFansNumOfGroupFieldByPropertyCon_result() {
    }

    public getFansNumOfGroupFieldByPropertyCon_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansNumOfGroupFieldByPropertyCon_result(getFansNumOfGroupFieldByPropertyCon_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansNumOfGroupFieldByPropertyCon_result deepCopy() {
      return new getFansNumOfGroupFieldByPropertyCon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansNumOfGroupFieldByPropertyCon_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansNumOfGroupFieldByPropertyCon_result)
        return this.equals((getFansNumOfGroupFieldByPropertyCon_result)that);
      return false;
    }

    public boolean equals(getFansNumOfGroupFieldByPropertyCon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansNumOfGroupFieldByPropertyCon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansNumOfGroupFieldByPropertyCon_result typedOther = (getFansNumOfGroupFieldByPropertyCon_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansNumOfGroupFieldByPropertyCon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLatestTimeOfFansPropertyTagCount_args implements org.apache.thrift.TBase<getLatestTimeOfFansPropertyTagCount_args, getLatestTimeOfFansPropertyTagCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestTimeOfFansPropertyTagCount_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);

    public int appKey;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestTimeOfFansPropertyTagCount_args.class, metaDataMap);
    }

    public getLatestTimeOfFansPropertyTagCount_args() {
    }

    public getLatestTimeOfFansPropertyTagCount_args(
      int appKey)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestTimeOfFansPropertyTagCount_args(getLatestTimeOfFansPropertyTagCount_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
    }

    public getLatestTimeOfFansPropertyTagCount_args deepCopy() {
      return new getLatestTimeOfFansPropertyTagCount_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getLatestTimeOfFansPropertyTagCount_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestTimeOfFansPropertyTagCount_args)
        return this.equals((getLatestTimeOfFansPropertyTagCount_args)that);
      return false;
    }

    public boolean equals(getLatestTimeOfFansPropertyTagCount_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLatestTimeOfFansPropertyTagCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLatestTimeOfFansPropertyTagCount_args typedOther = (getLatestTimeOfFansPropertyTagCount_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestTimeOfFansPropertyTagCount_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLatestTimeOfFansPropertyTagCount_result implements org.apache.thrift.TBase<getLatestTimeOfFansPropertyTagCount_result, getLatestTimeOfFansPropertyTagCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestTimeOfFansPropertyTagCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestTimeOfFansPropertyTagCount_result.class, metaDataMap);
    }

    public getLatestTimeOfFansPropertyTagCount_result() {
    }

    public getLatestTimeOfFansPropertyTagCount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestTimeOfFansPropertyTagCount_result(getLatestTimeOfFansPropertyTagCount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getLatestTimeOfFansPropertyTagCount_result deepCopy() {
      return new getLatestTimeOfFansPropertyTagCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getLatestTimeOfFansPropertyTagCount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestTimeOfFansPropertyTagCount_result)
        return this.equals((getLatestTimeOfFansPropertyTagCount_result)that);
      return false;
    }

    public boolean equals(getLatestTimeOfFansPropertyTagCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLatestTimeOfFansPropertyTagCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLatestTimeOfFansPropertyTagCount_result typedOther = (getLatestTimeOfFansPropertyTagCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestTimeOfFansPropertyTagCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndTagIds_args implements org.apache.thrift.TBase<getFansListByFanPropertiesAndTagIds_args, getFansListByFanPropertiesAndTagIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndTagIds_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)8);

    public int appKey;
    public String tagIds;
    public String propertyCondition;
    public int page;
    public int pageSize;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      TAG_IDS((short)2, "tagIds"),
      PROPERTY_CONDITION((short)3, "propertyCondition"),
      PAGE((short)4, "page"),
      PAGE_SIZE((short)5, "pageSize"),
      SORT_FLAG((short)6, "sortFlag"),
      SORT_PROPERTY_NAME((short)7, "sortPropertyName"),
      SORT_TYPE((short)8, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // TAG_IDS
            return TAG_IDS;
          case 3: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 4: // PAGE
            return PAGE;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          case 6: // SORT_FLAG
            return SORT_FLAG;
          case 7: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 8: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __SORTFLAG_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndTagIds_args.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndTagIds_args() {
    }

    public getFansListByFanPropertiesAndTagIds_args(
      int appKey,
      String tagIds,
      String propertyCondition,
      int page,
      int pageSize,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.tagIds = tagIds;
      this.propertyCondition = propertyCondition;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndTagIds_args(getFansListByFanPropertiesAndTagIds_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      if (other.isSetTagIds()) {
        this.tagIds = other.tagIds;
      }
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public getFansListByFanPropertiesAndTagIds_args deepCopy() {
      return new getFansListByFanPropertiesAndTagIds_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.tagIds = null;
      this.propertyCondition = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public getFansListByFanPropertiesAndTagIds_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getTagIds() {
      return this.tagIds;
    }

    public getFansListByFanPropertiesAndTagIds_args setTagIds(String tagIds) {
      this.tagIds = tagIds;
      return this;
    }

    public void unsetTagIds() {
      this.tagIds = null;
    }

    /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTagIds() {
      return this.tagIds != null;
    }

    public void setTagIdsIsSet(boolean value) {
      if (!value) {
        this.tagIds = null;
      }
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public getFansListByFanPropertiesAndTagIds_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public getFansListByFanPropertiesAndTagIds_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getFansListByFanPropertiesAndTagIds_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public getFansListByFanPropertiesAndTagIds_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public getFansListByFanPropertiesAndTagIds_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public getFansListByFanPropertiesAndTagIds_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case TAG_IDS:
        if (value == null) {
          unsetTagIds();
        } else {
          setTagIds((String)value);
        }
        break;

      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case TAG_IDS:
        return getTagIds();

      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case PAGE:
        return new Integer(getPage());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case TAG_IDS:
        return isSetTagIds();
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndTagIds_args)
        return this.equals((getFansListByFanPropertiesAndTagIds_args)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndTagIds_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_tagIds = true && this.isSetTagIds();
      boolean that_present_tagIds = true && that.isSetTagIds();
      if (this_present_tagIds || that_present_tagIds) {
        if (!(this_present_tagIds && that_present_tagIds))
          return false;
        if (!this.tagIds.equals(that.tagIds))
          return false;
      }

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndTagIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndTagIds_args typedOther = (getFansListByFanPropertiesAndTagIds_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_IDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagIds = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(this.tagIds);
        oprot.writeFieldEnd();
      }
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndTagIds_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagIds:");
      if (this.tagIds == null) {
        sb.append("null");
      } else {
        sb.append(this.tagIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansListByFanPropertiesAndTagIds_result implements org.apache.thrift.TBase<getFansListByFanPropertiesAndTagIds_result, getFansListByFanPropertiesAndTagIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansListByFanPropertiesAndTagIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansListByFanPropertiesAndTagIds_result.class, metaDataMap);
    }

    public getFansListByFanPropertiesAndTagIds_result() {
    }

    public getFansListByFanPropertiesAndTagIds_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansListByFanPropertiesAndTagIds_result(getFansListByFanPropertiesAndTagIds_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansListByFanPropertiesAndTagIds_result deepCopy() {
      return new getFansListByFanPropertiesAndTagIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansListByFanPropertiesAndTagIds_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansListByFanPropertiesAndTagIds_result)
        return this.equals((getFansListByFanPropertiesAndTagIds_result)that);
      return false;
    }

    public boolean equals(getFansListByFanPropertiesAndTagIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansListByFanPropertiesAndTagIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansListByFanPropertiesAndTagIds_result typedOther = (getFansListByFanPropertiesAndTagIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansListByFanPropertiesAndTagIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class fetchFansListByFanPropertiesAndAppId_args implements org.apache.thrift.TBase<fetchFansListByFanPropertiesAndAppId_args, fetchFansListByFanPropertiesAndAppId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchFansListByFanPropertiesAndAppId_args");

    private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)7);

    public int appKey;
    public String propertyCondition;
    public int offset;
    public int pageSize;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KEY((short)1, "appKey"),
      PROPERTY_CONDITION((short)2, "propertyCondition"),
      OFFSET((short)3, "offset"),
      PAGE_SIZE((short)4, "pageSize"),
      SORT_FLAG((short)5, "sortFlag"),
      SORT_PROPERTY_NAME((short)6, "sortPropertyName"),
      SORT_TYPE((short)7, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KEY
            return APP_KEY;
          case 2: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 3: // OFFSET
            return OFFSET;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          case 5: // SORT_FLAG
            return SORT_FLAG;
          case 6: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 7: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __SORTFLAG_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchFansListByFanPropertiesAndAppId_args.class, metaDataMap);
    }

    public fetchFansListByFanPropertiesAndAppId_args() {
    }

    public fetchFansListByFanPropertiesAndAppId_args(
      int appKey,
      String propertyCondition,
      int offset,
      int pageSize,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.appKey = appKey;
      setAppKeyIsSet(true);
      this.propertyCondition = propertyCondition;
      this.offset = offset;
      setOffsetIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchFansListByFanPropertiesAndAppId_args(fetchFansListByFanPropertiesAndAppId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appKey = other.appKey;
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      this.offset = other.offset;
      this.pageSize = other.pageSize;
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public fetchFansListByFanPropertiesAndAppId_args deepCopy() {
      return new fetchFansListByFanPropertiesAndAppId_args(this);
    }

    @Override
    public void clear() {
      setAppKeyIsSet(false);
      this.appKey = 0;
      this.propertyCondition = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public int getAppKey() {
      return this.appKey;
    }

    public fetchFansListByFanPropertiesAndAppId_args setAppKey(int appKey) {
      this.appKey = appKey;
      setAppKeyIsSet(true);
      return this;
    }

    public void unsetAppKey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppKeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public fetchFansListByFanPropertiesAndAppId_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public fetchFansListByFanPropertiesAndAppId_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public fetchFansListByFanPropertiesAndAppId_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public fetchFansListByFanPropertiesAndAppId_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public fetchFansListByFanPropertiesAndAppId_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public fetchFansListByFanPropertiesAndAppId_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KEY:
        if (value == null) {
          unsetAppKey();
        } else {
          setAppKey((Integer)value);
        }
        break;

      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KEY:
        return new Integer(getAppKey());

      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case OFFSET:
        return new Integer(getOffset());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KEY:
        return isSetAppKey();
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case OFFSET:
        return isSetOffset();
      case PAGE_SIZE:
        return isSetPageSize();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchFansListByFanPropertiesAndAppId_args)
        return this.equals((fetchFansListByFanPropertiesAndAppId_args)that);
      return false;
    }

    public boolean equals(fetchFansListByFanPropertiesAndAppId_args that) {
      if (that == null)
        return false;

      boolean this_present_appKey = true;
      boolean that_present_appKey = true;
      if (this_present_appKey || that_present_appKey) {
        if (!(this_present_appKey && that_present_appKey))
          return false;
        if (this.appKey != that.appKey)
          return false;
      }

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchFansListByFanPropertiesAndAppId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchFansListByFanPropertiesAndAppId_args typedOther = (fetchFansListByFanPropertiesAndAppId_args)other;

      lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(typedOther.isSetAppKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, typedOther.appKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.appKey = iprot.readI32();
              setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // OFFSET
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.offset = iprot.readI32();
              setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
      oprot.writeI32(this.appKey);
      oprot.writeFieldEnd();
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(this.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchFansListByFanPropertiesAndAppId_args(");
      boolean first = true;

      sb.append("appKey:");
      sb.append(this.appKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class fetchFansListByFanPropertiesAndAppId_result implements org.apache.thrift.TBase<fetchFansListByFanPropertiesAndAppId_result, fetchFansListByFanPropertiesAndAppId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchFansListByFanPropertiesAndAppId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchFansListByFanPropertiesAndAppId_result.class, metaDataMap);
    }

    public fetchFansListByFanPropertiesAndAppId_result() {
    }

    public fetchFansListByFanPropertiesAndAppId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchFansListByFanPropertiesAndAppId_result(fetchFansListByFanPropertiesAndAppId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public fetchFansListByFanPropertiesAndAppId_result deepCopy() {
      return new fetchFansListByFanPropertiesAndAppId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public fetchFansListByFanPropertiesAndAppId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchFansListByFanPropertiesAndAppId_result)
        return this.equals((fetchFansListByFanPropertiesAndAppId_result)that);
      return false;
    }

    public boolean equals(fetchFansListByFanPropertiesAndAppId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchFansListByFanPropertiesAndAppId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchFansListByFanPropertiesAndAppId_result typedOther = (fetchFansListByFanPropertiesAndAppId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchFansListByFanPropertiesAndAppId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansInfoByOpenIds_args implements org.apache.thrift.TBase<getFansInfoByOpenIds_args, getFansInfoByOpenIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansInfoByOpenIds_args");

    private static final org.apache.thrift.protocol.TField OPEN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("openIds", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String openIds;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPEN_IDS((short)1, "openIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPEN_IDS
            return OPEN_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPEN_IDS, new org.apache.thrift.meta_data.FieldMetaData("openIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansInfoByOpenIds_args.class, metaDataMap);
    }

    public getFansInfoByOpenIds_args() {
    }

    public getFansInfoByOpenIds_args(
      String openIds)
    {
      this();
      this.openIds = openIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansInfoByOpenIds_args(getFansInfoByOpenIds_args other) {
      if (other.isSetOpenIds()) {
        this.openIds = other.openIds;
      }
    }

    public getFansInfoByOpenIds_args deepCopy() {
      return new getFansInfoByOpenIds_args(this);
    }

    @Override
    public void clear() {
      this.openIds = null;
    }

    public String getOpenIds() {
      return this.openIds;
    }

    public getFansInfoByOpenIds_args setOpenIds(String openIds) {
      this.openIds = openIds;
      return this;
    }

    public void unsetOpenIds() {
      this.openIds = null;
    }

    /** Returns true if field openIds is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenIds() {
      return this.openIds != null;
    }

    public void setOpenIdsIsSet(boolean value) {
      if (!value) {
        this.openIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPEN_IDS:
        if (value == null) {
          unsetOpenIds();
        } else {
          setOpenIds((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPEN_IDS:
        return getOpenIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPEN_IDS:
        return isSetOpenIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansInfoByOpenIds_args)
        return this.equals((getFansInfoByOpenIds_args)that);
      return false;
    }

    public boolean equals(getFansInfoByOpenIds_args that) {
      if (that == null)
        return false;

      boolean this_present_openIds = true && this.isSetOpenIds();
      boolean that_present_openIds = true && that.isSetOpenIds();
      if (this_present_openIds || that_present_openIds) {
        if (!(this_present_openIds && that_present_openIds))
          return false;
        if (!this.openIds.equals(that.openIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansInfoByOpenIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansInfoByOpenIds_args typedOther = (getFansInfoByOpenIds_args)other;

      lastComparison = Boolean.valueOf(isSetOpenIds()).compareTo(typedOther.isSetOpenIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openIds, typedOther.openIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // OPEN_IDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.openIds = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.openIds != null) {
        oprot.writeFieldBegin(OPEN_IDS_FIELD_DESC);
        oprot.writeString(this.openIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansInfoByOpenIds_args(");
      boolean first = true;

      sb.append("openIds:");
      if (this.openIds == null) {
        sb.append("null");
      } else {
        sb.append(this.openIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFansInfoByOpenIds_result implements org.apache.thrift.TBase<getFansInfoByOpenIds_result, getFansInfoByOpenIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFansInfoByOpenIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFansInfoByOpenIds_result.class, metaDataMap);
    }

    public getFansInfoByOpenIds_result() {
    }

    public getFansInfoByOpenIds_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFansInfoByOpenIds_result(getFansInfoByOpenIds_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFansInfoByOpenIds_result deepCopy() {
      return new getFansInfoByOpenIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFansInfoByOpenIds_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFansInfoByOpenIds_result)
        return this.equals((getFansInfoByOpenIds_result)that);
      return false;
    }

    public boolean equals(getFansInfoByOpenIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFansInfoByOpenIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFansInfoByOpenIds_result typedOther = (getFansInfoByOpenIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFansInfoByOpenIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getListByRecursivePropertiesAndTagIds_args implements org.apache.thrift.TBase<getListByRecursivePropertiesAndTagIds_args, getListByRecursivePropertiesAndTagIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListByRecursivePropertiesAndTagIds_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)6);

    public String propertyCondition;
    public int page;
    public int pageSize;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_CONDITION((short)1, "propertyCondition"),
      PAGE((short)2, "page"),
      PAGE_SIZE((short)3, "pageSize"),
      SORT_FLAG((short)4, "sortFlag"),
      SORT_PROPERTY_NAME((short)5, "sortPropertyName"),
      SORT_TYPE((short)6, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 2: // PAGE
            return PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          case 4: // SORT_FLAG
            return SORT_FLAG;
          case 5: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 6: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private static final int __SORTFLAG_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListByRecursivePropertiesAndTagIds_args.class, metaDataMap);
    }

    public getListByRecursivePropertiesAndTagIds_args() {
    }

    public getListByRecursivePropertiesAndTagIds_args(
      String propertyCondition,
      int page,
      int pageSize,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.propertyCondition = propertyCondition;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListByRecursivePropertiesAndTagIds_args(getListByRecursivePropertiesAndTagIds_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public getListByRecursivePropertiesAndTagIds_args deepCopy() {
      return new getListByRecursivePropertiesAndTagIds_args(this);
    }

    @Override
    public void clear() {
      this.propertyCondition = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public getListByRecursivePropertiesAndTagIds_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public getListByRecursivePropertiesAndTagIds_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getListByRecursivePropertiesAndTagIds_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public getListByRecursivePropertiesAndTagIds_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public getListByRecursivePropertiesAndTagIds_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public getListByRecursivePropertiesAndTagIds_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case PAGE:
        return new Integer(getPage());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListByRecursivePropertiesAndTagIds_args)
        return this.equals((getListByRecursivePropertiesAndTagIds_args)that);
      return false;
    }

    public boolean equals(getListByRecursivePropertiesAndTagIds_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListByRecursivePropertiesAndTagIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListByRecursivePropertiesAndTagIds_args typedOther = (getListByRecursivePropertiesAndTagIds_args)other;

      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListByRecursivePropertiesAndTagIds_args(");
      boolean first = true;

      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getListByRecursivePropertiesAndTagIds_result implements org.apache.thrift.TBase<getListByRecursivePropertiesAndTagIds_result, getListByRecursivePropertiesAndTagIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListByRecursivePropertiesAndTagIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListByRecursivePropertiesAndTagIds_result.class, metaDataMap);
    }

    public getListByRecursivePropertiesAndTagIds_result() {
    }

    public getListByRecursivePropertiesAndTagIds_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListByRecursivePropertiesAndTagIds_result(getListByRecursivePropertiesAndTagIds_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getListByRecursivePropertiesAndTagIds_result deepCopy() {
      return new getListByRecursivePropertiesAndTagIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getListByRecursivePropertiesAndTagIds_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListByRecursivePropertiesAndTagIds_result)
        return this.equals((getListByRecursivePropertiesAndTagIds_result)that);
      return false;
    }

    public boolean equals(getListByRecursivePropertiesAndTagIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListByRecursivePropertiesAndTagIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListByRecursivePropertiesAndTagIds_result typedOther = (getListByRecursivePropertiesAndTagIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListByRecursivePropertiesAndTagIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getListByCollectionQuery_args implements org.apache.thrift.TBase<getListByCollectionQuery_args, getListByCollectionQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListByCollectionQuery_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("tagCondition", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SORT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFlag", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPropertyName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)7);

    public String propertyCondition;
    public String tagCondition;
    public int page;
    public int pageSize;
    public boolean sortFlag;
    public String sortPropertyName;
    public String sortType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_CONDITION((short)1, "propertyCondition"),
      TAG_CONDITION((short)2, "tagCondition"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize"),
      SORT_FLAG((short)5, "sortFlag"),
      SORT_PROPERTY_NAME((short)6, "sortPropertyName"),
      SORT_TYPE((short)7, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 2: // TAG_CONDITION
            return TAG_CONDITION;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          case 5: // SORT_FLAG
            return SORT_FLAG;
          case 6: // SORT_PROPERTY_NAME
            return SORT_PROPERTY_NAME;
          case 7: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private static final int __SORTFLAG_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("tagCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SORT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("sortFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SORT_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortPropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListByCollectionQuery_args.class, metaDataMap);
    }

    public getListByCollectionQuery_args() {
    }

    public getListByCollectionQuery_args(
      String propertyCondition,
      String tagCondition,
      int page,
      int pageSize,
      boolean sortFlag,
      String sortPropertyName,
      String sortType)
    {
      this();
      this.propertyCondition = propertyCondition;
      this.tagCondition = tagCondition;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      this.sortPropertyName = sortPropertyName;
      this.sortType = sortType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListByCollectionQuery_args(getListByCollectionQuery_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      if (other.isSetTagCondition()) {
        this.tagCondition = other.tagCondition;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      this.sortFlag = other.sortFlag;
      if (other.isSetSortPropertyName()) {
        this.sortPropertyName = other.sortPropertyName;
      }
      if (other.isSetSortType()) {
        this.sortType = other.sortType;
      }
    }

    public getListByCollectionQuery_args deepCopy() {
      return new getListByCollectionQuery_args(this);
    }

    @Override
    public void clear() {
      this.propertyCondition = null;
      this.tagCondition = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setSortFlagIsSet(false);
      this.sortFlag = false;
      this.sortPropertyName = null;
      this.sortType = null;
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public getListByCollectionQuery_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public String getTagCondition() {
      return this.tagCondition;
    }

    public getListByCollectionQuery_args setTagCondition(String tagCondition) {
      this.tagCondition = tagCondition;
      return this;
    }

    public void unsetTagCondition() {
      this.tagCondition = null;
    }

    /** Returns true if field tagCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetTagCondition() {
      return this.tagCondition != null;
    }

    public void setTagConditionIsSet(boolean value) {
      if (!value) {
        this.tagCondition = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public getListByCollectionQuery_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getListByCollectionQuery_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public boolean isSortFlag() {
      return this.sortFlag;
    }

    public getListByCollectionQuery_args setSortFlag(boolean sortFlag) {
      this.sortFlag = sortFlag;
      setSortFlagIsSet(true);
      return this;
    }

    public void unsetSortFlag() {
      __isset_bit_vector.clear(__SORTFLAG_ISSET_ID);
    }

    /** Returns true if field sortFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetSortFlag() {
      return __isset_bit_vector.get(__SORTFLAG_ISSET_ID);
    }

    public void setSortFlagIsSet(boolean value) {
      __isset_bit_vector.set(__SORTFLAG_ISSET_ID, value);
    }

    public String getSortPropertyName() {
      return this.sortPropertyName;
    }

    public getListByCollectionQuery_args setSortPropertyName(String sortPropertyName) {
      this.sortPropertyName = sortPropertyName;
      return this;
    }

    public void unsetSortPropertyName() {
      this.sortPropertyName = null;
    }

    /** Returns true if field sortPropertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortPropertyName() {
      return this.sortPropertyName != null;
    }

    public void setSortPropertyNameIsSet(boolean value) {
      if (!value) {
        this.sortPropertyName = null;
      }
    }

    public String getSortType() {
      return this.sortType;
    }

    public getListByCollectionQuery_args setSortType(String sortType) {
      this.sortType = sortType;
      return this;
    }

    public void unsetSortType() {
      this.sortType = null;
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return this.sortType != null;
    }

    public void setSortTypeIsSet(boolean value) {
      if (!value) {
        this.sortType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case TAG_CONDITION:
        if (value == null) {
          unsetTagCondition();
        } else {
          setTagCondition((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SORT_FLAG:
        if (value == null) {
          unsetSortFlag();
        } else {
          setSortFlag((Boolean)value);
        }
        break;

      case SORT_PROPERTY_NAME:
        if (value == null) {
          unsetSortPropertyName();
        } else {
          setSortPropertyName((String)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case TAG_CONDITION:
        return getTagCondition();

      case PAGE:
        return new Integer(getPage());

      case PAGE_SIZE:
        return new Integer(getPageSize());

      case SORT_FLAG:
        return new Boolean(isSortFlag());

      case SORT_PROPERTY_NAME:
        return getSortPropertyName();

      case SORT_TYPE:
        return getSortType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case TAG_CONDITION:
        return isSetTagCondition();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case SORT_FLAG:
        return isSetSortFlag();
      case SORT_PROPERTY_NAME:
        return isSetSortPropertyName();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListByCollectionQuery_args)
        return this.equals((getListByCollectionQuery_args)that);
      return false;
    }

    public boolean equals(getListByCollectionQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_tagCondition = true && this.isSetTagCondition();
      boolean that_present_tagCondition = true && that.isSetTagCondition();
      if (this_present_tagCondition || that_present_tagCondition) {
        if (!(this_present_tagCondition && that_present_tagCondition))
          return false;
        if (!this.tagCondition.equals(that.tagCondition))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sortFlag = true;
      boolean that_present_sortFlag = true;
      if (this_present_sortFlag || that_present_sortFlag) {
        if (!(this_present_sortFlag && that_present_sortFlag))
          return false;
        if (this.sortFlag != that.sortFlag)
          return false;
      }

      boolean this_present_sortPropertyName = true && this.isSetSortPropertyName();
      boolean that_present_sortPropertyName = true && that.isSetSortPropertyName();
      if (this_present_sortPropertyName || that_present_sortPropertyName) {
        if (!(this_present_sortPropertyName && that_present_sortPropertyName))
          return false;
        if (!this.sortPropertyName.equals(that.sortPropertyName))
          return false;
      }

      boolean this_present_sortType = true && this.isSetSortType();
      boolean that_present_sortType = true && that.isSetSortType();
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (!this.sortType.equals(that.sortType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListByCollectionQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListByCollectionQuery_args typedOther = (getListByCollectionQuery_args)other;

      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagCondition()).compareTo(typedOther.isSetTagCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagCondition, typedOther.tagCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortFlag()).compareTo(typedOther.isSetSortFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFlag, typedOther.sortFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortPropertyName()).compareTo(typedOther.isSetSortPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPropertyName, typedOther.sortPropertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAGE_SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.pageSize = iprot.readI32();
              setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // SORT_FLAG
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.sortFlag = iprot.readBool();
              setSortFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SORT_PROPERTY_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortPropertyName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SORT_TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sortType = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      if (this.tagCondition != null) {
        oprot.writeFieldBegin(TAG_CONDITION_FIELD_DESC);
        oprot.writeString(this.tagCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_FLAG_FIELD_DESC);
      oprot.writeBool(this.sortFlag);
      oprot.writeFieldEnd();
      if (this.sortPropertyName != null) {
        oprot.writeFieldBegin(SORT_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(this.sortPropertyName);
        oprot.writeFieldEnd();
      }
      if (this.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(this.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListByCollectionQuery_args(");
      boolean first = true;

      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagCondition:");
      if (this.tagCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.tagCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortFlag:");
      sb.append(this.sortFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortPropertyName:");
      if (this.sortPropertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortPropertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      if (this.sortType == null) {
        sb.append("null");
      } else {
        sb.append(this.sortType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getListByCollectionQuery_result implements org.apache.thrift.TBase<getListByCollectionQuery_result, getListByCollectionQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListByCollectionQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListByCollectionQuery_result.class, metaDataMap);
    }

    public getListByCollectionQuery_result() {
    }

    public getListByCollectionQuery_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListByCollectionQuery_result(getListByCollectionQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getListByCollectionQuery_result deepCopy() {
      return new getListByCollectionQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getListByCollectionQuery_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListByCollectionQuery_result)
        return this.equals((getListByCollectionQuery_result)that);
      return false;
    }

    public boolean equals(getListByCollectionQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListByCollectionQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListByCollectionQuery_result typedOther = (getListByCollectionQuery_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListByCollectionQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class groupByByCollectionQuery_args implements org.apache.thrift.TBase<groupByByCollectionQuery_args, groupByByCollectionQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByByCollectionQuery_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("tagCondition", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupFieldName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BOUNDARY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("boundaryStr", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SAMPLE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sampleCount", org.apache.thrift.protocol.TType.I32, (short)5);

    public String propertyCondition;
    public String tagCondition;
    public String groupFieldName;
    public String boundaryStr;
    public int sampleCount;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_CONDITION((short)1, "propertyCondition"),
      TAG_CONDITION((short)2, "tagCondition"),
      GROUP_FIELD_NAME((short)3, "groupFieldName"),
      BOUNDARY_STR((short)4, "boundaryStr"),
      SAMPLE_COUNT((short)5, "sampleCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 2: // TAG_CONDITION
            return TAG_CONDITION;
          case 3: // GROUP_FIELD_NAME
            return GROUP_FIELD_NAME;
          case 4: // BOUNDARY_STR
            return BOUNDARY_STR;
          case 5: // SAMPLE_COUNT
            return SAMPLE_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SAMPLECOUNT_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("tagCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupFieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BOUNDARY_STR, new org.apache.thrift.meta_data.FieldMetaData("boundaryStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SAMPLE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sampleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByByCollectionQuery_args.class, metaDataMap);
    }

    public groupByByCollectionQuery_args() {
    }

    public groupByByCollectionQuery_args(
      String propertyCondition,
      String tagCondition,
      String groupFieldName,
      String boundaryStr,
      int sampleCount)
    {
      this();
      this.propertyCondition = propertyCondition;
      this.tagCondition = tagCondition;
      this.groupFieldName = groupFieldName;
      this.boundaryStr = boundaryStr;
      this.sampleCount = sampleCount;
      setSampleCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByByCollectionQuery_args(groupByByCollectionQuery_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      if (other.isSetTagCondition()) {
        this.tagCondition = other.tagCondition;
      }
      if (other.isSetGroupFieldName()) {
        this.groupFieldName = other.groupFieldName;
      }
      if (other.isSetBoundaryStr()) {
        this.boundaryStr = other.boundaryStr;
      }
      this.sampleCount = other.sampleCount;
    }

    public groupByByCollectionQuery_args deepCopy() {
      return new groupByByCollectionQuery_args(this);
    }

    @Override
    public void clear() {
      this.propertyCondition = null;
      this.tagCondition = null;
      this.groupFieldName = null;
      this.boundaryStr = null;
      setSampleCountIsSet(false);
      this.sampleCount = 0;
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public groupByByCollectionQuery_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public String getTagCondition() {
      return this.tagCondition;
    }

    public groupByByCollectionQuery_args setTagCondition(String tagCondition) {
      this.tagCondition = tagCondition;
      return this;
    }

    public void unsetTagCondition() {
      this.tagCondition = null;
    }

    /** Returns true if field tagCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetTagCondition() {
      return this.tagCondition != null;
    }

    public void setTagConditionIsSet(boolean value) {
      if (!value) {
        this.tagCondition = null;
      }
    }

    public String getGroupFieldName() {
      return this.groupFieldName;
    }

    public groupByByCollectionQuery_args setGroupFieldName(String groupFieldName) {
      this.groupFieldName = groupFieldName;
      return this;
    }

    public void unsetGroupFieldName() {
      this.groupFieldName = null;
    }

    /** Returns true if field groupFieldName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupFieldName() {
      return this.groupFieldName != null;
    }

    public void setGroupFieldNameIsSet(boolean value) {
      if (!value) {
        this.groupFieldName = null;
      }
    }

    public String getBoundaryStr() {
      return this.boundaryStr;
    }

    public groupByByCollectionQuery_args setBoundaryStr(String boundaryStr) {
      this.boundaryStr = boundaryStr;
      return this;
    }

    public void unsetBoundaryStr() {
      this.boundaryStr = null;
    }

    /** Returns true if field boundaryStr is set (has been assigned a value) and false otherwise */
    public boolean isSetBoundaryStr() {
      return this.boundaryStr != null;
    }

    public void setBoundaryStrIsSet(boolean value) {
      if (!value) {
        this.boundaryStr = null;
      }
    }

    public int getSampleCount() {
      return this.sampleCount;
    }

    public groupByByCollectionQuery_args setSampleCount(int sampleCount) {
      this.sampleCount = sampleCount;
      setSampleCountIsSet(true);
      return this;
    }

    public void unsetSampleCount() {
      __isset_bit_vector.clear(__SAMPLECOUNT_ISSET_ID);
    }

    /** Returns true if field sampleCount is set (has been assigned a value) and false otherwise */
    public boolean isSetSampleCount() {
      return __isset_bit_vector.get(__SAMPLECOUNT_ISSET_ID);
    }

    public void setSampleCountIsSet(boolean value) {
      __isset_bit_vector.set(__SAMPLECOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case TAG_CONDITION:
        if (value == null) {
          unsetTagCondition();
        } else {
          setTagCondition((String)value);
        }
        break;

      case GROUP_FIELD_NAME:
        if (value == null) {
          unsetGroupFieldName();
        } else {
          setGroupFieldName((String)value);
        }
        break;

      case BOUNDARY_STR:
        if (value == null) {
          unsetBoundaryStr();
        } else {
          setBoundaryStr((String)value);
        }
        break;

      case SAMPLE_COUNT:
        if (value == null) {
          unsetSampleCount();
        } else {
          setSampleCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case TAG_CONDITION:
        return getTagCondition();

      case GROUP_FIELD_NAME:
        return getGroupFieldName();

      case BOUNDARY_STR:
        return getBoundaryStr();

      case SAMPLE_COUNT:
        return new Integer(getSampleCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case TAG_CONDITION:
        return isSetTagCondition();
      case GROUP_FIELD_NAME:
        return isSetGroupFieldName();
      case BOUNDARY_STR:
        return isSetBoundaryStr();
      case SAMPLE_COUNT:
        return isSetSampleCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByByCollectionQuery_args)
        return this.equals((groupByByCollectionQuery_args)that);
      return false;
    }

    public boolean equals(groupByByCollectionQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_tagCondition = true && this.isSetTagCondition();
      boolean that_present_tagCondition = true && that.isSetTagCondition();
      if (this_present_tagCondition || that_present_tagCondition) {
        if (!(this_present_tagCondition && that_present_tagCondition))
          return false;
        if (!this.tagCondition.equals(that.tagCondition))
          return false;
      }

      boolean this_present_groupFieldName = true && this.isSetGroupFieldName();
      boolean that_present_groupFieldName = true && that.isSetGroupFieldName();
      if (this_present_groupFieldName || that_present_groupFieldName) {
        if (!(this_present_groupFieldName && that_present_groupFieldName))
          return false;
        if (!this.groupFieldName.equals(that.groupFieldName))
          return false;
      }

      boolean this_present_boundaryStr = true && this.isSetBoundaryStr();
      boolean that_present_boundaryStr = true && that.isSetBoundaryStr();
      if (this_present_boundaryStr || that_present_boundaryStr) {
        if (!(this_present_boundaryStr && that_present_boundaryStr))
          return false;
        if (!this.boundaryStr.equals(that.boundaryStr))
          return false;
      }

      boolean this_present_sampleCount = true;
      boolean that_present_sampleCount = true;
      if (this_present_sampleCount || that_present_sampleCount) {
        if (!(this_present_sampleCount && that_present_sampleCount))
          return false;
        if (this.sampleCount != that.sampleCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(groupByByCollectionQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      groupByByCollectionQuery_args typedOther = (groupByByCollectionQuery_args)other;

      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagCondition()).compareTo(typedOther.isSetTagCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagCondition, typedOther.tagCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupFieldName()).compareTo(typedOther.isSetGroupFieldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupFieldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupFieldName, typedOther.groupFieldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBoundaryStr()).compareTo(typedOther.isSetBoundaryStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoundaryStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boundaryStr, typedOther.boundaryStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSampleCount()).compareTo(typedOther.isSetSampleCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSampleCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampleCount, typedOther.sampleCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GROUP_FIELD_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupFieldName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // BOUNDARY_STR
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.boundaryStr = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // SAMPLE_COUNT
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.sampleCount = iprot.readI32();
              setSampleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      if (this.tagCondition != null) {
        oprot.writeFieldBegin(TAG_CONDITION_FIELD_DESC);
        oprot.writeString(this.tagCondition);
        oprot.writeFieldEnd();
      }
      if (this.groupFieldName != null) {
        oprot.writeFieldBegin(GROUP_FIELD_NAME_FIELD_DESC);
        oprot.writeString(this.groupFieldName);
        oprot.writeFieldEnd();
      }
      if (this.boundaryStr != null) {
        oprot.writeFieldBegin(BOUNDARY_STR_FIELD_DESC);
        oprot.writeString(this.boundaryStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAMPLE_COUNT_FIELD_DESC);
      oprot.writeI32(this.sampleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupByByCollectionQuery_args(");
      boolean first = true;

      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagCondition:");
      if (this.tagCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.tagCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupFieldName:");
      if (this.groupFieldName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupFieldName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("boundaryStr:");
      if (this.boundaryStr == null) {
        sb.append("null");
      } else {
        sb.append(this.boundaryStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sampleCount:");
      sb.append(this.sampleCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class groupByByCollectionQuery_result implements org.apache.thrift.TBase<groupByByCollectionQuery_result, groupByByCollectionQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByByCollectionQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByByCollectionQuery_result.class, metaDataMap);
    }

    public groupByByCollectionQuery_result() {
    }

    public groupByByCollectionQuery_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByByCollectionQuery_result(groupByByCollectionQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public groupByByCollectionQuery_result deepCopy() {
      return new groupByByCollectionQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public groupByByCollectionQuery_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByByCollectionQuery_result)
        return this.equals((groupByByCollectionQuery_result)that);
      return false;
    }

    public boolean equals(groupByByCollectionQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(groupByByCollectionQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      groupByByCollectionQuery_result typedOther = (groupByByCollectionQuery_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupByByCollectionQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class groupSpecialTagIdByRecursiveFilter_args implements org.apache.thrift.TBase<groupSpecialTagIdByRecursiveFilter_args, groupSpecialTagIdByRecursiveFilter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupSpecialTagIdByRecursiveFilter_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("tagCondition", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupFieldName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BOUNDARY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("boundaryStr", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField GROUP_TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTagId", org.apache.thrift.protocol.TType.I32, (short)5);

    public String propertyCondition;
    public String tagCondition;
    public String groupFieldName;
    public String boundaryStr;
    public int groupTagId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_CONDITION((short)1, "propertyCondition"),
      TAG_CONDITION((short)2, "tagCondition"),
      GROUP_FIELD_NAME((short)3, "groupFieldName"),
      BOUNDARY_STR((short)4, "boundaryStr"),
      GROUP_TAG_ID((short)5, "groupTagId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 2: // TAG_CONDITION
            return TAG_CONDITION;
          case 3: // GROUP_FIELD_NAME
            return GROUP_FIELD_NAME;
          case 4: // BOUNDARY_STR
            return BOUNDARY_STR;
          case 5: // GROUP_TAG_ID
            return GROUP_TAG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPTAGID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("tagCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupFieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BOUNDARY_STR, new org.apache.thrift.meta_data.FieldMetaData("boundaryStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("groupTagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupSpecialTagIdByRecursiveFilter_args.class, metaDataMap);
    }

    public groupSpecialTagIdByRecursiveFilter_args() {
    }

    public groupSpecialTagIdByRecursiveFilter_args(
      String propertyCondition,
      String tagCondition,
      String groupFieldName,
      String boundaryStr,
      int groupTagId)
    {
      this();
      this.propertyCondition = propertyCondition;
      this.tagCondition = tagCondition;
      this.groupFieldName = groupFieldName;
      this.boundaryStr = boundaryStr;
      this.groupTagId = groupTagId;
      setGroupTagIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupSpecialTagIdByRecursiveFilter_args(groupSpecialTagIdByRecursiveFilter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      if (other.isSetTagCondition()) {
        this.tagCondition = other.tagCondition;
      }
      if (other.isSetGroupFieldName()) {
        this.groupFieldName = other.groupFieldName;
      }
      if (other.isSetBoundaryStr()) {
        this.boundaryStr = other.boundaryStr;
      }
      this.groupTagId = other.groupTagId;
    }

    public groupSpecialTagIdByRecursiveFilter_args deepCopy() {
      return new groupSpecialTagIdByRecursiveFilter_args(this);
    }

    @Override
    public void clear() {
      this.propertyCondition = null;
      this.tagCondition = null;
      this.groupFieldName = null;
      this.boundaryStr = null;
      setGroupTagIdIsSet(false);
      this.groupTagId = 0;
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public groupSpecialTagIdByRecursiveFilter_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public String getTagCondition() {
      return this.tagCondition;
    }

    public groupSpecialTagIdByRecursiveFilter_args setTagCondition(String tagCondition) {
      this.tagCondition = tagCondition;
      return this;
    }

    public void unsetTagCondition() {
      this.tagCondition = null;
    }

    /** Returns true if field tagCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetTagCondition() {
      return this.tagCondition != null;
    }

    public void setTagConditionIsSet(boolean value) {
      if (!value) {
        this.tagCondition = null;
      }
    }

    public String getGroupFieldName() {
      return this.groupFieldName;
    }

    public groupSpecialTagIdByRecursiveFilter_args setGroupFieldName(String groupFieldName) {
      this.groupFieldName = groupFieldName;
      return this;
    }

    public void unsetGroupFieldName() {
      this.groupFieldName = null;
    }

    /** Returns true if field groupFieldName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupFieldName() {
      return this.groupFieldName != null;
    }

    public void setGroupFieldNameIsSet(boolean value) {
      if (!value) {
        this.groupFieldName = null;
      }
    }

    public String getBoundaryStr() {
      return this.boundaryStr;
    }

    public groupSpecialTagIdByRecursiveFilter_args setBoundaryStr(String boundaryStr) {
      this.boundaryStr = boundaryStr;
      return this;
    }

    public void unsetBoundaryStr() {
      this.boundaryStr = null;
    }

    /** Returns true if field boundaryStr is set (has been assigned a value) and false otherwise */
    public boolean isSetBoundaryStr() {
      return this.boundaryStr != null;
    }

    public void setBoundaryStrIsSet(boolean value) {
      if (!value) {
        this.boundaryStr = null;
      }
    }

    public int getGroupTagId() {
      return this.groupTagId;
    }

    public groupSpecialTagIdByRecursiveFilter_args setGroupTagId(int groupTagId) {
      this.groupTagId = groupTagId;
      setGroupTagIdIsSet(true);
      return this;
    }

    public void unsetGroupTagId() {
      __isset_bit_vector.clear(__GROUPTAGID_ISSET_ID);
    }

    /** Returns true if field groupTagId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupTagId() {
      return __isset_bit_vector.get(__GROUPTAGID_ISSET_ID);
    }

    public void setGroupTagIdIsSet(boolean value) {
      __isset_bit_vector.set(__GROUPTAGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case TAG_CONDITION:
        if (value == null) {
          unsetTagCondition();
        } else {
          setTagCondition((String)value);
        }
        break;

      case GROUP_FIELD_NAME:
        if (value == null) {
          unsetGroupFieldName();
        } else {
          setGroupFieldName((String)value);
        }
        break;

      case BOUNDARY_STR:
        if (value == null) {
          unsetBoundaryStr();
        } else {
          setBoundaryStr((String)value);
        }
        break;

      case GROUP_TAG_ID:
        if (value == null) {
          unsetGroupTagId();
        } else {
          setGroupTagId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case TAG_CONDITION:
        return getTagCondition();

      case GROUP_FIELD_NAME:
        return getGroupFieldName();

      case BOUNDARY_STR:
        return getBoundaryStr();

      case GROUP_TAG_ID:
        return new Integer(getGroupTagId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case TAG_CONDITION:
        return isSetTagCondition();
      case GROUP_FIELD_NAME:
        return isSetGroupFieldName();
      case BOUNDARY_STR:
        return isSetBoundaryStr();
      case GROUP_TAG_ID:
        return isSetGroupTagId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupSpecialTagIdByRecursiveFilter_args)
        return this.equals((groupSpecialTagIdByRecursiveFilter_args)that);
      return false;
    }

    public boolean equals(groupSpecialTagIdByRecursiveFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_tagCondition = true && this.isSetTagCondition();
      boolean that_present_tagCondition = true && that.isSetTagCondition();
      if (this_present_tagCondition || that_present_tagCondition) {
        if (!(this_present_tagCondition && that_present_tagCondition))
          return false;
        if (!this.tagCondition.equals(that.tagCondition))
          return false;
      }

      boolean this_present_groupFieldName = true && this.isSetGroupFieldName();
      boolean that_present_groupFieldName = true && that.isSetGroupFieldName();
      if (this_present_groupFieldName || that_present_groupFieldName) {
        if (!(this_present_groupFieldName && that_present_groupFieldName))
          return false;
        if (!this.groupFieldName.equals(that.groupFieldName))
          return false;
      }

      boolean this_present_boundaryStr = true && this.isSetBoundaryStr();
      boolean that_present_boundaryStr = true && that.isSetBoundaryStr();
      if (this_present_boundaryStr || that_present_boundaryStr) {
        if (!(this_present_boundaryStr && that_present_boundaryStr))
          return false;
        if (!this.boundaryStr.equals(that.boundaryStr))
          return false;
      }

      boolean this_present_groupTagId = true;
      boolean that_present_groupTagId = true;
      if (this_present_groupTagId || that_present_groupTagId) {
        if (!(this_present_groupTagId && that_present_groupTagId))
          return false;
        if (this.groupTagId != that.groupTagId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(groupSpecialTagIdByRecursiveFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      groupSpecialTagIdByRecursiveFilter_args typedOther = (groupSpecialTagIdByRecursiveFilter_args)other;

      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagCondition()).compareTo(typedOther.isSetTagCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagCondition, typedOther.tagCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupFieldName()).compareTo(typedOther.isSetGroupFieldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupFieldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupFieldName, typedOther.groupFieldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBoundaryStr()).compareTo(typedOther.isSetBoundaryStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoundaryStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boundaryStr, typedOther.boundaryStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupTagId()).compareTo(typedOther.isSetGroupTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTagId, typedOther.groupTagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GROUP_FIELD_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupFieldName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // BOUNDARY_STR
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.boundaryStr = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // GROUP_TAG_ID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.groupTagId = iprot.readI32();
              setGroupTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      if (this.tagCondition != null) {
        oprot.writeFieldBegin(TAG_CONDITION_FIELD_DESC);
        oprot.writeString(this.tagCondition);
        oprot.writeFieldEnd();
      }
      if (this.groupFieldName != null) {
        oprot.writeFieldBegin(GROUP_FIELD_NAME_FIELD_DESC);
        oprot.writeString(this.groupFieldName);
        oprot.writeFieldEnd();
      }
      if (this.boundaryStr != null) {
        oprot.writeFieldBegin(BOUNDARY_STR_FIELD_DESC);
        oprot.writeString(this.boundaryStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GROUP_TAG_ID_FIELD_DESC);
      oprot.writeI32(this.groupTagId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupSpecialTagIdByRecursiveFilter_args(");
      boolean first = true;

      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagCondition:");
      if (this.tagCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.tagCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupFieldName:");
      if (this.groupFieldName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupFieldName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("boundaryStr:");
      if (this.boundaryStr == null) {
        sb.append("null");
      } else {
        sb.append(this.boundaryStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupTagId:");
      sb.append(this.groupTagId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class groupSpecialTagIdByRecursiveFilter_result implements org.apache.thrift.TBase<groupSpecialTagIdByRecursiveFilter_result, groupSpecialTagIdByRecursiveFilter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupSpecialTagIdByRecursiveFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupSpecialTagIdByRecursiveFilter_result.class, metaDataMap);
    }

    public groupSpecialTagIdByRecursiveFilter_result() {
    }

    public groupSpecialTagIdByRecursiveFilter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupSpecialTagIdByRecursiveFilter_result(groupSpecialTagIdByRecursiveFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public groupSpecialTagIdByRecursiveFilter_result deepCopy() {
      return new groupSpecialTagIdByRecursiveFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public groupSpecialTagIdByRecursiveFilter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupSpecialTagIdByRecursiveFilter_result)
        return this.equals((groupSpecialTagIdByRecursiveFilter_result)that);
      return false;
    }

    public boolean equals(groupSpecialTagIdByRecursiveFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(groupSpecialTagIdByRecursiveFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      groupSpecialTagIdByRecursiveFilter_result typedOther = (groupSpecialTagIdByRecursiveFilter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupSpecialTagIdByRecursiveFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class groupTagsByRecursiveFilter_args implements org.apache.thrift.TBase<groupTagsByRecursiveFilter_args, groupTagsByRecursiveFilter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupTagsByRecursiveFilter_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCondition", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("tagCondition", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String propertyCondition;
    public String tagCondition;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_CONDITION((short)1, "propertyCondition"),
      TAG_CONDITION((short)2, "tagCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_CONDITION
            return PROPERTY_CONDITION;
          case 2: // TAG_CONDITION
            return TAG_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("propertyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("tagCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupTagsByRecursiveFilter_args.class, metaDataMap);
    }

    public groupTagsByRecursiveFilter_args() {
    }

    public groupTagsByRecursiveFilter_args(
      String propertyCondition,
      String tagCondition)
    {
      this();
      this.propertyCondition = propertyCondition;
      this.tagCondition = tagCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupTagsByRecursiveFilter_args(groupTagsByRecursiveFilter_args other) {
      if (other.isSetPropertyCondition()) {
        this.propertyCondition = other.propertyCondition;
      }
      if (other.isSetTagCondition()) {
        this.tagCondition = other.tagCondition;
      }
    }

    public groupTagsByRecursiveFilter_args deepCopy() {
      return new groupTagsByRecursiveFilter_args(this);
    }

    @Override
    public void clear() {
      this.propertyCondition = null;
      this.tagCondition = null;
    }

    public String getPropertyCondition() {
      return this.propertyCondition;
    }

    public groupTagsByRecursiveFilter_args setPropertyCondition(String propertyCondition) {
      this.propertyCondition = propertyCondition;
      return this;
    }

    public void unsetPropertyCondition() {
      this.propertyCondition = null;
    }

    /** Returns true if field propertyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyCondition() {
      return this.propertyCondition != null;
    }

    public void setPropertyConditionIsSet(boolean value) {
      if (!value) {
        this.propertyCondition = null;
      }
    }

    public String getTagCondition() {
      return this.tagCondition;
    }

    public groupTagsByRecursiveFilter_args setTagCondition(String tagCondition) {
      this.tagCondition = tagCondition;
      return this;
    }

    public void unsetTagCondition() {
      this.tagCondition = null;
    }

    /** Returns true if field tagCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetTagCondition() {
      return this.tagCondition != null;
    }

    public void setTagConditionIsSet(boolean value) {
      if (!value) {
        this.tagCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_CONDITION:
        if (value == null) {
          unsetPropertyCondition();
        } else {
          setPropertyCondition((String)value);
        }
        break;

      case TAG_CONDITION:
        if (value == null) {
          unsetTagCondition();
        } else {
          setTagCondition((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_CONDITION:
        return getPropertyCondition();

      case TAG_CONDITION:
        return getTagCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_CONDITION:
        return isSetPropertyCondition();
      case TAG_CONDITION:
        return isSetTagCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupTagsByRecursiveFilter_args)
        return this.equals((groupTagsByRecursiveFilter_args)that);
      return false;
    }

    public boolean equals(groupTagsByRecursiveFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyCondition = true && this.isSetPropertyCondition();
      boolean that_present_propertyCondition = true && that.isSetPropertyCondition();
      if (this_present_propertyCondition || that_present_propertyCondition) {
        if (!(this_present_propertyCondition && that_present_propertyCondition))
          return false;
        if (!this.propertyCondition.equals(that.propertyCondition))
          return false;
      }

      boolean this_present_tagCondition = true && this.isSetTagCondition();
      boolean that_present_tagCondition = true && that.isSetTagCondition();
      if (this_present_tagCondition || that_present_tagCondition) {
        if (!(this_present_tagCondition && that_present_tagCondition))
          return false;
        if (!this.tagCondition.equals(that.tagCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(groupTagsByRecursiveFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      groupTagsByRecursiveFilter_args typedOther = (groupTagsByRecursiveFilter_args)other;

      lastComparison = Boolean.valueOf(isSetPropertyCondition()).compareTo(typedOther.isSetPropertyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCondition, typedOther.propertyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagCondition()).compareTo(typedOther.isSetTagCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagCondition, typedOther.tagCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PROPERTY_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.propertyCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_CONDITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagCondition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.propertyCondition != null) {
        oprot.writeFieldBegin(PROPERTY_CONDITION_FIELD_DESC);
        oprot.writeString(this.propertyCondition);
        oprot.writeFieldEnd();
      }
      if (this.tagCondition != null) {
        oprot.writeFieldBegin(TAG_CONDITION_FIELD_DESC);
        oprot.writeString(this.tagCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupTagsByRecursiveFilter_args(");
      boolean first = true;

      sb.append("propertyCondition:");
      if (this.propertyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagCondition:");
      if (this.tagCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.tagCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class groupTagsByRecursiveFilter_result implements org.apache.thrift.TBase<groupTagsByRecursiveFilter_result, groupTagsByRecursiveFilter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupTagsByRecursiveFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupTagsByRecursiveFilter_result.class, metaDataMap);
    }

    public groupTagsByRecursiveFilter_result() {
    }

    public groupTagsByRecursiveFilter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupTagsByRecursiveFilter_result(groupTagsByRecursiveFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public groupTagsByRecursiveFilter_result deepCopy() {
      return new groupTagsByRecursiveFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public groupTagsByRecursiveFilter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupTagsByRecursiveFilter_result)
        return this.equals((groupTagsByRecursiveFilter_result)that);
      return false;
    }

    public boolean equals(groupTagsByRecursiveFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(groupTagsByRecursiveFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      groupTagsByRecursiveFilter_result typedOther = (groupTagsByRecursiveFilter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupTagsByRecursiveFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addTagClass_args implements org.apache.thrift.TBase<addTagClass_args, addTagClass_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTagClass_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLASS_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("classDescription", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)4);

    public long appkey;
    public String className;
    public String classDescription;
    public long pid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CLASS_NAME((short)2, "className"),
      CLASS_DESCRIPTION((short)3, "classDescription"),
      PID((short)4, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CLASS_NAME
            return CLASS_NAME;
          case 3: // CLASS_DESCRIPTION
            return CLASS_DESCRIPTION;
          case 4: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __PID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASS_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("classDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTagClass_args.class, metaDataMap);
    }

    public addTagClass_args() {
    }

    public addTagClass_args(
      long appkey,
      String className,
      String classDescription,
      long pid)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.className = className;
      this.classDescription = classDescription;
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTagClass_args(addTagClass_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetClassName()) {
        this.className = other.className;
      }
      if (other.isSetClassDescription()) {
        this.classDescription = other.classDescription;
      }
      this.pid = other.pid;
    }

    public addTagClass_args deepCopy() {
      return new addTagClass_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.className = null;
      this.classDescription = null;
      setPidIsSet(false);
      this.pid = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public addTagClass_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getClassName() {
      return this.className;
    }

    public addTagClass_args setClassName(String className) {
      this.className = className;
      return this;
    }

    public void unsetClassName() {
      this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
      return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
      if (!value) {
        this.className = null;
      }
    }

    public String getClassDescription() {
      return this.classDescription;
    }

    public addTagClass_args setClassDescription(String classDescription) {
      this.classDescription = classDescription;
      return this;
    }

    public void unsetClassDescription() {
      this.classDescription = null;
    }

    /** Returns true if field classDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetClassDescription() {
      return this.classDescription != null;
    }

    public void setClassDescriptionIsSet(boolean value) {
      if (!value) {
        this.classDescription = null;
      }
    }

    public long getPid() {
      return this.pid;
    }

    public addTagClass_args setPid(long pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bit_vector.clear(__PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return __isset_bit_vector.get(__PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bit_vector.set(__PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((String)value);
        }
        break;

      case CLASS_DESCRIPTION:
        if (value == null) {
          unsetClassDescription();
        } else {
          setClassDescription((String)value);
        }
        break;

      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case CLASS_NAME:
        return getClassName();

      case CLASS_DESCRIPTION:
        return getClassDescription();

      case PID:
        return new Long(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CLASS_NAME:
        return isSetClassName();
      case CLASS_DESCRIPTION:
        return isSetClassDescription();
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTagClass_args)
        return this.equals((addTagClass_args)that);
      return false;
    }

    public boolean equals(addTagClass_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_className = true && this.isSetClassName();
      boolean that_present_className = true && that.isSetClassName();
      if (this_present_className || that_present_className) {
        if (!(this_present_className && that_present_className))
          return false;
        if (!this.className.equals(that.className))
          return false;
      }

      boolean this_present_classDescription = true && this.isSetClassDescription();
      boolean that_present_classDescription = true && that.isSetClassDescription();
      if (this_present_classDescription || that_present_classDescription) {
        if (!(this_present_classDescription && that_present_classDescription))
          return false;
        if (!this.classDescription.equals(that.classDescription))
          return false;
      }

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addTagClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addTagClass_args typedOther = (addTagClass_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassName()).compareTo(typedOther.isSetClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, typedOther.className);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassDescription()).compareTo(typedOther.isSetClassDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classDescription, typedOther.classDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, typedOther.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CLASS_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.className = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CLASS_DESCRIPTION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.classDescription = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.pid = iprot.readI64();
              setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      if (this.className != null) {
        oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
        oprot.writeString(this.className);
        oprot.writeFieldEnd();
      }
      if (this.classDescription != null) {
        oprot.writeFieldBegin(CLASS_DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.classDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI64(this.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTagClass_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classDescription:");
      if (this.classDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.classDescription);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addTagClass_result implements org.apache.thrift.TBase<addTagClass_result, addTagClass_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTagClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTagClass_result.class, metaDataMap);
    }

    public addTagClass_result() {
    }

    public addTagClass_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTagClass_result(addTagClass_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addTagClass_result deepCopy() {
      return new addTagClass_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addTagClass_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTagClass_result)
        return this.equals((addTagClass_result)that);
      return false;
    }

    public boolean equals(addTagClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addTagClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addTagClass_result typedOther = (addTagClass_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTagClass_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchTagClass_args implements org.apache.thrift.TBase<searchTagClass_args, searchTagClass_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTagClass_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLASS_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("classIds", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("child", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)7);

    public long appkey;
    public String className;
    public String classIds;
    public long pid;
    public boolean child;
    public int page;
    public int size;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CLASS_NAME((short)2, "className"),
      CLASS_IDS((short)3, "classIds"),
      PID((short)4, "pid"),
      CHILD((short)5, "child"),
      PAGE((short)6, "page"),
      SIZE((short)7, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CLASS_NAME
            return CLASS_NAME;
          case 3: // CLASS_IDS
            return CLASS_IDS;
          case 4: // PID
            return PID;
          case 5: // CHILD
            return CHILD;
          case 6: // PAGE
            return PAGE;
          case 7: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __PID_ISSET_ID = 1;
    private static final int __CHILD_ISSET_ID = 2;
    private static final int __PAGE_ISSET_ID = 3;
    private static final int __SIZE_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASS_IDS, new org.apache.thrift.meta_data.FieldMetaData("classIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHILD, new org.apache.thrift.meta_data.FieldMetaData("child", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTagClass_args.class, metaDataMap);
    }

    public searchTagClass_args() {
    }

    public searchTagClass_args(
      long appkey,
      String className,
      String classIds,
      long pid,
      boolean child,
      int page,
      int size)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.className = className;
      this.classIds = classIds;
      this.pid = pid;
      setPidIsSet(true);
      this.child = child;
      setChildIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTagClass_args(searchTagClass_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetClassName()) {
        this.className = other.className;
      }
      if (other.isSetClassIds()) {
        this.classIds = other.classIds;
      }
      this.pid = other.pid;
      this.child = other.child;
      this.page = other.page;
      this.size = other.size;
    }

    public searchTagClass_args deepCopy() {
      return new searchTagClass_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.className = null;
      this.classIds = null;
      setPidIsSet(false);
      this.pid = 0;
      setChildIsSet(false);
      this.child = false;
      setPageIsSet(false);
      this.page = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public searchTagClass_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getClassName() {
      return this.className;
    }

    public searchTagClass_args setClassName(String className) {
      this.className = className;
      return this;
    }

    public void unsetClassName() {
      this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
      return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
      if (!value) {
        this.className = null;
      }
    }

    public String getClassIds() {
      return this.classIds;
    }

    public searchTagClass_args setClassIds(String classIds) {
      this.classIds = classIds;
      return this;
    }

    public void unsetClassIds() {
      this.classIds = null;
    }

    /** Returns true if field classIds is set (has been assigned a value) and false otherwise */
    public boolean isSetClassIds() {
      return this.classIds != null;
    }

    public void setClassIdsIsSet(boolean value) {
      if (!value) {
        this.classIds = null;
      }
    }

    public long getPid() {
      return this.pid;
    }

    public searchTagClass_args setPid(long pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bit_vector.clear(__PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return __isset_bit_vector.get(__PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bit_vector.set(__PID_ISSET_ID, value);
    }

    public boolean isChild() {
      return this.child;
    }

    public searchTagClass_args setChild(boolean child) {
      this.child = child;
      setChildIsSet(true);
      return this;
    }

    public void unsetChild() {
      __isset_bit_vector.clear(__CHILD_ISSET_ID);
    }

    /** Returns true if field child is set (has been assigned a value) and false otherwise */
    public boolean isSetChild() {
      return __isset_bit_vector.get(__CHILD_ISSET_ID);
    }

    public void setChildIsSet(boolean value) {
      __isset_bit_vector.set(__CHILD_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public searchTagClass_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public searchTagClass_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bit_vector.clear(__SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_bit_vector.get(__SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((String)value);
        }
        break;

      case CLASS_IDS:
        if (value == null) {
          unsetClassIds();
        } else {
          setClassIds((String)value);
        }
        break;

      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Long)value);
        }
        break;

      case CHILD:
        if (value == null) {
          unsetChild();
        } else {
          setChild((Boolean)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case CLASS_NAME:
        return getClassName();

      case CLASS_IDS:
        return getClassIds();

      case PID:
        return new Long(getPid());

      case CHILD:
        return new Boolean(isChild());

      case PAGE:
        return new Integer(getPage());

      case SIZE:
        return new Integer(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CLASS_NAME:
        return isSetClassName();
      case CLASS_IDS:
        return isSetClassIds();
      case PID:
        return isSetPid();
      case CHILD:
        return isSetChild();
      case PAGE:
        return isSetPage();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTagClass_args)
        return this.equals((searchTagClass_args)that);
      return false;
    }

    public boolean equals(searchTagClass_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_className = true && this.isSetClassName();
      boolean that_present_className = true && that.isSetClassName();
      if (this_present_className || that_present_className) {
        if (!(this_present_className && that_present_className))
          return false;
        if (!this.className.equals(that.className))
          return false;
      }

      boolean this_present_classIds = true && this.isSetClassIds();
      boolean that_present_classIds = true && that.isSetClassIds();
      if (this_present_classIds || that_present_classIds) {
        if (!(this_present_classIds && that_present_classIds))
          return false;
        if (!this.classIds.equals(that.classIds))
          return false;
      }

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      boolean this_present_child = true;
      boolean that_present_child = true;
      if (this_present_child || that_present_child) {
        if (!(this_present_child && that_present_child))
          return false;
        if (this.child != that.child)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTagClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTagClass_args typedOther = (searchTagClass_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassName()).compareTo(typedOther.isSetClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, typedOther.className);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassIds()).compareTo(typedOther.isSetClassIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classIds, typedOther.classIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, typedOther.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChild()).compareTo(typedOther.isSetChild());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChild()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child, typedOther.child);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CLASS_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.className = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CLASS_IDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.classIds = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.pid = iprot.readI64();
              setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // CHILD
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.child = iprot.readBool();
              setChildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      if (this.className != null) {
        oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
        oprot.writeString(this.className);
        oprot.writeFieldEnd();
      }
      if (this.classIds != null) {
        oprot.writeFieldBegin(CLASS_IDS_FIELD_DESC);
        oprot.writeString(this.classIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI64(this.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHILD_FIELD_DESC);
      oprot.writeBool(this.child);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTagClass_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classIds:");
      if (this.classIds == null) {
        sb.append("null");
      } else {
        sb.append(this.classIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("child:");
      sb.append(this.child);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchTagClass_result implements org.apache.thrift.TBase<searchTagClass_result, searchTagClass_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTagClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTagClass_result.class, metaDataMap);
    }

    public searchTagClass_result() {
    }

    public searchTagClass_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTagClass_result(searchTagClass_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchTagClass_result deepCopy() {
      return new searchTagClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchTagClass_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTagClass_result)
        return this.equals((searchTagClass_result)that);
      return false;
    }

    public boolean equals(searchTagClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTagClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTagClass_result typedOther = (searchTagClass_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTagClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addTagByClass_args implements org.apache.thrift.TBase<addTagByClass_args, addTagByClass_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTagByClass_args");

    private static final org.apache.thrift.protocol.TField JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String jsonParam;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_PARAM((short)1, "jsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_PARAM
            return JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("jsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTagByClass_args.class, metaDataMap);
    }

    public addTagByClass_args() {
    }

    public addTagByClass_args(
      String jsonParam)
    {
      this();
      this.jsonParam = jsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTagByClass_args(addTagByClass_args other) {
      if (other.isSetJsonParam()) {
        this.jsonParam = other.jsonParam;
      }
    }

    public addTagByClass_args deepCopy() {
      return new addTagByClass_args(this);
    }

    @Override
    public void clear() {
      this.jsonParam = null;
    }

    public String getJsonParam() {
      return this.jsonParam;
    }

    public addTagByClass_args setJsonParam(String jsonParam) {
      this.jsonParam = jsonParam;
      return this;
    }

    public void unsetJsonParam() {
      this.jsonParam = null;
    }

    /** Returns true if field jsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParam() {
      return this.jsonParam != null;
    }

    public void setJsonParamIsSet(boolean value) {
      if (!value) {
        this.jsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_PARAM:
        if (value == null) {
          unsetJsonParam();
        } else {
          setJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_PARAM:
        return getJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_PARAM:
        return isSetJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTagByClass_args)
        return this.equals((addTagByClass_args)that);
      return false;
    }

    public boolean equals(addTagByClass_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonParam = true && this.isSetJsonParam();
      boolean that_present_jsonParam = true && that.isSetJsonParam();
      if (this_present_jsonParam || that_present_jsonParam) {
        if (!(this_present_jsonParam && that_present_jsonParam))
          return false;
        if (!this.jsonParam.equals(that.jsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addTagByClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addTagByClass_args typedOther = (addTagByClass_args)other;

      lastComparison = Boolean.valueOf(isSetJsonParam()).compareTo(typedOther.isSetJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParam, typedOther.jsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JSON_PARAM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.jsonParam = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.jsonParam != null) {
        oprot.writeFieldBegin(JSON_PARAM_FIELD_DESC);
        oprot.writeString(this.jsonParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTagByClass_args(");
      boolean first = true;

      sb.append("jsonParam:");
      if (this.jsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addTagByClass_result implements org.apache.thrift.TBase<addTagByClass_result, addTagByClass_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTagByClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTagByClass_result.class, metaDataMap);
    }

    public addTagByClass_result() {
    }

    public addTagByClass_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTagByClass_result(addTagByClass_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addTagByClass_result deepCopy() {
      return new addTagByClass_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addTagByClass_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTagByClass_result)
        return this.equals((addTagByClass_result)that);
      return false;
    }

    public boolean equals(addTagByClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addTagByClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addTagByClass_result typedOther = (addTagByClass_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTagByClass_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchTagsByClass_args implements org.apache.thrift.TBase<searchTagsByClass_args, searchTagsByClass_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTagsByClass_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CLASS_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("classIds", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DEF_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("defWeight", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CALC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("calcType", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField GENERAL_TAG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("generalTagType", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField GENERAL_PROP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("generalPropName", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)10);

    public long appkey;
    public String tagName;
    public String tagIds;
    public String classIds;
    public double defWeight;
    public int calcType;
    public int generalTagType;
    public String generalPropName;
    public int page;
    public int size;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      TAG_NAME((short)2, "tagName"),
      TAG_IDS((short)3, "tagIds"),
      CLASS_IDS((short)4, "classIds"),
      DEF_WEIGHT((short)5, "defWeight"),
      CALC_TYPE((short)6, "calcType"),
      GENERAL_TAG_TYPE((short)7, "generalTagType"),
      GENERAL_PROP_NAME((short)8, "generalPropName"),
      PAGE((short)9, "page"),
      SIZE((short)10, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // TAG_NAME
            return TAG_NAME;
          case 3: // TAG_IDS
            return TAG_IDS;
          case 4: // CLASS_IDS
            return CLASS_IDS;
          case 5: // DEF_WEIGHT
            return DEF_WEIGHT;
          case 6: // CALC_TYPE
            return CALC_TYPE;
          case 7: // GENERAL_TAG_TYPE
            return GENERAL_TAG_TYPE;
          case 8: // GENERAL_PROP_NAME
            return GENERAL_PROP_NAME;
          case 9: // PAGE
            return PAGE;
          case 10: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __DEFWEIGHT_ISSET_ID = 1;
    private static final int __CALCTYPE_ISSET_ID = 2;
    private static final int __GENERALTAGTYPE_ISSET_ID = 3;
    private static final int __PAGE_ISSET_ID = 4;
    private static final int __SIZE_ISSET_ID = 5;
    private BitSet __isset_bit_vector = new BitSet(6);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASS_IDS, new org.apache.thrift.meta_data.FieldMetaData("classIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEF_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("defWeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CALC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("calcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GENERAL_TAG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("generalTagType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GENERAL_PROP_NAME, new org.apache.thrift.meta_data.FieldMetaData("generalPropName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTagsByClass_args.class, metaDataMap);
    }

    public searchTagsByClass_args() {
    }

    public searchTagsByClass_args(
      long appkey,
      String tagName,
      String tagIds,
      String classIds,
      double defWeight,
      int calcType,
      int generalTagType,
      String generalPropName,
      int page,
      int size)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.tagName = tagName;
      this.tagIds = tagIds;
      this.classIds = classIds;
      this.defWeight = defWeight;
      setDefWeightIsSet(true);
      this.calcType = calcType;
      setCalcTypeIsSet(true);
      this.generalTagType = generalTagType;
      setGeneralTagTypeIsSet(true);
      this.generalPropName = generalPropName;
      this.page = page;
      setPageIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTagsByClass_args(searchTagsByClass_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetTagName()) {
        this.tagName = other.tagName;
      }
      if (other.isSetTagIds()) {
        this.tagIds = other.tagIds;
      }
      if (other.isSetClassIds()) {
        this.classIds = other.classIds;
      }
      this.defWeight = other.defWeight;
      this.calcType = other.calcType;
      this.generalTagType = other.generalTagType;
      if (other.isSetGeneralPropName()) {
        this.generalPropName = other.generalPropName;
      }
      this.page = other.page;
      this.size = other.size;
    }

    public searchTagsByClass_args deepCopy() {
      return new searchTagsByClass_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.tagName = null;
      this.tagIds = null;
      this.classIds = null;
      setDefWeightIsSet(false);
      this.defWeight = 0.0;
      setCalcTypeIsSet(false);
      this.calcType = 0;
      setGeneralTagTypeIsSet(false);
      this.generalTagType = 0;
      this.generalPropName = null;
      setPageIsSet(false);
      this.page = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public searchTagsByClass_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getTagName() {
      return this.tagName;
    }

    public searchTagsByClass_args setTagName(String tagName) {
      this.tagName = tagName;
      return this;
    }

    public void unsetTagName() {
      this.tagName = null;
    }

    /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
    public boolean isSetTagName() {
      return this.tagName != null;
    }

    public void setTagNameIsSet(boolean value) {
      if (!value) {
        this.tagName = null;
      }
    }

    public String getTagIds() {
      return this.tagIds;
    }

    public searchTagsByClass_args setTagIds(String tagIds) {
      this.tagIds = tagIds;
      return this;
    }

    public void unsetTagIds() {
      this.tagIds = null;
    }

    /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTagIds() {
      return this.tagIds != null;
    }

    public void setTagIdsIsSet(boolean value) {
      if (!value) {
        this.tagIds = null;
      }
    }

    public String getClassIds() {
      return this.classIds;
    }

    public searchTagsByClass_args setClassIds(String classIds) {
      this.classIds = classIds;
      return this;
    }

    public void unsetClassIds() {
      this.classIds = null;
    }

    /** Returns true if field classIds is set (has been assigned a value) and false otherwise */
    public boolean isSetClassIds() {
      return this.classIds != null;
    }

    public void setClassIdsIsSet(boolean value) {
      if (!value) {
        this.classIds = null;
      }
    }

    public double getDefWeight() {
      return this.defWeight;
    }

    public searchTagsByClass_args setDefWeight(double defWeight) {
      this.defWeight = defWeight;
      setDefWeightIsSet(true);
      return this;
    }

    public void unsetDefWeight() {
      __isset_bit_vector.clear(__DEFWEIGHT_ISSET_ID);
    }

    /** Returns true if field defWeight is set (has been assigned a value) and false otherwise */
    public boolean isSetDefWeight() {
      return __isset_bit_vector.get(__DEFWEIGHT_ISSET_ID);
    }

    public void setDefWeightIsSet(boolean value) {
      __isset_bit_vector.set(__DEFWEIGHT_ISSET_ID, value);
    }

    public int getCalcType() {
      return this.calcType;
    }

    public searchTagsByClass_args setCalcType(int calcType) {
      this.calcType = calcType;
      setCalcTypeIsSet(true);
      return this;
    }

    public void unsetCalcType() {
      __isset_bit_vector.clear(__CALCTYPE_ISSET_ID);
    }

    /** Returns true if field calcType is set (has been assigned a value) and false otherwise */
    public boolean isSetCalcType() {
      return __isset_bit_vector.get(__CALCTYPE_ISSET_ID);
    }

    public void setCalcTypeIsSet(boolean value) {
      __isset_bit_vector.set(__CALCTYPE_ISSET_ID, value);
    }

    public int getGeneralTagType() {
      return this.generalTagType;
    }

    public searchTagsByClass_args setGeneralTagType(int generalTagType) {
      this.generalTagType = generalTagType;
      setGeneralTagTypeIsSet(true);
      return this;
    }

    public void unsetGeneralTagType() {
      __isset_bit_vector.clear(__GENERALTAGTYPE_ISSET_ID);
    }

    /** Returns true if field generalTagType is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneralTagType() {
      return __isset_bit_vector.get(__GENERALTAGTYPE_ISSET_ID);
    }

    public void setGeneralTagTypeIsSet(boolean value) {
      __isset_bit_vector.set(__GENERALTAGTYPE_ISSET_ID, value);
    }

    public String getGeneralPropName() {
      return this.generalPropName;
    }

    public searchTagsByClass_args setGeneralPropName(String generalPropName) {
      this.generalPropName = generalPropName;
      return this;
    }

    public void unsetGeneralPropName() {
      this.generalPropName = null;
    }

    /** Returns true if field generalPropName is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneralPropName() {
      return this.generalPropName != null;
    }

    public void setGeneralPropNameIsSet(boolean value) {
      if (!value) {
        this.generalPropName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchTagsByClass_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public searchTagsByClass_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bit_vector.clear(__SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_bit_vector.get(__SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case TAG_NAME:
        if (value == null) {
          unsetTagName();
        } else {
          setTagName((String)value);
        }
        break;

      case TAG_IDS:
        if (value == null) {
          unsetTagIds();
        } else {
          setTagIds((String)value);
        }
        break;

      case CLASS_IDS:
        if (value == null) {
          unsetClassIds();
        } else {
          setClassIds((String)value);
        }
        break;

      case DEF_WEIGHT:
        if (value == null) {
          unsetDefWeight();
        } else {
          setDefWeight((Double)value);
        }
        break;

      case CALC_TYPE:
        if (value == null) {
          unsetCalcType();
        } else {
          setCalcType((Integer)value);
        }
        break;

      case GENERAL_TAG_TYPE:
        if (value == null) {
          unsetGeneralTagType();
        } else {
          setGeneralTagType((Integer)value);
        }
        break;

      case GENERAL_PROP_NAME:
        if (value == null) {
          unsetGeneralPropName();
        } else {
          setGeneralPropName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case TAG_NAME:
        return getTagName();

      case TAG_IDS:
        return getTagIds();

      case CLASS_IDS:
        return getClassIds();

      case DEF_WEIGHT:
        return new Double(getDefWeight());

      case CALC_TYPE:
        return new Integer(getCalcType());

      case GENERAL_TAG_TYPE:
        return new Integer(getGeneralTagType());

      case GENERAL_PROP_NAME:
        return getGeneralPropName();

      case PAGE:
        return new Integer(getPage());

      case SIZE:
        return new Integer(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case TAG_NAME:
        return isSetTagName();
      case TAG_IDS:
        return isSetTagIds();
      case CLASS_IDS:
        return isSetClassIds();
      case DEF_WEIGHT:
        return isSetDefWeight();
      case CALC_TYPE:
        return isSetCalcType();
      case GENERAL_TAG_TYPE:
        return isSetGeneralTagType();
      case GENERAL_PROP_NAME:
        return isSetGeneralPropName();
      case PAGE:
        return isSetPage();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTagsByClass_args)
        return this.equals((searchTagsByClass_args)that);
      return false;
    }

    public boolean equals(searchTagsByClass_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_tagName = true && this.isSetTagName();
      boolean that_present_tagName = true && that.isSetTagName();
      if (this_present_tagName || that_present_tagName) {
        if (!(this_present_tagName && that_present_tagName))
          return false;
        if (!this.tagName.equals(that.tagName))
          return false;
      }

      boolean this_present_tagIds = true && this.isSetTagIds();
      boolean that_present_tagIds = true && that.isSetTagIds();
      if (this_present_tagIds || that_present_tagIds) {
        if (!(this_present_tagIds && that_present_tagIds))
          return false;
        if (!this.tagIds.equals(that.tagIds))
          return false;
      }

      boolean this_present_classIds = true && this.isSetClassIds();
      boolean that_present_classIds = true && that.isSetClassIds();
      if (this_present_classIds || that_present_classIds) {
        if (!(this_present_classIds && that_present_classIds))
          return false;
        if (!this.classIds.equals(that.classIds))
          return false;
      }

      boolean this_present_defWeight = true;
      boolean that_present_defWeight = true;
      if (this_present_defWeight || that_present_defWeight) {
        if (!(this_present_defWeight && that_present_defWeight))
          return false;
        if (this.defWeight != that.defWeight)
          return false;
      }

      boolean this_present_calcType = true;
      boolean that_present_calcType = true;
      if (this_present_calcType || that_present_calcType) {
        if (!(this_present_calcType && that_present_calcType))
          return false;
        if (this.calcType != that.calcType)
          return false;
      }

      boolean this_present_generalTagType = true;
      boolean that_present_generalTagType = true;
      if (this_present_generalTagType || that_present_generalTagType) {
        if (!(this_present_generalTagType && that_present_generalTagType))
          return false;
        if (this.generalTagType != that.generalTagType)
          return false;
      }

      boolean this_present_generalPropName = true && this.isSetGeneralPropName();
      boolean that_present_generalPropName = true && that.isSetGeneralPropName();
      if (this_present_generalPropName || that_present_generalPropName) {
        if (!(this_present_generalPropName && that_present_generalPropName))
          return false;
        if (!this.generalPropName.equals(that.generalPropName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTagsByClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTagsByClass_args typedOther = (searchTagsByClass_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagName()).compareTo(typedOther.isSetTagName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, typedOther.tagName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassIds()).compareTo(typedOther.isSetClassIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classIds, typedOther.classIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDefWeight()).compareTo(typedOther.isSetDefWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defWeight, typedOther.defWeight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCalcType()).compareTo(typedOther.isSetCalcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCalcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calcType, typedOther.calcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneralTagType()).compareTo(typedOther.isSetGeneralTagType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneralTagType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generalTagType, typedOther.generalTagType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneralPropName()).compareTo(typedOther.isSetGeneralPropName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneralPropName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generalPropName, typedOther.generalPropName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TAG_IDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagIds = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CLASS_IDS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.classIds = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // DEF_WEIGHT
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.defWeight = iprot.readDouble();
              setDefWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // CALC_TYPE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.calcType = iprot.readI32();
              setCalcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // GENERAL_TAG_TYPE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.generalTagType = iprot.readI32();
              setGeneralTagTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // GENERAL_PROP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.generalPropName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      if (this.tagName != null) {
        oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
        oprot.writeString(this.tagName);
        oprot.writeFieldEnd();
      }
      if (this.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(this.tagIds);
        oprot.writeFieldEnd();
      }
      if (this.classIds != null) {
        oprot.writeFieldBegin(CLASS_IDS_FIELD_DESC);
        oprot.writeString(this.classIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEF_WEIGHT_FIELD_DESC);
      oprot.writeDouble(this.defWeight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CALC_TYPE_FIELD_DESC);
      oprot.writeI32(this.calcType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENERAL_TAG_TYPE_FIELD_DESC);
      oprot.writeI32(this.generalTagType);
      oprot.writeFieldEnd();
      if (this.generalPropName != null) {
        oprot.writeFieldBegin(GENERAL_PROP_NAME_FIELD_DESC);
        oprot.writeString(this.generalPropName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTagsByClass_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagName:");
      if (this.tagName == null) {
        sb.append("null");
      } else {
        sb.append(this.tagName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagIds:");
      if (this.tagIds == null) {
        sb.append("null");
      } else {
        sb.append(this.tagIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classIds:");
      if (this.classIds == null) {
        sb.append("null");
      } else {
        sb.append(this.classIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("defWeight:");
      sb.append(this.defWeight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("calcType:");
      sb.append(this.calcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generalTagType:");
      sb.append(this.generalTagType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generalPropName:");
      if (this.generalPropName == null) {
        sb.append("null");
      } else {
        sb.append(this.generalPropName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchTagsByClass_result implements org.apache.thrift.TBase<searchTagsByClass_result, searchTagsByClass_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTagsByClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTagsByClass_result.class, metaDataMap);
    }

    public searchTagsByClass_result() {
    }

    public searchTagsByClass_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTagsByClass_result(searchTagsByClass_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchTagsByClass_result deepCopy() {
      return new searchTagsByClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchTagsByClass_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTagsByClass_result)
        return this.equals((searchTagsByClass_result)that);
      return false;
    }

    public boolean equals(searchTagsByClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTagsByClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTagsByClass_result typedOther = (searchTagsByClass_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTagsByClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteLeafTagClass_args implements org.apache.thrift.TBase<deleteLeafTagClass_args, deleteLeafTagClass_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLeafTagClass_args");

    private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("classId", org.apache.thrift.protocol.TType.I64, (short)1);

    public long classId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLASS_ID((short)1, "classId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLASS_ID
            return CLASS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLASSID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("classId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLeafTagClass_args.class, metaDataMap);
    }

    public deleteLeafTagClass_args() {
    }

    public deleteLeafTagClass_args(
      long classId)
    {
      this();
      this.classId = classId;
      setClassIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLeafTagClass_args(deleteLeafTagClass_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.classId = other.classId;
    }

    public deleteLeafTagClass_args deepCopy() {
      return new deleteLeafTagClass_args(this);
    }

    @Override
    public void clear() {
      setClassIdIsSet(false);
      this.classId = 0;
    }

    public long getClassId() {
      return this.classId;
    }

    public deleteLeafTagClass_args setClassId(long classId) {
      this.classId = classId;
      setClassIdIsSet(true);
      return this;
    }

    public void unsetClassId() {
      __isset_bit_vector.clear(__CLASSID_ISSET_ID);
    }

    /** Returns true if field classId is set (has been assigned a value) and false otherwise */
    public boolean isSetClassId() {
      return __isset_bit_vector.get(__CLASSID_ISSET_ID);
    }

    public void setClassIdIsSet(boolean value) {
      __isset_bit_vector.set(__CLASSID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLASS_ID:
        if (value == null) {
          unsetClassId();
        } else {
          setClassId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLASS_ID:
        return new Long(getClassId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLASS_ID:
        return isSetClassId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLeafTagClass_args)
        return this.equals((deleteLeafTagClass_args)that);
      return false;
    }

    public boolean equals(deleteLeafTagClass_args that) {
      if (that == null)
        return false;

      boolean this_present_classId = true;
      boolean that_present_classId = true;
      if (this_present_classId || that_present_classId) {
        if (!(this_present_classId && that_present_classId))
          return false;
        if (this.classId != that.classId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteLeafTagClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteLeafTagClass_args typedOther = (deleteLeafTagClass_args)other;

      lastComparison = Boolean.valueOf(isSetClassId()).compareTo(typedOther.isSetClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, typedOther.classId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CLASS_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.classId = iprot.readI64();
              setClassIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
      oprot.writeI64(this.classId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLeafTagClass_args(");
      boolean first = true;

      sb.append("classId:");
      sb.append(this.classId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteLeafTagClass_result implements org.apache.thrift.TBase<deleteLeafTagClass_result, deleteLeafTagClass_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLeafTagClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLeafTagClass_result.class, metaDataMap);
    }

    public deleteLeafTagClass_result() {
    }

    public deleteLeafTagClass_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLeafTagClass_result(deleteLeafTagClass_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteLeafTagClass_result deepCopy() {
      return new deleteLeafTagClass_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteLeafTagClass_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLeafTagClass_result)
        return this.equals((deleteLeafTagClass_result)that);
      return false;
    }

    public boolean equals(deleteLeafTagClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteLeafTagClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteLeafTagClass_result typedOther = (deleteLeafTagClass_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLeafTagClass_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyTagByClass_args implements org.apache.thrift.TBase<modifyTagByClass_args, modifyTagByClass_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyTagByClass_args");

    private static final org.apache.thrift.protocol.TField JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String jsonParam;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_PARAM((short)1, "jsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_PARAM
            return JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("jsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyTagByClass_args.class, metaDataMap);
    }

    public modifyTagByClass_args() {
    }

    public modifyTagByClass_args(
      String jsonParam)
    {
      this();
      this.jsonParam = jsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyTagByClass_args(modifyTagByClass_args other) {
      if (other.isSetJsonParam()) {
        this.jsonParam = other.jsonParam;
      }
    }

    public modifyTagByClass_args deepCopy() {
      return new modifyTagByClass_args(this);
    }

    @Override
    public void clear() {
      this.jsonParam = null;
    }

    public String getJsonParam() {
      return this.jsonParam;
    }

    public modifyTagByClass_args setJsonParam(String jsonParam) {
      this.jsonParam = jsonParam;
      return this;
    }

    public void unsetJsonParam() {
      this.jsonParam = null;
    }

    /** Returns true if field jsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParam() {
      return this.jsonParam != null;
    }

    public void setJsonParamIsSet(boolean value) {
      if (!value) {
        this.jsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_PARAM:
        if (value == null) {
          unsetJsonParam();
        } else {
          setJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_PARAM:
        return getJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_PARAM:
        return isSetJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyTagByClass_args)
        return this.equals((modifyTagByClass_args)that);
      return false;
    }

    public boolean equals(modifyTagByClass_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonParam = true && this.isSetJsonParam();
      boolean that_present_jsonParam = true && that.isSetJsonParam();
      if (this_present_jsonParam || that_present_jsonParam) {
        if (!(this_present_jsonParam && that_present_jsonParam))
          return false;
        if (!this.jsonParam.equals(that.jsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyTagByClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyTagByClass_args typedOther = (modifyTagByClass_args)other;

      lastComparison = Boolean.valueOf(isSetJsonParam()).compareTo(typedOther.isSetJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParam, typedOther.jsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JSON_PARAM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.jsonParam = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.jsonParam != null) {
        oprot.writeFieldBegin(JSON_PARAM_FIELD_DESC);
        oprot.writeString(this.jsonParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyTagByClass_args(");
      boolean first = true;

      sb.append("jsonParam:");
      if (this.jsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyTagByClass_result implements org.apache.thrift.TBase<modifyTagByClass_result, modifyTagByClass_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyTagByClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyTagByClass_result.class, metaDataMap);
    }

    public modifyTagByClass_result() {
    }

    public modifyTagByClass_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyTagByClass_result(modifyTagByClass_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public modifyTagByClass_result deepCopy() {
      return new modifyTagByClass_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public modifyTagByClass_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyTagByClass_result)
        return this.equals((modifyTagByClass_result)that);
      return false;
    }

    public boolean equals(modifyTagByClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyTagByClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyTagByClass_result typedOther = (modifyTagByClass_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyTagByClass_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchAllTagClass_args implements org.apache.thrift.TBase<searchAllTagClass_args, searchAllTagClass_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAllTagClass_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)2);

    public long appkey;
    public int size;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      SIZE((short)2, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAllTagClass_args.class, metaDataMap);
    }

    public searchAllTagClass_args() {
    }

    public searchAllTagClass_args(
      long appkey,
      int size)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAllTagClass_args(searchAllTagClass_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      this.size = other.size;
    }

    public searchAllTagClass_args deepCopy() {
      return new searchAllTagClass_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public searchAllTagClass_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public searchAllTagClass_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bit_vector.clear(__SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_bit_vector.get(__SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case SIZE:
        return new Integer(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAllTagClass_args)
        return this.equals((searchAllTagClass_args)that);
      return false;
    }

    public boolean equals(searchAllTagClass_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchAllTagClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchAllTagClass_args typedOther = (searchAllTagClass_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAllTagClass_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchAllTagClass_result implements org.apache.thrift.TBase<searchAllTagClass_result, searchAllTagClass_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAllTagClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAllTagClass_result.class, metaDataMap);
    }

    public searchAllTagClass_result() {
    }

    public searchAllTagClass_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAllTagClass_result(searchAllTagClass_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchAllTagClass_result deepCopy() {
      return new searchAllTagClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchAllTagClass_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAllTagClass_result)
        return this.equals((searchAllTagClass_result)that);
      return false;
    }

    public boolean equals(searchAllTagClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchAllTagClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchAllTagClass_result typedOther = (searchAllTagClass_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAllTagClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class fuzzySearchTags_args implements org.apache.thrift.TBase<fuzzySearchTags_args, fuzzySearchTags_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fuzzySearchTags_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)4);

    public long appkey;
    public String tagName;
    public int page;
    public int size;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      TAG_NAME((short)2, "tagName"),
      PAGE((short)3, "page"),
      SIZE((short)4, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // TAG_NAME
            return TAG_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fuzzySearchTags_args.class, metaDataMap);
    }

    public fuzzySearchTags_args() {
    }

    public fuzzySearchTags_args(
      long appkey,
      String tagName,
      int page,
      int size)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.tagName = tagName;
      this.page = page;
      setPageIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fuzzySearchTags_args(fuzzySearchTags_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetTagName()) {
        this.tagName = other.tagName;
      }
      this.page = other.page;
      this.size = other.size;
    }

    public fuzzySearchTags_args deepCopy() {
      return new fuzzySearchTags_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.tagName = null;
      setPageIsSet(false);
      this.page = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public fuzzySearchTags_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getTagName() {
      return this.tagName;
    }

    public fuzzySearchTags_args setTagName(String tagName) {
      this.tagName = tagName;
      return this;
    }

    public void unsetTagName() {
      this.tagName = null;
    }

    /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
    public boolean isSetTagName() {
      return this.tagName != null;
    }

    public void setTagNameIsSet(boolean value) {
      if (!value) {
        this.tagName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public fuzzySearchTags_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public fuzzySearchTags_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bit_vector.clear(__SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_bit_vector.get(__SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case TAG_NAME:
        if (value == null) {
          unsetTagName();
        } else {
          setTagName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case TAG_NAME:
        return getTagName();

      case PAGE:
        return new Integer(getPage());

      case SIZE:
        return new Integer(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case TAG_NAME:
        return isSetTagName();
      case PAGE:
        return isSetPage();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fuzzySearchTags_args)
        return this.equals((fuzzySearchTags_args)that);
      return false;
    }

    public boolean equals(fuzzySearchTags_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_tagName = true && this.isSetTagName();
      boolean that_present_tagName = true && that.isSetTagName();
      if (this_present_tagName || that_present_tagName) {
        if (!(this_present_tagName && that_present_tagName))
          return false;
        if (!this.tagName.equals(that.tagName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fuzzySearchTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fuzzySearchTags_args typedOther = (fuzzySearchTags_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagName()).compareTo(typedOther.isSetTagName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, typedOther.tagName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      if (this.tagName != null) {
        oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
        oprot.writeString(this.tagName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fuzzySearchTags_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagName:");
      if (this.tagName == null) {
        sb.append("null");
      } else {
        sb.append(this.tagName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class fuzzySearchTags_result implements org.apache.thrift.TBase<fuzzySearchTags_result, fuzzySearchTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fuzzySearchTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fuzzySearchTags_result.class, metaDataMap);
    }

    public fuzzySearchTags_result() {
    }

    public fuzzySearchTags_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fuzzySearchTags_result(fuzzySearchTags_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public fuzzySearchTags_result deepCopy() {
      return new fuzzySearchTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public fuzzySearchTags_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fuzzySearchTags_result)
        return this.equals((fuzzySearchTags_result)that);
      return false;
    }

    public boolean equals(fuzzySearchTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fuzzySearchTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fuzzySearchTags_result typedOther = (fuzzySearchTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fuzzySearchTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addExp_args implements org.apache.thrift.TBase<addExp_args, addExp_args._Fields>, java.io.Serializable, Cloneable   {
	    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExp_args");

	    private static final org.apache.thrift.protocol.TField TAG_WEIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagWeightId", org.apache.thrift.protocol.TType.I64, (short)1);
	    private static final org.apache.thrift.protocol.TField EXP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("expKey", org.apache.thrift.protocol.TType.I32, (short)2);
	    private static final org.apache.thrift.protocol.TField EXP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("expVal", org.apache.thrift.protocol.TType.STRING, (short)3);
	    private static final org.apache.thrift.protocol.TField EXP_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("expOp", org.apache.thrift.protocol.TType.STRING, (short)4);

	    public long tagWeightId;
	    public int expKey;
	    public String expVal;
	    public String expOp;

	    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
	      TAG_WEIGHT_ID((short)1, "tagWeightId"),
	      EXP_KEY((short)2, "expKey"),
	      EXP_VAL((short)3, "expVal"),
	      EXP_OP((short)4, "expOp");

	      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

	      static {
	        for (_Fields field : EnumSet.allOf(_Fields.class)) {
	          byName.put(field.getFieldName(), field);
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, or null if its not found.
	       */
	      public static _Fields findByThriftId(int fieldId) {
	        switch(fieldId) {
	          case 1: // TAG_WEIGHT_ID
	            return TAG_WEIGHT_ID;
	          case 2: // EXP_KEY
	            return EXP_KEY;
	          case 3: // EXP_VAL
	            return EXP_VAL;
	          case 4: // EXP_OP
	            return EXP_OP;
	          default:
	            return null;
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, throwing an exception
	       * if it is not found.
	       */
	      public static _Fields findByThriftIdOrThrow(int fieldId) {
	        _Fields fields = findByThriftId(fieldId);
	        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
	        return fields;
	      }

	      /**
	       * Find the _Fields constant that matches name, or null if its not found.
	       */
	      public static _Fields findByName(String name) {
	        return byName.get(name);
	      }

	      private final short _thriftId;
	      private final String _fieldName;

	      _Fields(short thriftId, String fieldName) {
	        _thriftId = thriftId;
	        _fieldName = fieldName;
	      }

	      public short getThriftFieldId() {
	        return _thriftId;
	      }

	      public String getFieldName() {
	        return _fieldName;
	      }
	    }

	    // isset id assignments
	    private static final int __TAGWEIGHTID_ISSET_ID = 0;
	    private static final int __EXPKEY_ISSET_ID = 1;
	    private BitSet __isset_bit_vector = new BitSet(2);

	    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	    static {
	      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
	      tmpMap.put(_Fields.TAG_WEIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("tagWeightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
	      tmpMap.put(_Fields.EXP_KEY, new org.apache.thrift.meta_data.FieldMetaData("expKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      tmpMap.put(_Fields.EXP_VAL, new org.apache.thrift.meta_data.FieldMetaData("expVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      tmpMap.put(_Fields.EXP_OP, new org.apache.thrift.meta_data.FieldMetaData("expOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
	      metaDataMap = Collections.unmodifiableMap(tmpMap);
	      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExp_args.class, metaDataMap);
	    }

	    public addExp_args() {
	    }

	    public addExp_args(
	      long tagWeightId,
	      int expKey,
	      String expVal,
	      String expOp)
	    {
	      this();
	      this.tagWeightId = tagWeightId;
	      setTagWeightIdIsSet(true);
	      this.expKey = expKey;
	      setExpKeyIsSet(true);
	      this.expVal = expVal;
	      this.expOp = expOp;
	    }

	    /**
	     * Performs a deep copy on <i>other</i>.
	     */
	    public addExp_args(addExp_args other) {
	      __isset_bit_vector.clear();
	      __isset_bit_vector.or(other.__isset_bit_vector);
	      this.tagWeightId = other.tagWeightId;
	      this.expKey = other.expKey;
	      if (other.isSetExpVal()) {
	        this.expVal = other.expVal;
	      }
	      if (other.isSetExpOp()) {
	        this.expOp = other.expOp;
	      }
	    }

	    public addExp_args deepCopy() {
	      return new addExp_args(this);
	    }

	    @Override
	    public void clear() {
	      setTagWeightIdIsSet(false);
	      this.tagWeightId = 0;
	      setExpKeyIsSet(false);
	      this.expKey = 0;
	      this.expVal = null;
	      this.expOp = null;
	    }

	    public long getTagWeightId() {
	      return this.tagWeightId;
	    }

	    public addExp_args setTagWeightId(long tagWeightId) {
	      this.tagWeightId = tagWeightId;
	      setTagWeightIdIsSet(true);
	      return this;
	    }

	    public void unsetTagWeightId() {
	      __isset_bit_vector.clear(__TAGWEIGHTID_ISSET_ID);
	    }

	    /** Returns true if field tagWeightId is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagWeightId() {
	      return __isset_bit_vector.get(__TAGWEIGHTID_ISSET_ID);
	    }

	    public void setTagWeightIdIsSet(boolean value) {
	      __isset_bit_vector.set(__TAGWEIGHTID_ISSET_ID, value);
	    }

	    public int getExpKey() {
	      return this.expKey;
	    }

	    public addExp_args setExpKey(int expKey) {
	      this.expKey = expKey;
	      setExpKeyIsSet(true);
	      return this;
	    }

	    public void unsetExpKey() {
	      __isset_bit_vector.clear(__EXPKEY_ISSET_ID);
	    }

	    /** Returns true if field expKey is set (has been assigned a value) and false otherwise */
	    public boolean isSetExpKey() {
	      return __isset_bit_vector.get(__EXPKEY_ISSET_ID);
	    }

	    public void setExpKeyIsSet(boolean value) {
	      __isset_bit_vector.set(__EXPKEY_ISSET_ID, value);
	    }

	    public String getExpVal() {
	      return this.expVal;
	    }

	    public addExp_args setExpVal(String expVal) {
	      this.expVal = expVal;
	      return this;
	    }

	    public void unsetExpVal() {
	      this.expVal = null;
	    }

	    /** Returns true if field expVal is set (has been assigned a value) and false otherwise */
	    public boolean isSetExpVal() {
	      return this.expVal != null;
	    }

	    public void setExpValIsSet(boolean value) {
	      if (!value) {
	        this.expVal = null;
	      }
	    }

	    public String getExpOp() {
	      return this.expOp;
	    }

	    public addExp_args setExpOp(String expOp) {
	      this.expOp = expOp;
	      return this;
	    }

	    public void unsetExpOp() {
	      this.expOp = null;
	    }

	    /** Returns true if field expOp is set (has been assigned a value) and false otherwise */
	    public boolean isSetExpOp() {
	      return this.expOp != null;
	    }

	    public void setExpOpIsSet(boolean value) {
	      if (!value) {
	        this.expOp = null;
	      }
	    }

	    public void setFieldValue(_Fields field, Object value) {
	      switch (field) {
	      case TAG_WEIGHT_ID:
	        if (value == null) {
	          unsetTagWeightId();
	        } else {
	          setTagWeightId((Long)value);
	        }
	        break;

	      case EXP_KEY:
	        if (value == null) {
	          unsetExpKey();
	        } else {
	          setExpKey((Integer)value);
	        }
	        break;

	      case EXP_VAL:
	        if (value == null) {
	          unsetExpVal();
	        } else {
	          setExpVal((String)value);
	        }
	        break;

	      case EXP_OP:
	        if (value == null) {
	          unsetExpOp();
	        } else {
	          setExpOp((String)value);
	        }
	        break;

	      }
	    }

	    public Object getFieldValue(_Fields field) {
	      switch (field) {
	      case TAG_WEIGHT_ID:
	        return new Long(getTagWeightId());

	      case EXP_KEY:
	        return new Integer(getExpKey());

	      case EXP_VAL:
	        return getExpVal();

	      case EXP_OP:
	        return getExpOp();

	      }
	      throw new IllegalStateException();
	    }

	    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	    public boolean isSet(_Fields field) {
	      if (field == null) {
	        throw new IllegalArgumentException();
	      }

	      switch (field) {
	      case TAG_WEIGHT_ID:
	        return isSetTagWeightId();
	      case EXP_KEY:
	        return isSetExpKey();
	      case EXP_VAL:
	        return isSetExpVal();
	      case EXP_OP:
	        return isSetExpOp();
	      }
	      throw new IllegalStateException();
	    }

	    @Override
	    public boolean equals(Object that) {
	      if (that == null)
	        return false;
	      if (that instanceof addExp_args)
	        return this.equals((addExp_args)that);
	      return false;
	    }

	    public boolean equals(addExp_args that) {
	      if (that == null)
	        return false;

	      boolean this_present_tagWeightId = true;
	      boolean that_present_tagWeightId = true;
	      if (this_present_tagWeightId || that_present_tagWeightId) {
	        if (!(this_present_tagWeightId && that_present_tagWeightId))
	          return false;
	        if (this.tagWeightId != that.tagWeightId)
	          return false;
	      }

	      boolean this_present_expKey = true;
	      boolean that_present_expKey = true;
	      if (this_present_expKey || that_present_expKey) {
	        if (!(this_present_expKey && that_present_expKey))
	          return false;
	        if (this.expKey != that.expKey)
	          return false;
	      }

	      boolean this_present_expVal = true && this.isSetExpVal();
	      boolean that_present_expVal = true && that.isSetExpVal();
	      if (this_present_expVal || that_present_expVal) {
	        if (!(this_present_expVal && that_present_expVal))
	          return false;
	        if (!this.expVal.equals(that.expVal))
	          return false;
	      }

	      boolean this_present_expOp = true && this.isSetExpOp();
	      boolean that_present_expOp = true && that.isSetExpOp();
	      if (this_present_expOp || that_present_expOp) {
	        if (!(this_present_expOp && that_present_expOp))
	          return false;
	        if (!this.expOp.equals(that.expOp))
	          return false;
	      }

	      return true;
	    }

	    @Override
	    public int hashCode() {
	      return 0;
	    }

	    public int compareTo(addExp_args other) {
	      if (!getClass().equals(other.getClass())) {
	        return getClass().getName().compareTo(other.getClass().getName());
	      }

	      int lastComparison = 0;
	      addExp_args typedOther = (addExp_args)other;

	      lastComparison = Boolean.valueOf(isSetTagWeightId()).compareTo(typedOther.isSetTagWeightId());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagWeightId()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagWeightId, typedOther.tagWeightId);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetExpKey()).compareTo(typedOther.isSetExpKey());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetExpKey()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expKey, typedOther.expKey);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetExpVal()).compareTo(typedOther.isSetExpVal());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetExpVal()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expVal, typedOther.expVal);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetExpOp()).compareTo(typedOther.isSetExpOp());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetExpOp()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expOp, typedOther.expOp);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      return 0;
	    }

	    public _Fields fieldForId(int fieldId) {
	      return _Fields.findByThriftId(fieldId);
	    }

	    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
	      org.apache.thrift.protocol.TField field;
	      iprot.readStructBegin();
	      while (true)
	      {
	        field = iprot.readFieldBegin();
	        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
	          break;
	        }
	        switch (field.id) {
	          case 1: // TAG_WEIGHT_ID
	            if (field.type == org.apache.thrift.protocol.TType.I64) {
	              this.tagWeightId = iprot.readI64();
	              setTagWeightIdIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 2: // EXP_KEY
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.expKey = iprot.readI32();
	              setExpKeyIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 3: // EXP_VAL
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.expVal = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 4: // EXP_OP
	            if (field.type == org.apache.thrift.protocol.TType.STRING) {
	              this.expOp = iprot.readString();
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          default:
	            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	        }
	        iprot.readFieldEnd();
	      }
	      iprot.readStructEnd();

	      // check for required fields of primitive type, which can't be checked in the validate method
	      validate();
	    }

	    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
	      validate();

	      oprot.writeStructBegin(STRUCT_DESC);
	      oprot.writeFieldBegin(TAG_WEIGHT_ID_FIELD_DESC);
	      oprot.writeI64(this.tagWeightId);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(EXP_KEY_FIELD_DESC);
	      oprot.writeI32(this.expKey);
	      oprot.writeFieldEnd();
	      if (this.expVal != null) {
	        oprot.writeFieldBegin(EXP_VAL_FIELD_DESC);
	        oprot.writeString(this.expVal);
	        oprot.writeFieldEnd();
	      }
	      if (this.expOp != null) {
	        oprot.writeFieldBegin(EXP_OP_FIELD_DESC);
	        oprot.writeString(this.expOp);
	        oprot.writeFieldEnd();
	      }
	      oprot.writeFieldStop();
	      oprot.writeStructEnd();
	    }

	    @Override
	    public String toString() {
	      StringBuilder sb = new StringBuilder("addExp_args(");
	      boolean first = true;

	      sb.append("tagWeightId:");
	      sb.append(this.tagWeightId);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("expKey:");
	      sb.append(this.expKey);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("expVal:");
	      if (this.expVal == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.expVal);
	      }
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("expOp:");
	      if (this.expOp == null) {
	        sb.append("null");
	      } else {
	        sb.append(this.expOp);
	      }
	      first = false;
	      sb.append(")");
	      return sb.toString();
	    }

	    public void validate() throws org.apache.thrift.TException {
	      // check for required fields
	    }

	    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
	      try {
	        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
	      try {
	        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
	        __isset_bit_vector = new BitSet(1);
	        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	  }

  public static class addExp_result implements org.apache.thrift.TBase<addExp_result, addExp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExp_result.class, metaDataMap);
    }

    public addExp_result() {
    }

    public addExp_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addExp_result(addExp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addExp_result deepCopy() {
      return new addExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addExp_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addExp_result)
        return this.equals((addExp_result)that);
      return false;
    }

    public boolean equals(addExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addExp_result typedOther = (addExp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteExp_args implements org.apache.thrift.TBase<deleteExp_args, deleteExp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExp_args");

    private static final org.apache.thrift.protocol.TField EXP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("expId", org.apache.thrift.protocol.TType.I64, (short)1);

    public long expId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXP_ID((short)1, "expId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXP_ID
            return EXP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXP_ID, new org.apache.thrift.meta_data.FieldMetaData("expId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExp_args.class, metaDataMap);
    }

    public deleteExp_args() {
    }

    public deleteExp_args(
      long expId)
    {
      this();
      this.expId = expId;
      setExpIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExp_args(deleteExp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.expId = other.expId;
    }

    public deleteExp_args deepCopy() {
      return new deleteExp_args(this);
    }

    @Override
    public void clear() {
      setExpIdIsSet(false);
      this.expId = 0;
    }

    public long getExpId() {
      return this.expId;
    }

    public deleteExp_args setExpId(long expId) {
      this.expId = expId;
      setExpIdIsSet(true);
      return this;
    }

    public void unsetExpId() {
      __isset_bit_vector.clear(__EXPID_ISSET_ID);
    }

    /** Returns true if field expId is set (has been assigned a value) and false otherwise */
    public boolean isSetExpId() {
      return __isset_bit_vector.get(__EXPID_ISSET_ID);
    }

    public void setExpIdIsSet(boolean value) {
      __isset_bit_vector.set(__EXPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXP_ID:
        if (value == null) {
          unsetExpId();
        } else {
          setExpId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXP_ID:
        return new Long(getExpId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXP_ID:
        return isSetExpId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExp_args)
        return this.equals((deleteExp_args)that);
      return false;
    }

    public boolean equals(deleteExp_args that) {
      if (that == null)
        return false;

      boolean this_present_expId = true;
      boolean that_present_expId = true;
      if (this_present_expId || that_present_expId) {
        if (!(this_present_expId && that_present_expId))
          return false;
        if (this.expId != that.expId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteExp_args typedOther = (deleteExp_args)other;

      lastComparison = Boolean.valueOf(isSetExpId()).compareTo(typedOther.isSetExpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expId, typedOther.expId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EXP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.expId = iprot.readI64();
              setExpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXP_ID_FIELD_DESC);
      oprot.writeI64(this.expId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExp_args(");
      boolean first = true;

      sb.append("expId:");
      sb.append(this.expId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteExp_result implements org.apache.thrift.TBase<deleteExp_result, deleteExp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExp_result.class, metaDataMap);
    }

    public deleteExp_result() {
    }

    public deleteExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExp_result(deleteExp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteExp_result deepCopy() {
      return new deleteExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExp_result)
        return this.equals((deleteExp_result)that);
      return false;
    }

    public boolean equals(deleteExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteExp_result typedOther = (deleteExp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyExp_args implements org.apache.thrift.TBase<modifyExp_args, modifyExp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyExp_args");

    private static final org.apache.thrift.protocol.TField JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String jsonParam;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_PARAM((short)1, "jsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_PARAM
            return JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("jsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyExp_args.class, metaDataMap);
    }

    public modifyExp_args() {
    }

    public modifyExp_args(
      String jsonParam)
    {
      this();
      this.jsonParam = jsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyExp_args(modifyExp_args other) {
      if (other.isSetJsonParam()) {
        this.jsonParam = other.jsonParam;
      }
    }

    public modifyExp_args deepCopy() {
      return new modifyExp_args(this);
    }

    @Override
    public void clear() {
      this.jsonParam = null;
    }

    public String getJsonParam() {
      return this.jsonParam;
    }

    public modifyExp_args setJsonParam(String jsonParam) {
      this.jsonParam = jsonParam;
      return this;
    }

    public void unsetJsonParam() {
      this.jsonParam = null;
    }

    /** Returns true if field jsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParam() {
      return this.jsonParam != null;
    }

    public void setJsonParamIsSet(boolean value) {
      if (!value) {
        this.jsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_PARAM:
        if (value == null) {
          unsetJsonParam();
        } else {
          setJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_PARAM:
        return getJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_PARAM:
        return isSetJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyExp_args)
        return this.equals((modifyExp_args)that);
      return false;
    }

    public boolean equals(modifyExp_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonParam = true && this.isSetJsonParam();
      boolean that_present_jsonParam = true && that.isSetJsonParam();
      if (this_present_jsonParam || that_present_jsonParam) {
        if (!(this_present_jsonParam && that_present_jsonParam))
          return false;
        if (!this.jsonParam.equals(that.jsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyExp_args typedOther = (modifyExp_args)other;

      lastComparison = Boolean.valueOf(isSetJsonParam()).compareTo(typedOther.isSetJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParam, typedOther.jsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JSON_PARAM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.jsonParam = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.jsonParam != null) {
        oprot.writeFieldBegin(JSON_PARAM_FIELD_DESC);
        oprot.writeString(this.jsonParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyExp_args(");
      boolean first = true;

      sb.append("jsonParam:");
      if (this.jsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyExp_result implements org.apache.thrift.TBase<modifyExp_result, modifyExp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyExp_result.class, metaDataMap);
    }

    public modifyExp_result() {
    }

    public modifyExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyExp_result(modifyExp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public modifyExp_result deepCopy() {
      return new modifyExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public modifyExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyExp_result)
        return this.equals((modifyExp_result)that);
      return false;
    }

    public boolean equals(modifyExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyExp_result typedOther = (modifyExp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchExps_args implements org.apache.thrift.TBase<searchExps_args, searchExps_args._Fields>, java.io.Serializable, Cloneable   {
	    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExps_args");

	    private static final org.apache.thrift.protocol.TField EXP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("expId", org.apache.thrift.protocol.TType.I64, (short)1);
	    private static final org.apache.thrift.protocol.TField TAG_WEIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagWeightId", org.apache.thrift.protocol.TType.I64, (short)2);
	    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
	    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)4);

	    public long expId;
	    public long tagWeightId;
	    public int page;
	    public int size;

	    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
	      EXP_ID((short)1, "expId"),
	      TAG_WEIGHT_ID((short)2, "tagWeightId"),
	      PAGE((short)3, "page"),
	      SIZE((short)4, "size");

	      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

	      static {
	        for (_Fields field : EnumSet.allOf(_Fields.class)) {
	          byName.put(field.getFieldName(), field);
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, or null if its not found.
	       */
	      public static _Fields findByThriftId(int fieldId) {
	        switch(fieldId) {
	          case 1: // EXP_ID
	            return EXP_ID;
	          case 2: // TAG_WEIGHT_ID
	            return TAG_WEIGHT_ID;
	          case 3: // PAGE
	            return PAGE;
	          case 4: // SIZE
	            return SIZE;
	          default:
	            return null;
	        }
	      }

	      /**
	       * Find the _Fields constant that matches fieldId, throwing an exception
	       * if it is not found.
	       */
	      public static _Fields findByThriftIdOrThrow(int fieldId) {
	        _Fields fields = findByThriftId(fieldId);
	        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
	        return fields;
	      }

	      /**
	       * Find the _Fields constant that matches name, or null if its not found.
	       */
	      public static _Fields findByName(String name) {
	        return byName.get(name);
	      }

	      private final short _thriftId;
	      private final String _fieldName;

	      _Fields(short thriftId, String fieldName) {
	        _thriftId = thriftId;
	        _fieldName = fieldName;
	      }

	      public short getThriftFieldId() {
	        return _thriftId;
	      }

	      public String getFieldName() {
	        return _fieldName;
	      }
	    }

	    // isset id assignments
	    private static final int __EXPID_ISSET_ID = 0;
	    private static final int __TAGWEIGHTID_ISSET_ID = 1;
	    private static final int __PAGE_ISSET_ID = 2;
	    private static final int __SIZE_ISSET_ID = 3;
	    private BitSet __isset_bit_vector = new BitSet(4);

	    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	    static {
	      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
	      tmpMap.put(_Fields.EXP_ID, new org.apache.thrift.meta_data.FieldMetaData("expId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
	      tmpMap.put(_Fields.TAG_WEIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("tagWeightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
	      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
	          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
	      metaDataMap = Collections.unmodifiableMap(tmpMap);
	      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExps_args.class, metaDataMap);
	    }

	    public searchExps_args() {
	    }

	    public searchExps_args(
	      long expId,
	      long tagWeightId,
	      int page,
	      int size)
	    {
	      this();
	      this.expId = expId;
	      setExpIdIsSet(true);
	      this.tagWeightId = tagWeightId;
	      setTagWeightIdIsSet(true);
	      this.page = page;
	      setPageIsSet(true);
	      this.size = size;
	      setSizeIsSet(true);
	    }

	    /**
	     * Performs a deep copy on <i>other</i>.
	     */
	    public searchExps_args(searchExps_args other) {
	      __isset_bit_vector.clear();
	      __isset_bit_vector.or(other.__isset_bit_vector);
	      this.expId = other.expId;
	      this.tagWeightId = other.tagWeightId;
	      this.page = other.page;
	      this.size = other.size;
	    }

	    public searchExps_args deepCopy() {
	      return new searchExps_args(this);
	    }

	    @Override
	    public void clear() {
	      setExpIdIsSet(false);
	      this.expId = 0;
	      setTagWeightIdIsSet(false);
	      this.tagWeightId = 0;
	      setPageIsSet(false);
	      this.page = 0;
	      setSizeIsSet(false);
	      this.size = 0;
	    }

	    public long getExpId() {
	      return this.expId;
	    }

	    public searchExps_args setExpId(long expId) {
	      this.expId = expId;
	      setExpIdIsSet(true);
	      return this;
	    }

	    public void unsetExpId() {
	      __isset_bit_vector.clear(__EXPID_ISSET_ID);
	    }

	    /** Returns true if field expId is set (has been assigned a value) and false otherwise */
	    public boolean isSetExpId() {
	      return __isset_bit_vector.get(__EXPID_ISSET_ID);
	    }

	    public void setExpIdIsSet(boolean value) {
	      __isset_bit_vector.set(__EXPID_ISSET_ID, value);
	    }

	    public long getTagWeightId() {
	      return this.tagWeightId;
	    }

	    public searchExps_args setTagWeightId(long tagWeightId) {
	      this.tagWeightId = tagWeightId;
	      setTagWeightIdIsSet(true);
	      return this;
	    }

	    public void unsetTagWeightId() {
	      __isset_bit_vector.clear(__TAGWEIGHTID_ISSET_ID);
	    }

	    /** Returns true if field tagWeightId is set (has been assigned a value) and false otherwise */
	    public boolean isSetTagWeightId() {
	      return __isset_bit_vector.get(__TAGWEIGHTID_ISSET_ID);
	    }

	    public void setTagWeightIdIsSet(boolean value) {
	      __isset_bit_vector.set(__TAGWEIGHTID_ISSET_ID, value);
	    }

	    public int getPage() {
	      return this.page;
	    }

	    public searchExps_args setPage(int page) {
	      this.page = page;
	      setPageIsSet(true);
	      return this;
	    }

	    public void unsetPage() {
	      __isset_bit_vector.clear(__PAGE_ISSET_ID);
	    }

	    /** Returns true if field page is set (has been assigned a value) and false otherwise */
	    public boolean isSetPage() {
	      return __isset_bit_vector.get(__PAGE_ISSET_ID);
	    }

	    public void setPageIsSet(boolean value) {
	      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
	    }

	    public int getSize() {
	      return this.size;
	    }

	    public searchExps_args setSize(int size) {
	      this.size = size;
	      setSizeIsSet(true);
	      return this;
	    }

	    public void unsetSize() {
	      __isset_bit_vector.clear(__SIZE_ISSET_ID);
	    }

	    /** Returns true if field size is set (has been assigned a value) and false otherwise */
	    public boolean isSetSize() {
	      return __isset_bit_vector.get(__SIZE_ISSET_ID);
	    }

	    public void setSizeIsSet(boolean value) {
	      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
	    }

	    public void setFieldValue(_Fields field, Object value) {
	      switch (field) {
	      case EXP_ID:
	        if (value == null) {
	          unsetExpId();
	        } else {
	          setExpId((Long)value);
	        }
	        break;

	      case TAG_WEIGHT_ID:
	        if (value == null) {
	          unsetTagWeightId();
	        } else {
	          setTagWeightId((Long)value);
	        }
	        break;

	      case PAGE:
	        if (value == null) {
	          unsetPage();
	        } else {
	          setPage((Integer)value);
	        }
	        break;

	      case SIZE:
	        if (value == null) {
	          unsetSize();
	        } else {
	          setSize((Integer)value);
	        }
	        break;

	      }
	    }

	    public Object getFieldValue(_Fields field) {
	      switch (field) {
	      case EXP_ID:
	        return new Long(getExpId());

	      case TAG_WEIGHT_ID:
	        return new Long(getTagWeightId());

	      case PAGE:
	        return new Integer(getPage());

	      case SIZE:
	        return new Integer(getSize());

	      }
	      throw new IllegalStateException();
	    }

	    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	    public boolean isSet(_Fields field) {
	      if (field == null) {
	        throw new IllegalArgumentException();
	      }

	      switch (field) {
	      case EXP_ID:
	        return isSetExpId();
	      case TAG_WEIGHT_ID:
	        return isSetTagWeightId();
	      case PAGE:
	        return isSetPage();
	      case SIZE:
	        return isSetSize();
	      }
	      throw new IllegalStateException();
	    }

	    @Override
	    public boolean equals(Object that) {
	      if (that == null)
	        return false;
	      if (that instanceof searchExps_args)
	        return this.equals((searchExps_args)that);
	      return false;
	    }

	    public boolean equals(searchExps_args that) {
	      if (that == null)
	        return false;

	      boolean this_present_expId = true;
	      boolean that_present_expId = true;
	      if (this_present_expId || that_present_expId) {
	        if (!(this_present_expId && that_present_expId))
	          return false;
	        if (this.expId != that.expId)
	          return false;
	      }

	      boolean this_present_tagWeightId = true;
	      boolean that_present_tagWeightId = true;
	      if (this_present_tagWeightId || that_present_tagWeightId) {
	        if (!(this_present_tagWeightId && that_present_tagWeightId))
	          return false;
	        if (this.tagWeightId != that.tagWeightId)
	          return false;
	      }

	      boolean this_present_page = true;
	      boolean that_present_page = true;
	      if (this_present_page || that_present_page) {
	        if (!(this_present_page && that_present_page))
	          return false;
	        if (this.page != that.page)
	          return false;
	      }

	      boolean this_present_size = true;
	      boolean that_present_size = true;
	      if (this_present_size || that_present_size) {
	        if (!(this_present_size && that_present_size))
	          return false;
	        if (this.size != that.size)
	          return false;
	      }

	      return true;
	    }

	    @Override
	    public int hashCode() {
	      return 0;
	    }

	    public int compareTo(searchExps_args other) {
	      if (!getClass().equals(other.getClass())) {
	        return getClass().getName().compareTo(other.getClass().getName());
	      }

	      int lastComparison = 0;
	      searchExps_args typedOther = (searchExps_args)other;

	      lastComparison = Boolean.valueOf(isSetExpId()).compareTo(typedOther.isSetExpId());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetExpId()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expId, typedOther.expId);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetTagWeightId()).compareTo(typedOther.isSetTagWeightId());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetTagWeightId()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagWeightId, typedOther.tagWeightId);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetPage()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
	      if (lastComparison != 0) {
	        return lastComparison;
	      }
	      if (isSetSize()) {
	        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
	        if (lastComparison != 0) {
	          return lastComparison;
	        }
	      }
	      return 0;
	    }

	    public _Fields fieldForId(int fieldId) {
	      return _Fields.findByThriftId(fieldId);
	    }

	    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
	      org.apache.thrift.protocol.TField field;
	      iprot.readStructBegin();
	      while (true)
	      {
	        field = iprot.readFieldBegin();
	        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
	          break;
	        }
	        switch (field.id) {
	          case 1: // EXP_ID
	            if (field.type == org.apache.thrift.protocol.TType.I64) {
	              this.expId = iprot.readI64();
	              setExpIdIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 2: // TAG_WEIGHT_ID
	            if (field.type == org.apache.thrift.protocol.TType.I64) {
	              this.tagWeightId = iprot.readI64();
	              setTagWeightIdIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 3: // PAGE
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.page = iprot.readI32();
	              setPageIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          case 4: // SIZE
	            if (field.type == org.apache.thrift.protocol.TType.I32) {
	              this.size = iprot.readI32();
	              setSizeIsSet(true);
	            } else { 
	              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	            }
	            break;
	          default:
	            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
	        }
	        iprot.readFieldEnd();
	      }
	      iprot.readStructEnd();

	      // check for required fields of primitive type, which can't be checked in the validate method
	      validate();
	    }

	    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
	      validate();

	      oprot.writeStructBegin(STRUCT_DESC);
	      oprot.writeFieldBegin(EXP_ID_FIELD_DESC);
	      oprot.writeI64(this.expId);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(TAG_WEIGHT_ID_FIELD_DESC);
	      oprot.writeI64(this.tagWeightId);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(PAGE_FIELD_DESC);
	      oprot.writeI32(this.page);
	      oprot.writeFieldEnd();
	      oprot.writeFieldBegin(SIZE_FIELD_DESC);
	      oprot.writeI32(this.size);
	      oprot.writeFieldEnd();
	      oprot.writeFieldStop();
	      oprot.writeStructEnd();
	    }

	    @Override
	    public String toString() {
	      StringBuilder sb = new StringBuilder("searchExps_args(");
	      boolean first = true;

	      sb.append("expId:");
	      sb.append(this.expId);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("tagWeightId:");
	      sb.append(this.tagWeightId);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("page:");
	      sb.append(this.page);
	      first = false;
	      if (!first) sb.append(", ");
	      sb.append("size:");
	      sb.append(this.size);
	      first = false;
	      sb.append(")");
	      return sb.toString();
	    }

	    public void validate() throws org.apache.thrift.TException {
	      // check for required fields
	    }

	    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
	      try {
	        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
	      try {
	        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
	        __isset_bit_vector = new BitSet(1);
	        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
	      } catch (org.apache.thrift.TException te) {
	        throw new java.io.IOException(te);
	      }
	    }

	  }

  public static class searchExps_result implements org.apache.thrift.TBase<searchExps_result, searchExps_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExps_result.class, metaDataMap);
    }

    public searchExps_result() {
    }

    public searchExps_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExps_result(searchExps_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchExps_result deepCopy() {
      return new searchExps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchExps_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExps_result)
        return this.equals((searchExps_result)that);
      return false;
    }

    public boolean equals(searchExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchExps_result typedOther = (searchExps_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchAlgos_args implements org.apache.thrift.TBase<searchAlgos_args, searchAlgos_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAlgos_args");

    private static final org.apache.thrift.protocol.TField CALC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("calcType", org.apache.thrift.protocol.TType.I32, (short)1);

    public int calcType;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALC_TYPE((short)1, "calcType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALC_TYPE
            return CALC_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CALCTYPE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("calcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAlgos_args.class, metaDataMap);
    }

    public searchAlgos_args() {
    }

    public searchAlgos_args(
      int calcType)
    {
      this();
      this.calcType = calcType;
      setCalcTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAlgos_args(searchAlgos_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.calcType = other.calcType;
    }

    public searchAlgos_args deepCopy() {
      return new searchAlgos_args(this);
    }

    @Override
    public void clear() {
      setCalcTypeIsSet(false);
      this.calcType = 0;
    }

    public int getCalcType() {
      return this.calcType;
    }

    public searchAlgos_args setCalcType(int calcType) {
      this.calcType = calcType;
      setCalcTypeIsSet(true);
      return this;
    }

    public void unsetCalcType() {
      __isset_bit_vector.clear(__CALCTYPE_ISSET_ID);
    }

    /** Returns true if field calcType is set (has been assigned a value) and false otherwise */
    public boolean isSetCalcType() {
      return __isset_bit_vector.get(__CALCTYPE_ISSET_ID);
    }

    public void setCalcTypeIsSet(boolean value) {
      __isset_bit_vector.set(__CALCTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALC_TYPE:
        if (value == null) {
          unsetCalcType();
        } else {
          setCalcType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALC_TYPE:
        return new Integer(getCalcType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALC_TYPE:
        return isSetCalcType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAlgos_args)
        return this.equals((searchAlgos_args)that);
      return false;
    }

    public boolean equals(searchAlgos_args that) {
      if (that == null)
        return false;

      boolean this_present_calcType = true;
      boolean that_present_calcType = true;
      if (this_present_calcType || that_present_calcType) {
        if (!(this_present_calcType && that_present_calcType))
          return false;
        if (this.calcType != that.calcType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchAlgos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchAlgos_args typedOther = (searchAlgos_args)other;

      lastComparison = Boolean.valueOf(isSetCalcType()).compareTo(typedOther.isSetCalcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCalcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calcType, typedOther.calcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CALC_TYPE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.calcType = iprot.readI32();
              setCalcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CALC_TYPE_FIELD_DESC);
      oprot.writeI32(this.calcType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAlgos_args(");
      boolean first = true;

      sb.append("calcType:");
      sb.append(this.calcType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchAlgos_result implements org.apache.thrift.TBase<searchAlgos_result, searchAlgos_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAlgos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAlgos_result.class, metaDataMap);
    }

    public searchAlgos_result() {
    }

    public searchAlgos_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAlgos_result(searchAlgos_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchAlgos_result deepCopy() {
      return new searchAlgos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchAlgos_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAlgos_result)
        return this.equals((searchAlgos_result)that);
      return false;
    }

    public boolean equals(searchAlgos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchAlgos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchAlgos_result typedOther = (searchAlgos_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAlgos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addAppidConfig_args implements org.apache.thrift.TBase<addAppidConfig_args, addAppidConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAppidConfig_args");

    private static final org.apache.thrift.protocol.TField JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String jsonParam;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_PARAM((short)1, "jsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_PARAM
            return JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("jsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAppidConfig_args.class, metaDataMap);
    }

    public addAppidConfig_args() {
    }

    public addAppidConfig_args(
      String jsonParam)
    {
      this();
      this.jsonParam = jsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAppidConfig_args(addAppidConfig_args other) {
      if (other.isSetJsonParam()) {
        this.jsonParam = other.jsonParam;
      }
    }

    public addAppidConfig_args deepCopy() {
      return new addAppidConfig_args(this);
    }

    @Override
    public void clear() {
      this.jsonParam = null;
    }

    public String getJsonParam() {
      return this.jsonParam;
    }

    public addAppidConfig_args setJsonParam(String jsonParam) {
      this.jsonParam = jsonParam;
      return this;
    }

    public void unsetJsonParam() {
      this.jsonParam = null;
    }

    /** Returns true if field jsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParam() {
      return this.jsonParam != null;
    }

    public void setJsonParamIsSet(boolean value) {
      if (!value) {
        this.jsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_PARAM:
        if (value == null) {
          unsetJsonParam();
        } else {
          setJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_PARAM:
        return getJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_PARAM:
        return isSetJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAppidConfig_args)
        return this.equals((addAppidConfig_args)that);
      return false;
    }

    public boolean equals(addAppidConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonParam = true && this.isSetJsonParam();
      boolean that_present_jsonParam = true && that.isSetJsonParam();
      if (this_present_jsonParam || that_present_jsonParam) {
        if (!(this_present_jsonParam && that_present_jsonParam))
          return false;
        if (!this.jsonParam.equals(that.jsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAppidConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAppidConfig_args typedOther = (addAppidConfig_args)other;

      lastComparison = Boolean.valueOf(isSetJsonParam()).compareTo(typedOther.isSetJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParam, typedOther.jsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JSON_PARAM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.jsonParam = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.jsonParam != null) {
        oprot.writeFieldBegin(JSON_PARAM_FIELD_DESC);
        oprot.writeString(this.jsonParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAppidConfig_args(");
      boolean first = true;

      sb.append("jsonParam:");
      if (this.jsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addAppidConfig_result implements org.apache.thrift.TBase<addAppidConfig_result, addAppidConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAppidConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAppidConfig_result.class, metaDataMap);
    }

    public addAppidConfig_result() {
    }

    public addAppidConfig_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAppidConfig_result(addAppidConfig_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addAppidConfig_result deepCopy() {
      return new addAppidConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addAppidConfig_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAppidConfig_result)
        return this.equals((addAppidConfig_result)that);
      return false;
    }

    public boolean equals(addAppidConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAppidConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAppidConfig_result typedOther = (addAppidConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAppidConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateAppidConfig_args implements org.apache.thrift.TBase<updateAppidConfig_args, updateAppidConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppidConfig_args");

    private static final org.apache.thrift.protocol.TField JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String jsonParam;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_PARAM((short)1, "jsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_PARAM
            return JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("jsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppidConfig_args.class, metaDataMap);
    }

    public updateAppidConfig_args() {
    }

    public updateAppidConfig_args(
      String jsonParam)
    {
      this();
      this.jsonParam = jsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppidConfig_args(updateAppidConfig_args other) {
      if (other.isSetJsonParam()) {
        this.jsonParam = other.jsonParam;
      }
    }

    public updateAppidConfig_args deepCopy() {
      return new updateAppidConfig_args(this);
    }

    @Override
    public void clear() {
      this.jsonParam = null;
    }

    public String getJsonParam() {
      return this.jsonParam;
    }

    public updateAppidConfig_args setJsonParam(String jsonParam) {
      this.jsonParam = jsonParam;
      return this;
    }

    public void unsetJsonParam() {
      this.jsonParam = null;
    }

    /** Returns true if field jsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParam() {
      return this.jsonParam != null;
    }

    public void setJsonParamIsSet(boolean value) {
      if (!value) {
        this.jsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_PARAM:
        if (value == null) {
          unsetJsonParam();
        } else {
          setJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_PARAM:
        return getJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_PARAM:
        return isSetJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppidConfig_args)
        return this.equals((updateAppidConfig_args)that);
      return false;
    }

    public boolean equals(updateAppidConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonParam = true && this.isSetJsonParam();
      boolean that_present_jsonParam = true && that.isSetJsonParam();
      if (this_present_jsonParam || that_present_jsonParam) {
        if (!(this_present_jsonParam && that_present_jsonParam))
          return false;
        if (!this.jsonParam.equals(that.jsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAppidConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAppidConfig_args typedOther = (updateAppidConfig_args)other;

      lastComparison = Boolean.valueOf(isSetJsonParam()).compareTo(typedOther.isSetJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParam, typedOther.jsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JSON_PARAM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.jsonParam = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.jsonParam != null) {
        oprot.writeFieldBegin(JSON_PARAM_FIELD_DESC);
        oprot.writeString(this.jsonParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppidConfig_args(");
      boolean first = true;

      sb.append("jsonParam:");
      if (this.jsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateAppidConfig_result implements org.apache.thrift.TBase<updateAppidConfig_result, updateAppidConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppidConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppidConfig_result.class, metaDataMap);
    }

    public updateAppidConfig_result() {
    }

    public updateAppidConfig_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppidConfig_result(updateAppidConfig_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateAppidConfig_result deepCopy() {
      return new updateAppidConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateAppidConfig_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppidConfig_result)
        return this.equals((updateAppidConfig_result)that);
      return false;
    }

    public boolean equals(updateAppidConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAppidConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAppidConfig_result typedOther = (updateAppidConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppidConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteAppidConfig_args implements org.apache.thrift.TBase<deleteAppidConfig_args, deleteAppidConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAppidConfig_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);

    public long appkey;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAppidConfig_args.class, metaDataMap);
    }

    public deleteAppidConfig_args() {
    }

    public deleteAppidConfig_args(
      long appkey)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAppidConfig_args(deleteAppidConfig_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
    }

    public deleteAppidConfig_args deepCopy() {
      return new deleteAppidConfig_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public deleteAppidConfig_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAppidConfig_args)
        return this.equals((deleteAppidConfig_args)that);
      return false;
    }

    public boolean equals(deleteAppidConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteAppidConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteAppidConfig_args typedOther = (deleteAppidConfig_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAppidConfig_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteAppidConfig_result implements org.apache.thrift.TBase<deleteAppidConfig_result, deleteAppidConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAppidConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAppidConfig_result.class, metaDataMap);
    }

    public deleteAppidConfig_result() {
    }

    public deleteAppidConfig_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAppidConfig_result(deleteAppidConfig_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteAppidConfig_result deepCopy() {
      return new deleteAppidConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteAppidConfig_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAppidConfig_result)
        return this.equals((deleteAppidConfig_result)that);
      return false;
    }

    public boolean equals(deleteAppidConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteAppidConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteAppidConfig_result typedOther = (deleteAppidConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAppidConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchAppidConfig_args implements org.apache.thrift.TBase<searchAppidConfig_args, searchAppidConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAppidConfig_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);

    public long appkey;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAppidConfig_args.class, metaDataMap);
    }

    public searchAppidConfig_args() {
    }

    public searchAppidConfig_args(
      long appkey)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAppidConfig_args(searchAppidConfig_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
    }

    public searchAppidConfig_args deepCopy() {
      return new searchAppidConfig_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public searchAppidConfig_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAppidConfig_args)
        return this.equals((searchAppidConfig_args)that);
      return false;
    }

    public boolean equals(searchAppidConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchAppidConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchAppidConfig_args typedOther = (searchAppidConfig_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAppidConfig_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchAppidConfig_result implements org.apache.thrift.TBase<searchAppidConfig_result, searchAppidConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAppidConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAppidConfig_result.class, metaDataMap);
    }

    public searchAppidConfig_result() {
    }

    public searchAppidConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAppidConfig_result(searchAppidConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchAppidConfig_result deepCopy() {
      return new searchAppidConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchAppidConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAppidConfig_result)
        return this.equals((searchAppidConfig_result)that);
      return false;
    }

    public boolean equals(searchAppidConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchAppidConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchAppidConfig_result typedOther = (searchAppidConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAppidConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
