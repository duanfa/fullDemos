/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.tom.thrift.hello;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IHelloWorldService {

  public interface Iface {

    public long addExp(long tagWeightId, int expKey, String expVal, String expOp) throws org.apache.thrift.TException;

    public int deleteExp(long expId) throws org.apache.thrift.TException;

    public int modifyExp(String jsonParam) throws org.apache.thrift.TException;

    public String searchExps(long expId, long tagWeightId, int page, int size) throws org.apache.thrift.TException;

    public long addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addExp(long tagWeightId, int expKey, String expVal, String expOp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addExp_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteExp(long expId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteExp_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyExp(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyExp_call> resultHandler) throws org.apache.thrift.TException;

    public void searchExps(long expId, long tagWeightId, int page, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchExps_call> resultHandler) throws org.apache.thrift.TException;

    public void addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addTag_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected org.apache.thrift.protocol.TProtocol iprot_;
    protected org.apache.thrift.protocol.TProtocol oprot_;

    protected int seqid_;

    public org.apache.thrift.protocol.TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public org.apache.thrift.protocol.TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public long addExp(long tagWeightId, int expKey, String expVal, String expOp) throws org.apache.thrift.TException
    {
      send_addExp(tagWeightId, expKey, expVal, expOp);
      return recv_addExp();
    }

    public void send_addExp(long tagWeightId, int expKey, String expVal, String expOp) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addExp_args args = new addExp_args();
      args.setTagWeightId(tagWeightId);
      args.setExpKey(expKey);
      args.setExpVal(expVal);
      args.setExpOp(expOp);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addExp() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addExp failed: out of sequence response");
      }
      addExp_result result = new addExp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addExp failed: unknown result");
    }

    public int deleteExp(long expId) throws org.apache.thrift.TException
    {
      send_deleteExp(expId);
      return recv_deleteExp();
    }

    public void send_deleteExp(long expId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteExp_args args = new deleteExp_args();
      args.setExpId(expId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteExp() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteExp failed: out of sequence response");
      }
      deleteExp_result result = new deleteExp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteExp failed: unknown result");
    }

    public int modifyExp(String jsonParam) throws org.apache.thrift.TException
    {
      send_modifyExp(jsonParam);
      return recv_modifyExp();
    }

    public void send_modifyExp(String jsonParam) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      modifyExp_args args = new modifyExp_args();
      args.setJsonParam(jsonParam);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_modifyExp() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "modifyExp failed: out of sequence response");
      }
      modifyExp_result result = new modifyExp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyExp failed: unknown result");
    }

    public String searchExps(long expId, long tagWeightId, int page, int size) throws org.apache.thrift.TException
    {
      send_searchExps(expId, tagWeightId, page, size);
      return recv_searchExps();
    }

    public void send_searchExps(long expId, long tagWeightId, int page, int size) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      searchExps_args args = new searchExps_args();
      args.setExpId(expId);
      args.setTagWeightId(tagWeightId);
      args.setPage(page);
      args.setSize(size);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_searchExps() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "searchExps failed: out of sequence response");
      }
      searchExps_result result = new searchExps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchExps failed: unknown result");
    }

    public long addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      send_addTag(appkey, tagname, tagDescri, tagclass, tagSubclass, defWeight, calcType, days);
      return recv_addTag();
    }

    public void send_addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      addTag_args args = new addTag_args();
      args.setAppkey(appkey);
      args.setTagname(tagname);
      args.setTagDescri(tagDescri);
      args.setTagclass(tagclass);
      args.setTagSubclass(tagSubclass);
      args.setDefWeight(defWeight);
      args.setCalcType(calcType);
      args.setDays(days);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_addTag() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "addTag failed: out of sequence response");
      }
      addTag_result result = new addTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTag failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addExp(long tagWeightId, int expKey, String expVal, String expOp, org.apache.thrift.async.AsyncMethodCallback<addExp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addExp_call method_call = new addExp_call(tagWeightId, expKey, expVal, expOp, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long tagWeightId;
      private int expKey;
      private String expVal;
      private String expOp;
      public addExp_call(long tagWeightId, int expKey, String expVal, String expOp, org.apache.thrift.async.AsyncMethodCallback<addExp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagWeightId = tagWeightId;
        this.expKey = expKey;
        this.expVal = expVal;
        this.expOp = expOp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addExp_args args = new addExp_args();
        args.setTagWeightId(tagWeightId);
        args.setExpKey(expKey);
        args.setExpVal(expVal);
        args.setExpOp(expOp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addExp();
      }
    }

    public void deleteExp(long expId, org.apache.thrift.async.AsyncMethodCallback<deleteExp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteExp_call method_call = new deleteExp_call(expId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long expId;
      public deleteExp_call(long expId, org.apache.thrift.async.AsyncMethodCallback<deleteExp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expId = expId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteExp_args args = new deleteExp_args();
        args.setExpId(expId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteExp();
      }
    }

    public void modifyExp(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<modifyExp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyExp_call method_call = new modifyExp_call(jsonParam, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonParam;
      public modifyExp_call(String jsonParam, org.apache.thrift.async.AsyncMethodCallback<modifyExp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonParam = jsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyExp_args args = new modifyExp_args();
        args.setJsonParam(jsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyExp();
      }
    }

    public void searchExps(long expId, long tagWeightId, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchExps_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchExps_call method_call = new searchExps_call(expId, tagWeightId, page, size, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class searchExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long expId;
      private long tagWeightId;
      private int page;
      private int size;
      public searchExps_call(long expId, long tagWeightId, int page, int size, org.apache.thrift.async.AsyncMethodCallback<searchExps_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expId = expId;
        this.tagWeightId = tagWeightId;
        this.page = page;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchExps_args args = new searchExps_args();
        args.setExpId(expId);
        args.setTagWeightId(tagWeightId);
        args.setPage(page);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchExps();
      }
    }

    public void addTag(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<addTag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTag_call method_call = new addTag_call(appkey, tagname, tagDescri, tagclass, tagSubclass, defWeight, calcType, days, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appkey;
      private String tagname;
      private String tagDescri;
      private String tagclass;
      private String tagSubclass;
      private double defWeight;
      private int calcType;
      private int days;
      public addTag_call(long appkey, String tagname, String tagDescri, String tagclass, String tagSubclass, double defWeight, int calcType, int days, org.apache.thrift.async.AsyncMethodCallback<addTag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.tagname = tagname;
        this.tagDescri = tagDescri;
        this.tagclass = tagclass;
        this.tagSubclass = tagSubclass;
        this.defWeight = defWeight;
        this.calcType = calcType;
        this.days = days;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTag_args args = new addTag_args();
        args.setAppkey(appkey);
        args.setTagname(tagname);
        args.setTagDescri(tagDescri);
        args.setTagclass(tagclass);
        args.setTagSubclass(tagSubclass);
        args.setDefWeight(defWeight);
        args.setCalcType(calcType);
        args.setDays(days);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTag();
      }
    }

  }

  public static class Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("addExp", new addExp());
      processMap_.put("deleteExp", new deleteExp());
      processMap_.put("modifyExp", new modifyExp());
      processMap_.put("searchExps", new searchExps());
      processMap_.put("addTag", new addTag());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class addExp implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addExp_args args = new addExp_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addExp_result result = new addExp_result();
        result.success = iface_.addExp(args.tagWeightId, args.expKey, args.expVal, args.expOp);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExp", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteExp implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteExp_args args = new deleteExp_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteExp_result result = new deleteExp_result();
        result.success = iface_.deleteExp(args.expId);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExp", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class modifyExp implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        modifyExp_args args = new modifyExp_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        modifyExp_result result = new modifyExp_result();
        result.success = iface_.modifyExp(args.jsonParam);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyExp", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchExps implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        searchExps_args args = new searchExps_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchExps_result result = new searchExps_result();
        result.success = iface_.searchExps(args.expId, args.tagWeightId, args.page, args.size);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExps", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addTag implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        addTag_args args = new addTag_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addTag_result result = new addTag_result();
        result.success = iface_.addTag(args.appkey, args.tagname, args.tagDescri, args.tagclass, args.tagSubclass, args.defWeight, args.calcType, args.days);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class addExp_args implements org.apache.thrift.TBase<addExp_args, addExp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExp_args");

    private static final org.apache.thrift.protocol.TField TAG_WEIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagWeightId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField EXP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("expKey", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField EXP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("expVal", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXP_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("expOp", org.apache.thrift.protocol.TType.STRING, (short)4);

    public long tagWeightId;
    public int expKey;
    public String expVal;
    public String expOp;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_WEIGHT_ID((short)1, "tagWeightId"),
      EXP_KEY((short)2, "expKey"),
      EXP_VAL((short)3, "expVal"),
      EXP_OP((short)4, "expOp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_WEIGHT_ID
            return TAG_WEIGHT_ID;
          case 2: // EXP_KEY
            return EXP_KEY;
          case 3: // EXP_VAL
            return EXP_VAL;
          case 4: // EXP_OP
            return EXP_OP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAGWEIGHTID_ISSET_ID = 0;
    private static final int __EXPKEY_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_WEIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("tagWeightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXP_KEY, new org.apache.thrift.meta_data.FieldMetaData("expKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXP_VAL, new org.apache.thrift.meta_data.FieldMetaData("expVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXP_OP, new org.apache.thrift.meta_data.FieldMetaData("expOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExp_args.class, metaDataMap);
    }

    public addExp_args() {
    }

    public addExp_args(
      long tagWeightId,
      int expKey,
      String expVal,
      String expOp)
    {
      this();
      this.tagWeightId = tagWeightId;
      setTagWeightIdIsSet(true);
      this.expKey = expKey;
      setExpKeyIsSet(true);
      this.expVal = expVal;
      this.expOp = expOp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addExp_args(addExp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.tagWeightId = other.tagWeightId;
      this.expKey = other.expKey;
      if (other.isSetExpVal()) {
        this.expVal = other.expVal;
      }
      if (other.isSetExpOp()) {
        this.expOp = other.expOp;
      }
    }

    public addExp_args deepCopy() {
      return new addExp_args(this);
    }

    @Override
    public void clear() {
      setTagWeightIdIsSet(false);
      this.tagWeightId = 0;
      setExpKeyIsSet(false);
      this.expKey = 0;
      this.expVal = null;
      this.expOp = null;
    }

    public long getTagWeightId() {
      return this.tagWeightId;
    }

    public addExp_args setTagWeightId(long tagWeightId) {
      this.tagWeightId = tagWeightId;
      setTagWeightIdIsSet(true);
      return this;
    }

    public void unsetTagWeightId() {
      __isset_bit_vector.clear(__TAGWEIGHTID_ISSET_ID);
    }

    /** Returns true if field tagWeightId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagWeightId() {
      return __isset_bit_vector.get(__TAGWEIGHTID_ISSET_ID);
    }

    public void setTagWeightIdIsSet(boolean value) {
      __isset_bit_vector.set(__TAGWEIGHTID_ISSET_ID, value);
    }

    public int getExpKey() {
      return this.expKey;
    }

    public addExp_args setExpKey(int expKey) {
      this.expKey = expKey;
      setExpKeyIsSet(true);
      return this;
    }

    public void unsetExpKey() {
      __isset_bit_vector.clear(__EXPKEY_ISSET_ID);
    }

    /** Returns true if field expKey is set (has been assigned a value) and false otherwise */
    public boolean isSetExpKey() {
      return __isset_bit_vector.get(__EXPKEY_ISSET_ID);
    }

    public void setExpKeyIsSet(boolean value) {
      __isset_bit_vector.set(__EXPKEY_ISSET_ID, value);
    }

    public String getExpVal() {
      return this.expVal;
    }

    public addExp_args setExpVal(String expVal) {
      this.expVal = expVal;
      return this;
    }

    public void unsetExpVal() {
      this.expVal = null;
    }

    /** Returns true if field expVal is set (has been assigned a value) and false otherwise */
    public boolean isSetExpVal() {
      return this.expVal != null;
    }

    public void setExpValIsSet(boolean value) {
      if (!value) {
        this.expVal = null;
      }
    }

    public String getExpOp() {
      return this.expOp;
    }

    public addExp_args setExpOp(String expOp) {
      this.expOp = expOp;
      return this;
    }

    public void unsetExpOp() {
      this.expOp = null;
    }

    /** Returns true if field expOp is set (has been assigned a value) and false otherwise */
    public boolean isSetExpOp() {
      return this.expOp != null;
    }

    public void setExpOpIsSet(boolean value) {
      if (!value) {
        this.expOp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_WEIGHT_ID:
        if (value == null) {
          unsetTagWeightId();
        } else {
          setTagWeightId((Long)value);
        }
        break;

      case EXP_KEY:
        if (value == null) {
          unsetExpKey();
        } else {
          setExpKey((Integer)value);
        }
        break;

      case EXP_VAL:
        if (value == null) {
          unsetExpVal();
        } else {
          setExpVal((String)value);
        }
        break;

      case EXP_OP:
        if (value == null) {
          unsetExpOp();
        } else {
          setExpOp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_WEIGHT_ID:
        return new Long(getTagWeightId());

      case EXP_KEY:
        return new Integer(getExpKey());

      case EXP_VAL:
        return getExpVal();

      case EXP_OP:
        return getExpOp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_WEIGHT_ID:
        return isSetTagWeightId();
      case EXP_KEY:
        return isSetExpKey();
      case EXP_VAL:
        return isSetExpVal();
      case EXP_OP:
        return isSetExpOp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addExp_args)
        return this.equals((addExp_args)that);
      return false;
    }

    public boolean equals(addExp_args that) {
      if (that == null)
        return false;

      boolean this_present_tagWeightId = true;
      boolean that_present_tagWeightId = true;
      if (this_present_tagWeightId || that_present_tagWeightId) {
        if (!(this_present_tagWeightId && that_present_tagWeightId))
          return false;
        if (this.tagWeightId != that.tagWeightId)
          return false;
      }

      boolean this_present_expKey = true;
      boolean that_present_expKey = true;
      if (this_present_expKey || that_present_expKey) {
        if (!(this_present_expKey && that_present_expKey))
          return false;
        if (this.expKey != that.expKey)
          return false;
      }

      boolean this_present_expVal = true && this.isSetExpVal();
      boolean that_present_expVal = true && that.isSetExpVal();
      if (this_present_expVal || that_present_expVal) {
        if (!(this_present_expVal && that_present_expVal))
          return false;
        if (!this.expVal.equals(that.expVal))
          return false;
      }

      boolean this_present_expOp = true && this.isSetExpOp();
      boolean that_present_expOp = true && that.isSetExpOp();
      if (this_present_expOp || that_present_expOp) {
        if (!(this_present_expOp && that_present_expOp))
          return false;
        if (!this.expOp.equals(that.expOp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addExp_args typedOther = (addExp_args)other;

      lastComparison = Boolean.valueOf(isSetTagWeightId()).compareTo(typedOther.isSetTagWeightId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagWeightId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagWeightId, typedOther.tagWeightId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExpKey()).compareTo(typedOther.isSetExpKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expKey, typedOther.expKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExpVal()).compareTo(typedOther.isSetExpVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expVal, typedOther.expVal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExpOp()).compareTo(typedOther.isSetExpOp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpOp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expOp, typedOther.expOp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TAG_WEIGHT_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.tagWeightId = iprot.readI64();
              setTagWeightIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // EXP_KEY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.expKey = iprot.readI32();
              setExpKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // EXP_VAL
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.expVal = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // EXP_OP
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.expOp = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TAG_WEIGHT_ID_FIELD_DESC);
      oprot.writeI64(this.tagWeightId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXP_KEY_FIELD_DESC);
      oprot.writeI32(this.expKey);
      oprot.writeFieldEnd();
      if (this.expVal != null) {
        oprot.writeFieldBegin(EXP_VAL_FIELD_DESC);
        oprot.writeString(this.expVal);
        oprot.writeFieldEnd();
      }
      if (this.expOp != null) {
        oprot.writeFieldBegin(EXP_OP_FIELD_DESC);
        oprot.writeString(this.expOp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addExp_args(");
      boolean first = true;

      sb.append("tagWeightId:");
      sb.append(this.tagWeightId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("expKey:");
      sb.append(this.expKey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("expVal:");
      if (this.expVal == null) {
        sb.append("null");
      } else {
        sb.append(this.expVal);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expOp:");
      if (this.expOp == null) {
        sb.append("null");
      } else {
        sb.append(this.expOp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addExp_result implements org.apache.thrift.TBase<addExp_result, addExp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExp_result.class, metaDataMap);
    }

    public addExp_result() {
    }

    public addExp_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addExp_result(addExp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addExp_result deepCopy() {
      return new addExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addExp_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addExp_result)
        return this.equals((addExp_result)that);
      return false;
    }

    public boolean equals(addExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addExp_result typedOther = (addExp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteExp_args implements org.apache.thrift.TBase<deleteExp_args, deleteExp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExp_args");

    private static final org.apache.thrift.protocol.TField EXP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("expId", org.apache.thrift.protocol.TType.I64, (short)1);

    public long expId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXP_ID((short)1, "expId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXP_ID
            return EXP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXP_ID, new org.apache.thrift.meta_data.FieldMetaData("expId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExp_args.class, metaDataMap);
    }

    public deleteExp_args() {
    }

    public deleteExp_args(
      long expId)
    {
      this();
      this.expId = expId;
      setExpIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExp_args(deleteExp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.expId = other.expId;
    }

    public deleteExp_args deepCopy() {
      return new deleteExp_args(this);
    }

    @Override
    public void clear() {
      setExpIdIsSet(false);
      this.expId = 0;
    }

    public long getExpId() {
      return this.expId;
    }

    public deleteExp_args setExpId(long expId) {
      this.expId = expId;
      setExpIdIsSet(true);
      return this;
    }

    public void unsetExpId() {
      __isset_bit_vector.clear(__EXPID_ISSET_ID);
    }

    /** Returns true if field expId is set (has been assigned a value) and false otherwise */
    public boolean isSetExpId() {
      return __isset_bit_vector.get(__EXPID_ISSET_ID);
    }

    public void setExpIdIsSet(boolean value) {
      __isset_bit_vector.set(__EXPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXP_ID:
        if (value == null) {
          unsetExpId();
        } else {
          setExpId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXP_ID:
        return new Long(getExpId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXP_ID:
        return isSetExpId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExp_args)
        return this.equals((deleteExp_args)that);
      return false;
    }

    public boolean equals(deleteExp_args that) {
      if (that == null)
        return false;

      boolean this_present_expId = true;
      boolean that_present_expId = true;
      if (this_present_expId || that_present_expId) {
        if (!(this_present_expId && that_present_expId))
          return false;
        if (this.expId != that.expId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteExp_args typedOther = (deleteExp_args)other;

      lastComparison = Boolean.valueOf(isSetExpId()).compareTo(typedOther.isSetExpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expId, typedOther.expId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EXP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.expId = iprot.readI64();
              setExpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXP_ID_FIELD_DESC);
      oprot.writeI64(this.expId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExp_args(");
      boolean first = true;

      sb.append("expId:");
      sb.append(this.expId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteExp_result implements org.apache.thrift.TBase<deleteExp_result, deleteExp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExp_result.class, metaDataMap);
    }

    public deleteExp_result() {
    }

    public deleteExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExp_result(deleteExp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteExp_result deepCopy() {
      return new deleteExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExp_result)
        return this.equals((deleteExp_result)that);
      return false;
    }

    public boolean equals(deleteExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteExp_result typedOther = (deleteExp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyExp_args implements org.apache.thrift.TBase<modifyExp_args, modifyExp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyExp_args");

    private static final org.apache.thrift.protocol.TField JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String jsonParam;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_PARAM((short)1, "jsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_PARAM
            return JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("jsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyExp_args.class, metaDataMap);
    }

    public modifyExp_args() {
    }

    public modifyExp_args(
      String jsonParam)
    {
      this();
      this.jsonParam = jsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyExp_args(modifyExp_args other) {
      if (other.isSetJsonParam()) {
        this.jsonParam = other.jsonParam;
      }
    }

    public modifyExp_args deepCopy() {
      return new modifyExp_args(this);
    }

    @Override
    public void clear() {
      this.jsonParam = null;
    }

    public String getJsonParam() {
      return this.jsonParam;
    }

    public modifyExp_args setJsonParam(String jsonParam) {
      this.jsonParam = jsonParam;
      return this;
    }

    public void unsetJsonParam() {
      this.jsonParam = null;
    }

    /** Returns true if field jsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParam() {
      return this.jsonParam != null;
    }

    public void setJsonParamIsSet(boolean value) {
      if (!value) {
        this.jsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_PARAM:
        if (value == null) {
          unsetJsonParam();
        } else {
          setJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_PARAM:
        return getJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_PARAM:
        return isSetJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyExp_args)
        return this.equals((modifyExp_args)that);
      return false;
    }

    public boolean equals(modifyExp_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonParam = true && this.isSetJsonParam();
      boolean that_present_jsonParam = true && that.isSetJsonParam();
      if (this_present_jsonParam || that_present_jsonParam) {
        if (!(this_present_jsonParam && that_present_jsonParam))
          return false;
        if (!this.jsonParam.equals(that.jsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyExp_args typedOther = (modifyExp_args)other;

      lastComparison = Boolean.valueOf(isSetJsonParam()).compareTo(typedOther.isSetJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParam, typedOther.jsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JSON_PARAM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.jsonParam = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.jsonParam != null) {
        oprot.writeFieldBegin(JSON_PARAM_FIELD_DESC);
        oprot.writeString(this.jsonParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyExp_args(");
      boolean first = true;

      sb.append("jsonParam:");
      if (this.jsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyExp_result implements org.apache.thrift.TBase<modifyExp_result, modifyExp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyExp_result.class, metaDataMap);
    }

    public modifyExp_result() {
    }

    public modifyExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyExp_result(modifyExp_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public modifyExp_result deepCopy() {
      return new modifyExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public modifyExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyExp_result)
        return this.equals((modifyExp_result)that);
      return false;
    }

    public boolean equals(modifyExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyExp_result typedOther = (modifyExp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchExps_args implements org.apache.thrift.TBase<searchExps_args, searchExps_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExps_args");

    private static final org.apache.thrift.protocol.TField EXP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("expId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_WEIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagWeightId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)4);

    public long expId;
    public long tagWeightId;
    public int page;
    public int size;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXP_ID((short)1, "expId"),
      TAG_WEIGHT_ID((short)2, "tagWeightId"),
      PAGE((short)3, "page"),
      SIZE((short)4, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXP_ID
            return EXP_ID;
          case 2: // TAG_WEIGHT_ID
            return TAG_WEIGHT_ID;
          case 3: // PAGE
            return PAGE;
          case 4: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPID_ISSET_ID = 0;
    private static final int __TAGWEIGHTID_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __SIZE_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXP_ID, new org.apache.thrift.meta_data.FieldMetaData("expId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TAG_WEIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("tagWeightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExps_args.class, metaDataMap);
    }

    public searchExps_args() {
    }

    public searchExps_args(
      long expId,
      long tagWeightId,
      int page,
      int size)
    {
      this();
      this.expId = expId;
      setExpIdIsSet(true);
      this.tagWeightId = tagWeightId;
      setTagWeightIdIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExps_args(searchExps_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.expId = other.expId;
      this.tagWeightId = other.tagWeightId;
      this.page = other.page;
      this.size = other.size;
    }

    public searchExps_args deepCopy() {
      return new searchExps_args(this);
    }

    @Override
    public void clear() {
      setExpIdIsSet(false);
      this.expId = 0;
      setTagWeightIdIsSet(false);
      this.tagWeightId = 0;
      setPageIsSet(false);
      this.page = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public long getExpId() {
      return this.expId;
    }

    public searchExps_args setExpId(long expId) {
      this.expId = expId;
      setExpIdIsSet(true);
      return this;
    }

    public void unsetExpId() {
      __isset_bit_vector.clear(__EXPID_ISSET_ID);
    }

    /** Returns true if field expId is set (has been assigned a value) and false otherwise */
    public boolean isSetExpId() {
      return __isset_bit_vector.get(__EXPID_ISSET_ID);
    }

    public void setExpIdIsSet(boolean value) {
      __isset_bit_vector.set(__EXPID_ISSET_ID, value);
    }

    public long getTagWeightId() {
      return this.tagWeightId;
    }

    public searchExps_args setTagWeightId(long tagWeightId) {
      this.tagWeightId = tagWeightId;
      setTagWeightIdIsSet(true);
      return this;
    }

    public void unsetTagWeightId() {
      __isset_bit_vector.clear(__TAGWEIGHTID_ISSET_ID);
    }

    /** Returns true if field tagWeightId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagWeightId() {
      return __isset_bit_vector.get(__TAGWEIGHTID_ISSET_ID);
    }

    public void setTagWeightIdIsSet(boolean value) {
      __isset_bit_vector.set(__TAGWEIGHTID_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public searchExps_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public searchExps_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bit_vector.clear(__SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_bit_vector.get(__SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bit_vector.set(__SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXP_ID:
        if (value == null) {
          unsetExpId();
        } else {
          setExpId((Long)value);
        }
        break;

      case TAG_WEIGHT_ID:
        if (value == null) {
          unsetTagWeightId();
        } else {
          setTagWeightId((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXP_ID:
        return new Long(getExpId());

      case TAG_WEIGHT_ID:
        return new Long(getTagWeightId());

      case PAGE:
        return new Integer(getPage());

      case SIZE:
        return new Integer(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXP_ID:
        return isSetExpId();
      case TAG_WEIGHT_ID:
        return isSetTagWeightId();
      case PAGE:
        return isSetPage();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExps_args)
        return this.equals((searchExps_args)that);
      return false;
    }

    public boolean equals(searchExps_args that) {
      if (that == null)
        return false;

      boolean this_present_expId = true;
      boolean that_present_expId = true;
      if (this_present_expId || that_present_expId) {
        if (!(this_present_expId && that_present_expId))
          return false;
        if (this.expId != that.expId)
          return false;
      }

      boolean this_present_tagWeightId = true;
      boolean that_present_tagWeightId = true;
      if (this_present_tagWeightId || that_present_tagWeightId) {
        if (!(this_present_tagWeightId && that_present_tagWeightId))
          return false;
        if (this.tagWeightId != that.tagWeightId)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchExps_args typedOther = (searchExps_args)other;

      lastComparison = Boolean.valueOf(isSetExpId()).compareTo(typedOther.isSetExpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expId, typedOther.expId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagWeightId()).compareTo(typedOther.isSetTagWeightId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagWeightId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagWeightId, typedOther.tagWeightId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EXP_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.expId = iprot.readI64();
              setExpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG_WEIGHT_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.tagWeightId = iprot.readI64();
              setTagWeightIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.page = iprot.readI32();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SIZE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXP_ID_FIELD_DESC);
      oprot.writeI64(this.expId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAG_WEIGHT_ID_FIELD_DESC);
      oprot.writeI64(this.tagWeightId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExps_args(");
      boolean first = true;

      sb.append("expId:");
      sb.append(this.expId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagWeightId:");
      sb.append(this.tagWeightId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class searchExps_result implements org.apache.thrift.TBase<searchExps_result, searchExps_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExps_result.class, metaDataMap);
    }

    public searchExps_result() {
    }

    public searchExps_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExps_result(searchExps_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchExps_result deepCopy() {
      return new searchExps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchExps_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExps_result)
        return this.equals((searchExps_result)that);
      return false;
    }

    public boolean equals(searchExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchExps_result typedOther = (searchExps_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addTag_args implements org.apache.thrift.TBase<addTag_args, addTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTag_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_DESCRI_FIELD_DESC = new org.apache.thrift.protocol.TField("tagDescri", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TAGCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagclass", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TAG_SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagSubclass", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DEF_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("defWeight", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField CALC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("calcType", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)8);

    public long appkey;
    public String tagname;
    public String tagDescri;
    public String tagclass;
    public String tagSubclass;
    public double defWeight;
    public int calcType;
    public int days;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      TAGNAME((short)2, "tagname"),
      TAG_DESCRI((short)3, "tagDescri"),
      TAGCLASS((short)4, "tagclass"),
      TAG_SUBCLASS((short)5, "tagSubclass"),
      DEF_WEIGHT((short)6, "defWeight"),
      CALC_TYPE((short)7, "calcType"),
      DAYS((short)8, "days");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // TAGNAME
            return TAGNAME;
          case 3: // TAG_DESCRI
            return TAG_DESCRI;
          case 4: // TAGCLASS
            return TAGCLASS;
          case 5: // TAG_SUBCLASS
            return TAG_SUBCLASS;
          case 6: // DEF_WEIGHT
            return DEF_WEIGHT;
          case 7: // CALC_TYPE
            return CALC_TYPE;
          case 8: // DAYS
            return DAYS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPKEY_ISSET_ID = 0;
    private static final int __DEFWEIGHT_ISSET_ID = 1;
    private static final int __CALCTYPE_ISSET_ID = 2;
    private static final int __DAYS_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TAGNAME, new org.apache.thrift.meta_data.FieldMetaData("tagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_DESCRI, new org.apache.thrift.meta_data.FieldMetaData("tagDescri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAGCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("tagSubclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEF_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("defWeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CALC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("calcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTag_args.class, metaDataMap);
    }

    public addTag_args() {
    }

    public addTag_args(
      long appkey,
      String tagname,
      String tagDescri,
      String tagclass,
      String tagSubclass,
      double defWeight,
      int calcType,
      int days)
    {
      this();
      this.appkey = appkey;
      setAppkeyIsSet(true);
      this.tagname = tagname;
      this.tagDescri = tagDescri;
      this.tagclass = tagclass;
      this.tagSubclass = tagSubclass;
      this.defWeight = defWeight;
      setDefWeightIsSet(true);
      this.calcType = calcType;
      setCalcTypeIsSet(true);
      this.days = days;
      setDaysIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTag_args(addTag_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.appkey = other.appkey;
      if (other.isSetTagname()) {
        this.tagname = other.tagname;
      }
      if (other.isSetTagDescri()) {
        this.tagDescri = other.tagDescri;
      }
      if (other.isSetTagclass()) {
        this.tagclass = other.tagclass;
      }
      if (other.isSetTagSubclass()) {
        this.tagSubclass = other.tagSubclass;
      }
      this.defWeight = other.defWeight;
      this.calcType = other.calcType;
      this.days = other.days;
    }

    public addTag_args deepCopy() {
      return new addTag_args(this);
    }

    @Override
    public void clear() {
      setAppkeyIsSet(false);
      this.appkey = 0;
      this.tagname = null;
      this.tagDescri = null;
      this.tagclass = null;
      this.tagSubclass = null;
      setDefWeightIsSet(false);
      this.defWeight = 0.0;
      setCalcTypeIsSet(false);
      this.calcType = 0;
      setDaysIsSet(false);
      this.days = 0;
    }

    public long getAppkey() {
      return this.appkey;
    }

    public addTag_args setAppkey(long appkey) {
      this.appkey = appkey;
      setAppkeyIsSet(true);
      return this;
    }

    public void unsetAppkey() {
      __isset_bit_vector.clear(__APPKEY_ISSET_ID);
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return __isset_bit_vector.get(__APPKEY_ISSET_ID);
    }

    public void setAppkeyIsSet(boolean value) {
      __isset_bit_vector.set(__APPKEY_ISSET_ID, value);
    }

    public String getTagname() {
      return this.tagname;
    }

    public addTag_args setTagname(String tagname) {
      this.tagname = tagname;
      return this;
    }

    public void unsetTagname() {
      this.tagname = null;
    }

    /** Returns true if field tagname is set (has been assigned a value) and false otherwise */
    public boolean isSetTagname() {
      return this.tagname != null;
    }

    public void setTagnameIsSet(boolean value) {
      if (!value) {
        this.tagname = null;
      }
    }

    public String getTagDescri() {
      return this.tagDescri;
    }

    public addTag_args setTagDescri(String tagDescri) {
      this.tagDescri = tagDescri;
      return this;
    }

    public void unsetTagDescri() {
      this.tagDescri = null;
    }

    /** Returns true if field tagDescri is set (has been assigned a value) and false otherwise */
    public boolean isSetTagDescri() {
      return this.tagDescri != null;
    }

    public void setTagDescriIsSet(boolean value) {
      if (!value) {
        this.tagDescri = null;
      }
    }

    public String getTagclass() {
      return this.tagclass;
    }

    public addTag_args setTagclass(String tagclass) {
      this.tagclass = tagclass;
      return this;
    }

    public void unsetTagclass() {
      this.tagclass = null;
    }

    /** Returns true if field tagclass is set (has been assigned a value) and false otherwise */
    public boolean isSetTagclass() {
      return this.tagclass != null;
    }

    public void setTagclassIsSet(boolean value) {
      if (!value) {
        this.tagclass = null;
      }
    }

    public String getTagSubclass() {
      return this.tagSubclass;
    }

    public addTag_args setTagSubclass(String tagSubclass) {
      this.tagSubclass = tagSubclass;
      return this;
    }

    public void unsetTagSubclass() {
      this.tagSubclass = null;
    }

    /** Returns true if field tagSubclass is set (has been assigned a value) and false otherwise */
    public boolean isSetTagSubclass() {
      return this.tagSubclass != null;
    }

    public void setTagSubclassIsSet(boolean value) {
      if (!value) {
        this.tagSubclass = null;
      }
    }

    public double getDefWeight() {
      return this.defWeight;
    }

    public addTag_args setDefWeight(double defWeight) {
      this.defWeight = defWeight;
      setDefWeightIsSet(true);
      return this;
    }

    public void unsetDefWeight() {
      __isset_bit_vector.clear(__DEFWEIGHT_ISSET_ID);
    }

    /** Returns true if field defWeight is set (has been assigned a value) and false otherwise */
    public boolean isSetDefWeight() {
      return __isset_bit_vector.get(__DEFWEIGHT_ISSET_ID);
    }

    public void setDefWeightIsSet(boolean value) {
      __isset_bit_vector.set(__DEFWEIGHT_ISSET_ID, value);
    }

    public int getCalcType() {
      return this.calcType;
    }

    public addTag_args setCalcType(int calcType) {
      this.calcType = calcType;
      setCalcTypeIsSet(true);
      return this;
    }

    public void unsetCalcType() {
      __isset_bit_vector.clear(__CALCTYPE_ISSET_ID);
    }

    /** Returns true if field calcType is set (has been assigned a value) and false otherwise */
    public boolean isSetCalcType() {
      return __isset_bit_vector.get(__CALCTYPE_ISSET_ID);
    }

    public void setCalcTypeIsSet(boolean value) {
      __isset_bit_vector.set(__CALCTYPE_ISSET_ID, value);
    }

    public int getDays() {
      return this.days;
    }

    public addTag_args setDays(int days) {
      this.days = days;
      setDaysIsSet(true);
      return this;
    }

    public void unsetDays() {
      __isset_bit_vector.clear(__DAYS_ISSET_ID);
    }

    /** Returns true if field days is set (has been assigned a value) and false otherwise */
    public boolean isSetDays() {
      return __isset_bit_vector.get(__DAYS_ISSET_ID);
    }

    public void setDaysIsSet(boolean value) {
      __isset_bit_vector.set(__DAYS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((Long)value);
        }
        break;

      case TAGNAME:
        if (value == null) {
          unsetTagname();
        } else {
          setTagname((String)value);
        }
        break;

      case TAG_DESCRI:
        if (value == null) {
          unsetTagDescri();
        } else {
          setTagDescri((String)value);
        }
        break;

      case TAGCLASS:
        if (value == null) {
          unsetTagclass();
        } else {
          setTagclass((String)value);
        }
        break;

      case TAG_SUBCLASS:
        if (value == null) {
          unsetTagSubclass();
        } else {
          setTagSubclass((String)value);
        }
        break;

      case DEF_WEIGHT:
        if (value == null) {
          unsetDefWeight();
        } else {
          setDefWeight((Double)value);
        }
        break;

      case CALC_TYPE:
        if (value == null) {
          unsetCalcType();
        } else {
          setCalcType((Integer)value);
        }
        break;

      case DAYS:
        if (value == null) {
          unsetDays();
        } else {
          setDays((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return new Long(getAppkey());

      case TAGNAME:
        return getTagname();

      case TAG_DESCRI:
        return getTagDescri();

      case TAGCLASS:
        return getTagclass();

      case TAG_SUBCLASS:
        return getTagSubclass();

      case DEF_WEIGHT:
        return new Double(getDefWeight());

      case CALC_TYPE:
        return new Integer(getCalcType());

      case DAYS:
        return new Integer(getDays());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case TAGNAME:
        return isSetTagname();
      case TAG_DESCRI:
        return isSetTagDescri();
      case TAGCLASS:
        return isSetTagclass();
      case TAG_SUBCLASS:
        return isSetTagSubclass();
      case DEF_WEIGHT:
        return isSetDefWeight();
      case CALC_TYPE:
        return isSetCalcType();
      case DAYS:
        return isSetDays();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTag_args)
        return this.equals((addTag_args)that);
      return false;
    }

    public boolean equals(addTag_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true;
      boolean that_present_appkey = true;
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (this.appkey != that.appkey)
          return false;
      }

      boolean this_present_tagname = true && this.isSetTagname();
      boolean that_present_tagname = true && that.isSetTagname();
      if (this_present_tagname || that_present_tagname) {
        if (!(this_present_tagname && that_present_tagname))
          return false;
        if (!this.tagname.equals(that.tagname))
          return false;
      }

      boolean this_present_tagDescri = true && this.isSetTagDescri();
      boolean that_present_tagDescri = true && that.isSetTagDescri();
      if (this_present_tagDescri || that_present_tagDescri) {
        if (!(this_present_tagDescri && that_present_tagDescri))
          return false;
        if (!this.tagDescri.equals(that.tagDescri))
          return false;
      }

      boolean this_present_tagclass = true && this.isSetTagclass();
      boolean that_present_tagclass = true && that.isSetTagclass();
      if (this_present_tagclass || that_present_tagclass) {
        if (!(this_present_tagclass && that_present_tagclass))
          return false;
        if (!this.tagclass.equals(that.tagclass))
          return false;
      }

      boolean this_present_tagSubclass = true && this.isSetTagSubclass();
      boolean that_present_tagSubclass = true && that.isSetTagSubclass();
      if (this_present_tagSubclass || that_present_tagSubclass) {
        if (!(this_present_tagSubclass && that_present_tagSubclass))
          return false;
        if (!this.tagSubclass.equals(that.tagSubclass))
          return false;
      }

      boolean this_present_defWeight = true;
      boolean that_present_defWeight = true;
      if (this_present_defWeight || that_present_defWeight) {
        if (!(this_present_defWeight && that_present_defWeight))
          return false;
        if (this.defWeight != that.defWeight)
          return false;
      }

      boolean this_present_calcType = true;
      boolean that_present_calcType = true;
      if (this_present_calcType || that_present_calcType) {
        if (!(this_present_calcType && that_present_calcType))
          return false;
        if (this.calcType != that.calcType)
          return false;
      }

      boolean this_present_days = true;
      boolean that_present_days = true;
      if (this_present_days || that_present_days) {
        if (!(this_present_days && that_present_days))
          return false;
        if (this.days != that.days)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addTag_args typedOther = (addTag_args)other;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagname()).compareTo(typedOther.isSetTagname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagname, typedOther.tagname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagDescri()).compareTo(typedOther.isSetTagDescri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagDescri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagDescri, typedOther.tagDescri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagclass()).compareTo(typedOther.isSetTagclass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagclass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagclass, typedOther.tagclass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagSubclass()).compareTo(typedOther.isSetTagSubclass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagSubclass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagSubclass, typedOther.tagSubclass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDefWeight()).compareTo(typedOther.isSetDefWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defWeight, typedOther.defWeight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCalcType()).compareTo(typedOther.isSetCalcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCalcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calcType, typedOther.calcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDays()).compareTo(typedOther.isSetDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, typedOther.days);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APPKEY
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.appkey = iprot.readI64();
              setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAGNAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagname = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TAG_DESCRI
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagDescri = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TAGCLASS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagclass = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // TAG_SUBCLASS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.tagSubclass = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // DEF_WEIGHT
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.defWeight = iprot.readDouble();
              setDefWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // CALC_TYPE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.calcType = iprot.readI32();
              setCalcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // DAYS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.days = iprot.readI32();
              setDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPKEY_FIELD_DESC);
      oprot.writeI64(this.appkey);
      oprot.writeFieldEnd();
      if (this.tagname != null) {
        oprot.writeFieldBegin(TAGNAME_FIELD_DESC);
        oprot.writeString(this.tagname);
        oprot.writeFieldEnd();
      }
      if (this.tagDescri != null) {
        oprot.writeFieldBegin(TAG_DESCRI_FIELD_DESC);
        oprot.writeString(this.tagDescri);
        oprot.writeFieldEnd();
      }
      if (this.tagclass != null) {
        oprot.writeFieldBegin(TAGCLASS_FIELD_DESC);
        oprot.writeString(this.tagclass);
        oprot.writeFieldEnd();
      }
      if (this.tagSubclass != null) {
        oprot.writeFieldBegin(TAG_SUBCLASS_FIELD_DESC);
        oprot.writeString(this.tagSubclass);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEF_WEIGHT_FIELD_DESC);
      oprot.writeDouble(this.defWeight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CALC_TYPE_FIELD_DESC);
      oprot.writeI32(this.calcType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAYS_FIELD_DESC);
      oprot.writeI32(this.days);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTag_args(");
      boolean first = true;

      sb.append("appkey:");
      sb.append(this.appkey);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagname:");
      if (this.tagname == null) {
        sb.append("null");
      } else {
        sb.append(this.tagname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagDescri:");
      if (this.tagDescri == null) {
        sb.append("null");
      } else {
        sb.append(this.tagDescri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagclass:");
      if (this.tagclass == null) {
        sb.append("null");
      } else {
        sb.append(this.tagclass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagSubclass:");
      if (this.tagSubclass == null) {
        sb.append("null");
      } else {
        sb.append(this.tagSubclass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("defWeight:");
      sb.append(this.defWeight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("calcType:");
      sb.append(this.calcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("days:");
      sb.append(this.days);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addTag_result implements org.apache.thrift.TBase<addTag_result, addTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTag_result.class, metaDataMap);
    }

    public addTag_result() {
    }

    public addTag_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTag_result(addTag_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addTag_result deepCopy() {
      return new addTag_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addTag_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTag_result)
        return this.equals((addTag_result)that);
      return false;
    }

    public boolean equals(addTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addTag_result typedOther = (addTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
